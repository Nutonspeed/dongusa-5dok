#!/usr/bin/env tsx

console.log("ЁЯФН р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ...\n")

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ package.json
try {
  const fs = require("fs")
  const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"))
  console.log("тЬЕ package.json: р╕нр╣Ир╕▓р╕Щр╣Др╕Фр╣Йр╕кр╕│р╣Ар╕гр╣Зр╕И")
  console.log(`   - Name: ${packageJson.name}`)
  console.log(`   - Version: ${packageJson.version}`)
  console.log(`   - Next.js: ${packageJson.dependencies?.next || "р╣Др╕бр╣Ир╕Юр╕Ъ"}`)
  console.log(`   - React: ${packageJson.dependencies?.react || "р╣Др╕бр╣Ир╕Юр╕Ъ"}`)
} catch (error) {
  console.log("тЭМ package.json: р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓", error.message)
}

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ TypeScript config
try {
  const fs = require("fs")
  const tsconfig = JSON.parse(fs.readFileSync("tsconfig.json", "utf8"))
  console.log("тЬЕ tsconfig.json: р╕нр╣Ир╕▓р╕Щр╣Др╕Фр╣Йр╕кр╕│р╣Ар╕гр╣Зр╕И")
  console.log(`   - Target: ${tsconfig.compilerOptions?.target || "р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕"}`)
  console.log(`   - Module: ${tsconfig.compilerOptions?.module || "р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕"}`)
} catch (error) {
  console.log("тЭМ tsconfig.json: р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓", error.message)
}

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Next.js config
try {
  const fs = require("fs")
  const nextConfig = fs.readFileSync("next.config.mjs", "utf8")
  console.log("тЬЕ next.config.mjs: р╕нр╣Ир╕▓р╕Щр╣Др╕Фр╣Йр╕кр╕│р╣Ар╕гр╣Зр╕И")
  if (nextConfig.includes("ignoreBuildErrors: true")) {
    console.log("тЪая╕П  р╕Юр╕Ъ ignoreBuildErrors: true - р╕нр╕▓р╕Ир╕Лр╣Ир╕нр╕Щр╕Ыр╕▒р╕Нр╕лр╕▓")
  }
} catch (error) {
  console.log("тЭМ next.config.mjs: р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓", error.message)
}

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕Яр╕ер╣Мр╕кр╕│р╕Др╕▒р╕Н
const importantFiles = ["app/layout.tsx", "app/page.tsx", "app/admin/layout.tsx", "app/admin/page.tsx"]

console.log("\nЁЯУБ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕Яр╕ер╣Мр╕кр╕│р╕Др╕▒р╕Н:")
importantFiles.forEach((file) => {
  try {
    const fs = require("fs")
    fs.accessSync(file)
    console.log(`тЬЕ ${file}: р╕Юр╕Ър╣Др╕Яр╕ер╣М`)
  } catch (error) {
    console.log(`тЭМ ${file}: р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М`)
  }
})

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Environment Variables
console.log("\nЁЯФР р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Environment Variables:")
const requiredEnvs = ["SUPABASE_URL", "SUPABASE_ANON_KEY", "NEXT_PUBLIC_SUPABASE_URL", "NEXT_PUBLIC_SUPABASE_ANON_KEY"]

requiredEnvs.forEach((env) => {
  if (process.env[env]) {
    console.log(`тЬЕ ${env}: р╕бр╕╡р╕Др╣Ир╕▓`)
  } else {
    console.log(`тЪая╕П  ${env}: р╣Др╕бр╣Ир╕бр╕╡р╕Др╣Ир╕▓`)
  }
})

console.log("\nЁЯУК р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:")
console.log("- р╕гр╕░р╕Ър╕Ър╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ: р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
console.log("- р╕Бр╕▓р╕гр╕Бр╕│р╕лр╕Щр╕Фр╕Др╣Ир╕▓: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╣Йр╕з")
console.log("- р╣Др╕Яр╕ер╣Мр╕кр╕│р╕Др╕▒р╕Н: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╣Йр╕з")
console.log("\nЁЯЪА р╕гр╕░р╕Ър╕Ър╕Юр╕гр╣Йр╕нр╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕г deploy!")
