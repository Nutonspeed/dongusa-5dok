[{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/ModernLoginForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'checkAccountStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":33,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setLockoutTimeLeft' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":45},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":386,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14412,14449],"text":"\n              Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14412,14449],"text":"\n              Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14412,14449],"text":"\n              Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14412,14449],"text":"\n              Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useAuth } from \"@/app/contexts/AuthContext\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { IS_PRODUCTION } from \"@/lib/runtime\"\nimport {\n  AlertTriangle,\n  Apple,\n  CheckCircle,\n  Chrome,\n  Clock,\n  Eye,\n  EyeOff,\n  Facebook,\n  Fingerprint,\n  Loader2,\n  Lock,\n  Mail,\n  Shield,\n  Smartphone,\n} from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\nimport type React from \"react\"\nimport { useEffect, useState } from \"react\"\n\nexport default function ModernLoginForm() {\n  const router = useRouter()\n  const { signIn, checkAccountStatus } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [requiresCaptcha, setRequiresCaptcha] = useState(false)\n  const [lockoutUntil, setLockoutUntil] = useState<number | null>(null)\n  const [remainingAttempts, setRemainingAttempts] = useState<number | null>(null)\n  const [lockoutTimeLeft, setLockoutTimeLeft] = useState(\"\")\n  const [securityLevel, setSecurityLevel] = useState<\"low\" | \"medium\" | \"high\">(\"low\")\n  const [biometricAvailable, setBiometricAvailable] = useState(false)\n  const [connectionSecure, setConnectionSecure] = useState(true)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && \"PublicKeyCredential\" in window) {\n      setBiometricAvailable(true)\n    }\n\n    setConnectionSecure(window.location.protocol === \"https:\")\n  }, [])\n\n  useEffect(() => {\n    if (!email || !password) {\n      setSecurityLevel(\"low\")\n      return\n    }\n\n    let level: \"low\" | \"medium\" | \"high\" = \"low\"\n\n    const hasUpperCase = /[A-Z]/.test(password)\n    const hasLowerCase = /[a-z]/.test(password)\n    const hasNumbers = /\\d/.test(password)\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password)\n    const isLongEnough = password.length >= 8\n\n    const strengthScore = [hasUpperCase, hasLowerCase, hasNumbers, hasSpecialChar, isLongEnough].filter(Boolean).length\n\n    if (strengthScore >= 4) level = \"high\"\n    else if (strengthScore >= 2) level = \"medium\"\n\n    setSecurityLevel(level)\n  }, [email, password])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!email || !password) return\n\n    setIsLoading(true)\n    setError(\"\")\n\n    try {\n      const result = await signIn(email, password)\n\n      if (result.success) {\n        toast({\n          description: \"Successfully signed in to ELF SofaCover Pro!\",\n          duration: 3000,\n        })\n        // Redirect is handled by AuthContext (setTimeout) and middleware based on role.\n        // Avoid pushing here to prevent conflicting/double redirects.\n        return\n      } else {\n        setError(result.error || \"Login failed\")\n        setRequiresCaptcha(result.requiresCaptcha || false)\n        setLockoutUntil(result.lockoutUntil || null)\n        setRemainingAttempts(result.remainingAttempts || null)\n\n        if (result.error) {\n          toast({ variant: \"destructive\", description: result.error })\n        }\n      }\n    } catch (err) {\n      const message = \"An error occurred during sign in\"\n      setError(message)\n      toast({ variant: \"destructive\", description: message })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSocialLogin = (provider: string) => {\n    toast({\n      description: `${provider} login integration coming soon to ELF SofaCover Pro!`,\n      duration: 4000,\n    })\n  }\n\n  const handleBiometricLogin = async () => {\n    if (!biometricAvailable) {\n      toast({\n        variant: \"destructive\",\n        description: \"Biometric authentication not available on this device\",\n      })\n      return\n    }\n\n    toast({\n      description: \"Biometric authentication coming soon!\",\n      duration: 3000,\n    })\n  }\n\n  const isLocked = lockoutUntil && Date.now() < lockoutUntil\n\n  const SecurityIndicator = () => (\n    <div className=\"flex items-center space-x-2 text-xs\">\n      {connectionSecure ? (\n        <div className=\"flex items-center text-green-600\">\n          <CheckCircle className=\"w-3 h-3 mr-1\" />\n          <span>Secure Connection</span>\n        </div>\n      ) : (\n        <div className=\"flex items-center text-amber-600\">\n          <AlertTriangle className=\"w-3 h-3 mr-1\" />\n          <span>Unsecured Connection</span>\n        </div>\n      )}\n      <div className=\"flex items-center\">\n        <Shield\n          className={`w-3 h-3 mr-1 ${securityLevel === \"high\" ? \"text-green-600\" : securityLevel === \"medium\" ? \"text-amber-600\" : \"text-red-600\"\n            }`}\n        />\n        <span\n          className={`capitalize ${securityLevel === \"high\" ? \"text-green-600\" : securityLevel === \"medium\" ? \"text-amber-600\" : \"text-red-600\"\n            }`}\n        >\n          {securityLevel} Security\n        </span>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4 shadow-2xl animate-pulse\">\n          <div className=\"text-2xl font-bold text-primary-foreground\">ELF</div>\n        </div>\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n          Welcome Back\n        </h1>\n        <p className=\"text-muted-foreground\">Sign in to your ELF SofaCover Pro account</p>\n        <div className=\"mt-3 flex justify-center\">\n          <SecurityIndicator />\n        </div>\n      </div>\n\n      {/* Main Login Card */}\n      <Card className=\"shadow-2xl border-0 bg-card/80 backdrop-blur-md\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"space-y-4\">\n            {/* Social Login Buttons */}\n            <div className=\"grid grid-cols-3 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"Google\")}\n                className=\"hover:bg-primary/10 hover:border-primary/30 transition-all duration-300 transform hover:scale-105\"\n              >\n                <Chrome className=\"w-4 h-4 text-primary\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"Facebook\")}\n                className=\"hover:bg-primary/10 hover:border-primary/30 transition-all duration-300 transform hover:scale-105\"\n              >\n                <Facebook className=\"w-4 h-4 text-primary\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"Apple\")}\n                className=\"hover:bg-muted/50 hover:border-muted transition-all duration-300 bg-transparent\"\n              >\n                <Apple className=\"w-4 h-4 text-foreground\" />\n              </Button>\n            </div>\n\n            {biometricAvailable && (\n              <Button\n                variant=\"outline\"\n                onClick={handleBiometricLogin}\n                className=\"w-full hover:bg-primary/10 hover:border-primary/30 transition-all duration-300 bg-transparent\"\n              >\n                <Fingerprint className=\"w-4 h-4 mr-2 text-primary\" />\n                Use Biometric Authentication\n              </Button>\n            )}\n\n            {/* Divider */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-border\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">Or continue with email</span>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Status Alerts */}\n          {error && (\n            <Alert variant=\"destructive\" className=\"animate-in slide-in-from-top-2 duration-300\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {isLocked && (\n            <Alert className=\"animate-in slide-in-from-top-2 duration-300 border-amber-200 bg-amber-50\">\n              <Clock className=\"h-4 w-4 text-amber-600\" />\n              <AlertDescription className=\"text-amber-800\">\n                Account temporarily locked. Time remaining: {lockoutTimeLeft}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {requiresCaptcha && !isLocked && (\n            <Alert className=\"animate-in slide-in-from-top-2 duration-300 border-blue-200 bg-blue-50\">\n              <Shield className=\"h-4 w-4 text-blue-600\" />\n              <AlertDescription className=\"text-blue-800\">\n                Additional security verification may be required.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {remainingAttempts !== null && remainingAttempts < 5 && !isLocked && (\n            <Alert variant=\"destructive\" className=\"animate-in slide-in-from-top-2 duration-300\">\n              <AlertDescription>\n                Warning: {remainingAttempts} attempts remaining before account lockout.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Login Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium text-foreground\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"you@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  disabled={isLocked}\n                  className=\"pl-10 bg-input border-border focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-300\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium text-foreground\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  disabled={isLocked}\n                  className=\"pl-10 pr-10 bg-input border-border focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-300\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors duration-200\"\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n              {password && (\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <div\n                    className={`h-1 flex-1 rounded ${securityLevel === \"high\"\n                        ? \"bg-green-500\"\n                        : securityLevel === \"medium\"\n                          ? \"bg-amber-500\"\n                          : \"bg-red-500\"\n                      }`}\n                  />\n                  <span\n                    className={`text-xs ${securityLevel === \"high\"\n                        ? \"text-green-600\"\n                        : securityLevel === \"medium\"\n                          ? \"text-amber-600\"\n                          : \"text-red-600\"\n                      }`}\n                  >\n                    {securityLevel === \"high\" ? \"Strong\" : securityLevel === \"medium\" ? \"Medium\" : \"Weak\"}\n                  </span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  id=\"remember\"\n                  name=\"remember\"\n                  type=\"checkbox\"\n                  className=\"h-4 w-4 text-primary focus:ring-ring border-border rounded\"\n                />\n                <label htmlFor=\"remember\" className=\"text-sm text-muted-foreground\">\n                  Remember me\n                </label>\n              </div>\n              <Link\n                href=\"/auth/forgot-password\"\n                className=\"text-sm text-primary hover:text-primary/90 transition-colors duration-200\"\n              >\n                Forgot password?\n              </Link>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading || isLocked}\n              className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-medium py-6 text-base shadow-lg transition-all duration-300 transform hover:scale-[1.02] hover:shadow-xl\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : isLocked ? (\n                <>\n                  <Clock className=\"mr-2 h-4 w-4\" />\n                  Account Locked ({lockoutTimeLeft})\n                </>\n              ) : (\n                <>\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Sign In Securely\n                </>\n              )}\n            </Button>\n          </form>\n\n          {/* Sign Up Link */}\n          <div className=\"text-center pt-4 border-t border-border\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link\n                href=\"/auth/sign-up\"\n                className=\"text-primary hover:text-primary/90 font-medium transition-colors duration-200\"\n              >\n                Create account\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {!IS_PRODUCTION && (\n        <div className=\"mt-6 space-y-3\">\n          <div className=\"p-4 bg-accent/50 border border-accent/40 rounded-lg\">\n            <h4 className=\"font-semibold text-foreground mb-2 flex items-center\">\n              <Shield className=\"w-4 h-4 mr-2 text-primary\" />\n              Demo Credentials - ELF SofaCover Pro\n            </h4>\n            <div className=\"space-y-2 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Customer:</span>{\" \"}\n                <span className=\"text-foreground font-mono bg-white px-2 py-1 rounded\">\n                  user@sofacover.com / user123\n                </span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Admin:</span>{\" \"}\n                <span className=\"text-foreground font-mono bg-white px-2 py-1 rounded\">\n                  admin@sofacover.com / admin123\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-center space-x-4 text-xs text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <Shield className=\"w-3 h-3 mr-1 text-primary\" />\n              <span>256-bit SSL</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Smartphone className=\"w-3 h-3 mr-1 text-primary\" />\n              <span>Mobile Ready</span>\n            </div>\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"w-3 h-3 mr-1 text-primary\" />\n              <span>GDPR Compliant</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/AIMLDashboard.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":339,"column":23,"nodeType":"JSXOpeningElement","endLine":343,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  Brain,\n  Eye,\n  MessageSquare,\n  TrendingUp,\n  Zap,\n  Target,\n  Settings,\n  RefreshCw,\n  Upload,\n  Camera,\n  BarChart3,\n} from \"lucide-react\"\nimport {\n  advancedAIML,\n  type RecommendationResult,\n  type NLPAnalysis,\n  type ComputerVisionResult,\n} from \"@/lib/advanced-ai-ml-engine\"\n\nexport function AIMLDashboard() {\n  const [recommendations, setRecommendations] = useState<RecommendationResult[]>([])\n  const [nlpAnalysis, setNlpAnalysis] = useState<NLPAnalysis | null>(null)\n  const [visionResult, setVisionResult] = useState<ComputerVisionResult | null>(null)\n  const [customerPrediction, setCustomerPrediction] = useState<any>(null)\n  const [pricingOptimization, setPricingOptimization] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n\n  // Form states\n  const [textInput, setTextInput] = useState(\"\")\n  const [imageUrl, setImageUrl] = useState(\"\")\n  const [userId, setUserId] = useState(\"user_123\")\n  const [productId, setProductId] = useState(\"product_1\")\n\n  const handleGenerateRecommendations = async () => {\n    setLoading(true)\n    try {\n      const results = await advancedAIML.generateProductRecommendations(userId, {\n        category: \"sofa-covers\",\n        price_range: [1000, 5000],\n      })\n      setRecommendations(results)\n    } catch (error) {\n      console.error(\"Error generating recommendations:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAnalyzeText = async () => {\n    if (!textInput.trim()) return\n    setLoading(true)\n    try {\n      const analysis = await advancedAIML.analyzeText(textInput, {\n        detect_intent: true,\n        extract_entities: true,\n      })\n      setNlpAnalysis(analysis)\n    } catch (error) {\n      console.error(\"Error analyzing text:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAnalyzeImage = async () => {\n    if (!imageUrl.trim()) return\n    setLoading(true)\n    try {\n      const result = await advancedAIML.analyzeImage(imageUrl, {\n        find_similar: true,\n        quality_check: true,\n      })\n      setVisionResult(result)\n    } catch (error) {\n      console.error(\"Error analyzing image:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handlePredictCustomerBehavior = async (predictionType: string) => {\n    setLoading(true)\n    try {\n      const prediction = await advancedAIML.predictCustomerBehavior(userId, predictionType as any)\n      setCustomerPrediction({ type: predictionType, ...prediction })\n    } catch (error) {\n      console.error(\"Error predicting customer behavior:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleOptimizePricing = async () => {\n    setLoading(true)\n    try {\n      const optimization = await advancedAIML.optimizePricing(productId, {\n        competitor_prices: [2200, 2800, 2600],\n        demand_forecast: 120,\n        inventory_level: 50,\n        seasonal_factor: 1.1,\n      })\n      setPricingOptimization(optimization)\n    } catch (error) {\n      console.error(\"Error optimizing pricing:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getSentimentColor = (sentiment: string) => {\n    switch (sentiment) {\n      case \"positive\":\n        return \"bg-green-100 text-green-800 border-green-200\"\n      case \"negative\":\n        return \"bg-red-100 text-red-800 border-red-200\"\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n    }\n  }\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 0.8) return \"text-green-600\"\n    if (confidence >= 0.6) return \"text-yellow-600\"\n    return \"text-red-600\"\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary flex items-center gap-3\">\n            <Brain className=\"w-8 h-8\" />\n            AI & Machine Learning Dashboard\n          </h1>\n          <p className=\"text-gray-600 mt-1\">ระบบ AI ขั้นสูงสำหรับการวิเคราะห์และพยากรณ์</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button variant=\"outline\">\n            <Settings className=\"w-4 h-4 mr-2\" />\n            ตั้งค่า AI Models\n          </Button>\n          <Button>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            อัปเดตโมเดล\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"recommendations\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"recommendations\">Product Recommendations</TabsTrigger>\n          <TabsTrigger value=\"nlp\">Natural Language Processing</TabsTrigger>\n          <TabsTrigger value=\"vision\">Computer Vision</TabsTrigger>\n          <TabsTrigger value=\"predictions\">Customer Predictions</TabsTrigger>\n          <TabsTrigger value=\"pricing\">Dynamic Pricing</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"recommendations\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                AI Product Recommendations\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <Input\n                  placeholder=\"User ID\"\n                  value={userId}\n                  onChange={(e) => setUserId(e.target.value)}\n                  className=\"w-48\"\n                />\n                <Button onClick={handleGenerateRecommendations} disabled={loading}>\n                  <Brain className=\"w-4 h-4 mr-2\" />\n                  {loading ? \"กำลังวิเคราะห์...\" : \"สร้างคำแนะนำ\"}\n                </Button>\n              </div>\n\n              {recommendations.length > 0 && (\n                <div className=\"grid gap-4\">\n                  {recommendations.map((rec, index) => (\n                    <Card key={index} className=\"border-l-4 border-l-blue-500\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold\">Product {rec.product_id}</h4>\n                            <p className=\"text-sm text-gray-600\">{rec.reason}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant=\"outline\" className=\"mb-2\">\n                              {rec.category}\n                            </Badge>\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Score: </span>\n                              <span className={getConfidenceColor(rec.score)}>{(rec.score * 100).toFixed(1)}%</span>\n                            </div>\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Confidence: </span>\n                              <span className={getConfidenceColor(rec.confidence)}>\n                                {(rec.confidence * 100).toFixed(1)}%\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"nlp\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"w-5 h-5\" />\n                Natural Language Processing\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <Textarea\n                  placeholder=\"พิมพ์ข้อความที่ต้องการวิเคราะห์...\"\n                  value={textInput}\n                  onChange={(e) => setTextInput(e.target.value)}\n                  rows={4}\n                />\n                <Button onClick={handleAnalyzeText} disabled={loading || !textInput.trim()}>\n                  <Brain className=\"w-4 h-4 mr-2\" />\n                  {loading ? \"กำลังวิเคราะห์...\" : \"วิเคราะห์ข้อความ\"}\n                </Button>\n              </div>\n\n              {nlpAnalysis && (\n                <Card className=\"bg-gray-50\">\n                  <CardContent className=\"p-4 space-y-4\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Sentiment Analysis</h4>\n                        <Badge className={getSentimentColor(nlpAnalysis.sentiment)}>\n                          {nlpAnalysis.sentiment} ({(nlpAnalysis.sentiment_score * 100).toFixed(1)}%)\n                        </Badge>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Language</h4>\n                        <Badge variant=\"outline\">{nlpAnalysis.language === \"th\" ? \"ไทย\" : \"English\"}</Badge>\n                      </div>\n                    </div>\n\n                    {nlpAnalysis.keywords.length > 0 && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Keywords</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {nlpAnalysis.keywords.map((keyword, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {keyword}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {nlpAnalysis.entities.length > 0 && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Entities</h4>\n                        <div className=\"space-y-2\">\n                          {nlpAnalysis.entities.map((entity, index) => (\n                            <div key={index} className=\"flex items-center justify-between p-2 bg-white rounded\">\n                              <span>{entity.name}</span>\n                              <div className=\"flex items-center gap-2\">\n                                <Badge variant=\"outline\">{entity.type}</Badge>\n                                <span className=\"text-sm text-gray-600\">{(entity.confidence * 100).toFixed(1)}%</span>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {nlpAnalysis.intent && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Intent</h4>\n                        <Badge className=\"bg-purple-100 text-purple-800\">{nlpAnalysis.intent}</Badge>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"vision\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Eye className=\"w-5 h-5\" />\n                Computer Vision Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <Input\n                  placeholder=\"Image URL\"\n                  value={imageUrl}\n                  onChange={(e) => setImageUrl(e.target.value)}\n                  className=\"flex-1\"\n                />\n                <Button variant=\"outline\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload\n                </Button>\n                <Button onClick={handleAnalyzeImage} disabled={loading || !imageUrl.trim()}>\n                  <Camera className=\"w-4 h-4 mr-2\" />\n                  {loading ? \"กำลังวิเคราะห์...\" : \"วิเคราะห์รูปภาพ\"}\n                </Button>\n              </div>\n\n              {visionResult && (\n                <div className=\"space-y-4\">\n                  {imageUrl && (\n                    <div className=\"text-center\">\n                      <img\n                        src={imageUrl || \"/placeholder.svg\"}\n                        alt=\"Analysis\"\n                        className=\"max-w-md mx-auto rounded-lg shadow-md\"\n                      />\n                    </div>\n                  )}\n\n                  <Card className=\"bg-gray-50\">\n                    <CardContent className=\"p-4 space-y-4\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Objects Detected</h4>\n                          <div className=\"space-y-2\">\n                            {visionResult.objects.map((obj, index) => (\n                              <div key={index} className=\"flex items-center justify-between p-2 bg-white rounded\">\n                                <span className=\"capitalize\">{obj.name}</span>\n                                <span className=\"text-sm text-gray-600\">{(obj.confidence * 100).toFixed(1)}%</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Color Analysis</h4>\n                          <div className=\"space-y-2\">\n                            {visionResult.colors.map((color, index) => (\n                              <div key={index} className=\"flex items-center justify-between p-2 bg-white rounded\">\n                                <div className=\"flex items-center gap-2\">\n                                  <div className=\"w-4 h-4 rounded border\" style={{ backgroundColor: color.hex }}></div>\n                                  <span>{color.name}</span>\n                                </div>\n                                <span className=\"text-sm text-gray-600\">{color.percentage}%</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Quality Score</h4>\n                        <div className=\"flex items-center gap-4\">\n                          <Progress value={visionResult.quality_score * 100} className=\"flex-1\" />\n                          <span className=\"font-medium\">{(visionResult.quality_score * 100).toFixed(1)}%</span>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Auto Tags</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {visionResult.tags.map((tag, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"predictions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Customer Behavior Predictions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <Input\n                  placeholder=\"User ID\"\n                  value={userId}\n                  onChange={(e) => setUserId(e.target.value)}\n                  className=\"w-48\"\n                />\n                <Select onValueChange={handlePredictCustomerBehavior}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"เลือกประเภทการพยากรณ์\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"churn\">Churn Risk</SelectItem>\n                    <SelectItem value=\"lifetime_value\">Lifetime Value</SelectItem>\n                    <SelectItem value=\"next_purchase\">Next Purchase</SelectItem>\n                    <SelectItem value=\"price_sensitivity\">Price Sensitivity</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {customerPrediction && (\n                <Card className=\"bg-gray-50\">\n                  <CardContent className=\"p-4 space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-semibold capitalize\">\n                        {customerPrediction.type.replace(\"_\", \" \")} Prediction\n                      </h4>\n                      <Badge className={getConfidenceColor(customerPrediction.confidence)}>\n                        {(customerPrediction.confidence * 100).toFixed(1)}% Confidence\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <h5 className=\"font-medium mb-2\">Prediction Result</h5>\n                        <div className=\"p-3 bg-white rounded\">\n                          <pre className=\"text-sm\">{JSON.stringify(customerPrediction.prediction, null, 2)}</pre>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h5 className=\"font-medium mb-2\">Contributing Factors</h5>\n                        <div className=\"space-y-2\">\n                          {customerPrediction.factors.map((factor: any, index: number) => (\n                            <div key={index} className=\"flex items-center justify-between p-2 bg-white rounded\">\n                              <span className=\"text-sm\">{factor.factor}</span>\n                              <span className=\"text-sm font-medium\">{(factor.importance * 100).toFixed(1)}%</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n\n                    {customerPrediction.recommendations.length > 0 && (\n                      <div>\n                        <h5 className=\"font-medium mb-2\">AI Recommendations</h5>\n                        <ul className=\"space-y-1\">\n                          {customerPrediction.recommendations.map((rec: string, index: number) => (\n                            <li key={index} className=\"text-sm text-gray-700 flex items-start gap-2\">\n                              <span className=\"w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></span>\n                              {rec}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"pricing\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Dynamic Pricing Optimization\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <Input\n                  placeholder=\"Product ID\"\n                  value={productId}\n                  onChange={(e) => setProductId(e.target.value)}\n                  className=\"w-48\"\n                />\n                <Button onClick={handleOptimizePricing} disabled={loading}>\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  {loading ? \"กำลังคำนวณ...\" : \"ปรับปรุงราคา\"}\n                </Button>\n              </div>\n\n              {pricingOptimization && (\n                <Card className=\"bg-gray-50\">\n                  <CardContent className=\"p-4 space-y-4\">\n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <div className=\"text-center p-4 bg-white rounded\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          ฿{pricingOptimization.recommended_price.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">ราคาที่แนะนำ</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-white rounded\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {(pricingOptimization.revenue_impact * 100).toFixed(1)}%\n                        </div>\n                        <div className=\"text-sm text-gray-600\">ผลกระทบต่อรายได้</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-white rounded\">\n                        <div className=\"text-2xl font-bold text-purple-600\">\n                          {(pricingOptimization.confidence * 100).toFixed(1)}%\n                        </div>\n                        <div className=\"text-sm text-gray-600\">ความมั่นใจ</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Analysis Details</h5>\n                      <ul className=\"space-y-1\">\n                        {pricingOptimization.reasoning.map((reason: string, index: number) => (\n                          <li key={index} className=\"text-sm text-gray-700 flex items-start gap-2\">\n                            <span className=\"w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></span>\n                            {reason}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/AdvancedFabricManagementDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFileUpload'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleFileUpload]","fix":{"range":[5294,5296],"text":"[handleFileUpload]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useCallback, useRef } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Upload,\n  Plus,\n  Search,\n  Eye,\n  Edit,\n  Trash2,\n  Grid,\n  List,\n  EyeOff,\n  MoreHorizontal,\n  ImageIcon,\n  FolderPlus,\n  FileImage,\n} from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface FabricCollection {\n  id: string\n  name: string\n  slug: string\n  description: string\n  isVisible: boolean\n  createdAt: Date\n  updatedAt: Date\n  fabricCount: number\n  thumbnail?: string\n}\n\ninterface FabricPattern {\n  id: string\n  name: string\n  collectionId: string\n  collectionName: string\n  imageUrl: string\n  description: string\n  price: number\n  sku: string\n  isVisible: boolean\n  tags: string[]\n  createdAt: Date\n  updatedAt: Date\n  colors: string[]\n  material: string\n  dimensions: string\n}\n\nconst mockCollections: FabricCollection[] = [\n  {\n    id: \"COL-001\",\n    name: \"คอลเลกชั่นพรีเมียม\",\n    slug: \"premium-collection\",\n    description: \"ผ้าคุณภาพสูงสำหรับลูกค้าพิเศษ\",\n    isVisible: true,\n    createdAt: new Date(\"2024-01-01\"),\n    updatedAt: new Date(\"2024-01-15\"),\n    fabricCount: 12,\n    thumbnail: \"/placeholder-15r1g.png\",\n  },\n  {\n    id: \"COL-002\",\n    name: \"คอลเลกชั่นคลาสสิก\",\n    slug: \"classic-collection\",\n    description: \"ลายผ้าคลาสสิกที่เป็นที่นิยม\",\n    isVisible: true,\n    createdAt: new Date(\"2024-01-05\"),\n    updatedAt: new Date(\"2024-01-20\"),\n    fabricCount: 8,\n    thumbnail: \"/classic-fabric-patterns.png\",\n  },\n]\n\nconst mockFabrics: FabricPattern[] = [\n  {\n    id: \"FAB-001\",\n    name: \"ลายดอกไม้สีฟ้า\",\n    collectionId: \"COL-001\",\n    collectionName: \"คอลเลกชั่นพรีเมียม\",\n    imageUrl: \"/blue-floral-fabric.png\",\n    description: \"ลายดอกไม้สีฟ้าอ่อน เหมาะสำหรับห้องนั่งเล่น\",\n    price: 2500,\n    sku: \"PREM-001\",\n    isVisible: true,\n    tags: [\"ดอกไม้\", \"สีฟ้า\", \"พรีเมียม\"],\n    createdAt: new Date(\"2024-01-10\"),\n    updatedAt: new Date(\"2024-01-15\"),\n    colors: [\"#87CEEB\", \"#4682B4\", \"#FFFFFF\"],\n    material: \"Cotton Blend\",\n    dimensions: \"150x200 cm\",\n  },\n  {\n    id: \"FAB-002\",\n    name: \"ลายทางสีเทา\",\n    collectionId: \"COL-002\",\n    collectionName: \"คอลเลกชั่นคลาสสิก\",\n    imageUrl: \"/placeholder-fjq8q.png\",\n    description: \"ลายทางสีเทาสไตล์โมเดิร์น\",\n    price: 1800,\n    sku: \"CLAS-001\",\n    isVisible: true,\n    tags: [\"ทาง\", \"สีเทา\", \"โมเดิร์น\"],\n    createdAt: new Date(\"2024-01-12\"),\n    updatedAt: new Date(\"2024-01-18\"),\n    colors: [\"#808080\", \"#D3D3D3\", \"#FFFFFF\"],\n    material: \"Polyester\",\n    dimensions: \"140x180 cm\",\n  },\n]\n\nexport default function AdvancedFabricManagementDashboard() {\n  const { toast } = useToast()\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const [collections, setCollections] = useState<FabricCollection[]>(mockCollections)\n  const [fabrics, setFabrics] = useState<FabricPattern[]>(mockFabrics)\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [selectedCollection, setSelectedCollection] = useState<string>(\"all\")\n  const [selectedFabrics, setSelectedFabrics] = useState<string[]>([])\n  const [showCreateCollection, setShowCreateCollection] = useState(false)\n  const [showCreateFabric, setShowCreateFabric] = useState(false)\n  const [uploadProgress, setUploadProgress] = useState(0)\n  const [isUploading, setIsUploading] = useState(false)\n  const [dragOver, setDragOver] = useState(false)\n\n  const [newCollection, setNewCollection] = useState({\n    name: \"\",\n    slug: \"\",\n    description: \"\",\n    isVisible: true,\n  })\n\n  const [newFabric, setNewFabric] = useState({\n    name: \"\",\n    collectionId: \"\",\n    description: \"\",\n    price: 0,\n    sku: \"\",\n    isVisible: true,\n    tags: \"\",\n    material: \"\",\n    dimensions: \"\",\n    colors: \"\",\n  })\n\n  const filteredFabrics = fabrics.filter((fabric) => {\n    const matchesSearch =\n      fabric.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      fabric.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      fabric.tags.some((tag) => tag.toLowerCase().includes(searchTerm.toLowerCase()))\n    const matchesCollection = selectedCollection === \"all\" || fabric.collectionId === selectedCollection\n    return matchesSearch && matchesCollection\n  })\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault()\n    setDragOver(true)\n  }, [])\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault()\n    setDragOver(false)\n  }, [])\n\n  const handleDrop = useCallback(async (e: React.DragEvent) => {\n    e.preventDefault()\n    setDragOver(false)\n\n    const files = Array.from(e.dataTransfer.files)\n    await handleFileUpload(files)\n  }, [])\n\n  const handleFileUpload = async (files: File[]) => {\n    setIsUploading(true)\n    setUploadProgress(0)\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n      const formData = new FormData()\n      formData.append(\"file\", file)\n      formData.append(\"collection\", \"general\")\n      formData.append(\"category\", \"fabric\")\n\n      try {\n        const response = await fetch(\"/api/fabric/upload\", {\n          method: \"POST\",\n          body: formData,\n        })\n\n        if (response.ok) {\n          const uploadedFile = await response.json()\n\n          const newFabric: FabricPattern = {\n            id: `FAB-${Date.now()}-${i}`,\n            name: file.name.replace(/\\.[^/.]+$/, \"\"),\n            collectionId: \"COL-001\",\n            collectionName: \"คอลเลกชั่นพรีเมียม\",\n            imageUrl: uploadedFile.url,\n            description: \"อัปโหลดใหม่\",\n            price: 0,\n            sku: `AUTO-${Date.now()}`,\n            isVisible: false,\n            tags: [\"ใหม่\"],\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            colors: [],\n            material: \"ไม่ระบุ\",\n            dimensions: \"ไม่ระบุ\",\n          }\n\n          setFabrics((prev) => [...prev, newFabric])\n        }\n      } catch (error) {\n        console.error(\"Upload failed:\", error)\n      }\n\n      setUploadProgress(((i + 1) / files.length) * 100)\n    }\n\n    setIsUploading(false)\n    toast({\n      title: \"อัปโหลดสำเร็จ\",\n      description: `อัปโหลดไฟล์ ${files.length} ไฟล์เรียบร้อยแล้ว`,\n    })\n  }\n\n  const createCollection = () => {\n    const collection: FabricCollection = {\n      id: `COL-${String(collections.length + 1).padStart(3, \"0\")}`,\n      ...newCollection,\n      slug: newCollection.name.toLowerCase().replace(/\\s+/g, \"-\"),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      fabricCount: 0,\n      thumbnail: `/placeholder.svg?height=200&width=200&query=${encodeURIComponent(newCollection.name)}`,\n    }\n\n    setCollections([...collections, collection])\n    setShowCreateCollection(false)\n    setNewCollection({ name: \"\", slug: \"\", description: \"\", isVisible: true })\n\n    toast({\n      title: \"สร้างคอลเลกชั่นสำเร็จ\",\n      description: `คอลเลกชั่น \"${collection.name}\" ถูกสร้างแล้ว`,\n    })\n  }\n\n  const createFabric = () => {\n    const fabric: FabricPattern = {\n      id: `FAB-${String(fabrics.length + 1).padStart(3, \"0\")}`,\n      ...newFabric,\n      collectionName: collections.find((c) => c.id === newFabric.collectionId)?.name || \"\",\n      imageUrl: `/placeholder.svg?height=300&width=300&query=${encodeURIComponent(newFabric.name)}`,\n      tags: newFabric.tags\n        .split(\",\")\n        .map((tag) => tag.trim())\n        .filter(Boolean),\n      colors: newFabric.colors\n        .split(\",\")\n        .map((color) => color.trim())\n        .filter(Boolean),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n\n    setFabrics([...fabrics, fabric])\n    setShowCreateFabric(false)\n    setNewFabric({\n      name: \"\",\n      collectionId: \"\",\n      description: \"\",\n      price: 0,\n      sku: \"\",\n      isVisible: true,\n      tags: \"\",\n      material: \"\",\n      dimensions: \"\",\n      colors: \"\",\n    })\n\n    setCollections(\n      collections.map((col) =>\n        col.id === newFabric.collectionId ? { ...col, fabricCount: col.fabricCount + 1 } : col,\n      ),\n    )\n\n    toast({\n      title: \"เพิ่มลายผ้าสำเร็จ\",\n      description: `ลายผ้า \"${fabric.name}\" ถูกเพิ่มแล้ว`,\n    })\n  }\n\n  const toggleFabricSelection = (fabricId: string) => {\n    setSelectedFabrics((prev) => (prev.includes(fabricId) ? prev.filter((id) => id !== fabricId) : [...prev, fabricId]))\n  }\n\n  const selectAllFabrics = () => {\n    setSelectedFabrics(filteredFabrics.map((f) => f.id))\n  }\n\n  const clearSelection = () => {\n    setSelectedFabrics([])\n  }\n\n  const bulkDelete = () => {\n    setFabrics((prev) => prev.filter((f) => !selectedFabrics.includes(f.id)))\n    setSelectedFabrics([])\n    toast({\n      title: \"ลบสำเร็จ\",\n      description: `ลบลายผ้า ${selectedFabrics.length} รายการแล้ว`,\n    })\n  }\n\n  const bulkToggleVisibility = (visible: boolean) => {\n    setFabrics((prev) =>\n      prev.map((f) => (selectedFabrics.includes(f.id) ? { ...f, isVisible: visible, updatedAt: new Date() } : f)),\n    )\n    setSelectedFabrics([])\n    toast({\n      title: \"อัปเดตสำเร็จ\",\n      description: `อัปเดตสถานะ ${selectedFabrics.length} รายการแล้ว`,\n    })\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-admin-fabric-gradient\">จัดการแกเลอรี่ผ้า</h1>\n          <p className=\"text-muted-foreground mt-1\">จัดการคอลเลกชั่นและลายผ้าทั้งหมดอย่างมีประสิทธิภาพ</p>\n        </div>\n        <div className=\"flex gap-2 mt-4 md:mt-0\">\n          <Dialog open={showCreateCollection} onOpenChange={setShowCreateCollection}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"admin-fabric-shadow bg-transparent\">\n                <FolderPlus className=\"w-4 h-4 mr-2\" />\n                เพิ่มคอลเลกชั่น\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>สร้างคอลเลกชั่นใหม่</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"collectionName\">ชื่อคอลเลกชั่น</Label>\n                  <Input\n                    id=\"collectionName\"\n                    value={newCollection.name}\n                    onChange={(e) => setNewCollection({ ...newCollection, name: e.target.value })}\n                    placeholder=\"ชื่อคอลเลกชั่น\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"collectionDesc\">คำอธิบาย</Label>\n                  <Textarea\n                    id=\"collectionDesc\"\n                    value={newCollection.description}\n                    onChange={(e) => setNewCollection({ ...newCollection, description: e.target.value })}\n                    placeholder=\"คำอธิบายคอลเลกชั่น\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"collectionVisible\"\n                    checked={newCollection.isVisible}\n                    onCheckedChange={(checked) => setNewCollection({ ...newCollection, isVisible: !!checked })}\n                  />\n                  <Label htmlFor=\"collectionVisible\">แสดงในหน้าเว็บ</Label>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowCreateCollection(false)}>\n                    ยกเลิก\n                  </Button>\n                  <Button onClick={createCollection} className=\"bg-primary hover:bg-primary/90\">\n                    สร้างคอลเลกชั่น\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={showCreateFabric} onOpenChange={setShowCreateFabric}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary hover:bg-primary/90 admin-fabric-shadow\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                เพิ่มลายผ้า\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>เพิ่มลายผ้าใหม่</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"fabricName\">ชื่อลายผ้า</Label>\n                    <Input\n                      id=\"fabricName\"\n                      value={newFabric.name}\n                      onChange={(e) => setNewFabric({ ...newFabric, name: e.target.value })}\n                      placeholder=\"ชื่อลายผ้า\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"fabricCollection\">คอลเลกชั่น</Label>\n                    <Select\n                      value={newFabric.collectionId}\n                      onValueChange={(value) => setNewFabric({ ...newFabric, collectionId: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"เลือกคอลเลกชั่น\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {collections.map((collection) => (\n                          <SelectItem key={collection.id} value={collection.id}>\n                            {collection.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"fabricPrice\">ราคา (บาท)</Label>\n                    <Input\n                      id=\"fabricPrice\"\n                      type=\"number\"\n                      value={newFabric.price}\n                      onChange={(e) => setNewFabric({ ...newFabric, price: Number.parseFloat(e.target.value) || 0 })}\n                      placeholder=\"ราคา\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"fabricSku\">รหัสสินค้า</Label>\n                    <Input\n                      id=\"fabricSku\"\n                      value={newFabric.sku}\n                      onChange={(e) => setNewFabric({ ...newFabric, sku: e.target.value })}\n                      placeholder=\"รหัสสินค้า\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"fabricMaterial\">วัสดุ</Label>\n                    <Input\n                      id=\"fabricMaterial\"\n                      value={newFabric.material}\n                      onChange={(e) => setNewFabric({ ...newFabric, material: e.target.value })}\n                      placeholder=\"เช่น Cotton, Polyester\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fabricDesc\">คำอธิบาย</Label>\n                  <Textarea\n                    id=\"fabricDesc\"\n                    value={newFabric.description}\n                    onChange={(e) => setNewFabric({ ...newFabric, description: e.target.value })}\n                    placeholder=\"คำอธิบายลายผ้า\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"fabricTags\">แท็ก (คั่นด้วยจุลภาค)</Label>\n                    <Input\n                      id=\"fabricTags\"\n                      value={newFabric.tags}\n                      onChange={(e) => setNewFabric({ ...newFabric, tags: e.target.value })}\n                      placeholder=\"เช่น ดอกไม้, สีฟ้า, พรีเมียม\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"fabricColors\">สี (คั่นด้วยจุลภาค)</Label>\n                    <Input\n                      id=\"fabricColors\"\n                      value={newFabric.colors}\n                      onChange={(e) => setNewFabric({ ...newFabric, colors: e.target.value })}\n                      placeholder=\"เช่น #FF0000, #00FF00, #0000FF\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"fabricVisible\"\n                    checked={newFabric.isVisible}\n                    onCheckedChange={(checked) => setNewFabric({ ...newFabric, isVisible: !!checked })}\n                  />\n                  <Label htmlFor=\"fabricVisible\">แสดงในหน้าเว็บ</Label>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowCreateFabric(false)}>\n                    ยกเลิก\n                  </Button>\n                  <Button onClick={createFabric} className=\"bg-primary hover:bg-primary/90\">\n                    เพิ่มลายผ้า\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Upload Zone */}\n      <Card className=\"admin-fabric-shadow\">\n        <CardContent className=\"p-6\">\n          <div\n            className={`fabric-upload-zone rounded-lg p-8 text-center ${dragOver ? \"drag-over\" : \"\"}`}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n            onClick={() => fileInputRef.current?.click()}\n          >\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept=\"image/*\"\n              className=\"hidden\"\n              onChange={(e) => {\n                if (e.target.files) {\n                  handleFileUpload(Array.from(e.target.files))\n                }\n              }}\n            />\n            <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">อัปโหลดลายผ้า</h3>\n            <p className=\"text-muted-foreground mb-4\">ลากและวางไฟล์ที่นี่ หรือคลิกเพื่อเลือกไฟล์</p>\n            <p className=\"text-sm text-muted-foreground\">รองรับไฟล์ JPG, PNG, WebP ขนาดไม่เกิน 10MB</p>\n            {isUploading && (\n              <div className=\"mt-4\">\n                <Progress value={uploadProgress} className=\"w-full\" />\n                <p className=\"text-sm text-muted-foreground mt-2\">กำลังอัปโหลด... {Math.round(uploadProgress)}%</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Collections Overview */}\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">คอลเลกชั่นทั้งหมด</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {collections.map((collection) => (\n            <Card key={collection.id} className=\"fabric-card-interactive admin-fabric-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"aspect-video bg-muted rounded-lg mb-3 overflow-hidden\">\n                  <ImageIcon\n                    src={collection.thumbnail || \"/placeholder.svg\"}\n                    alt={collection.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-lg\">{collection.name}</h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{collection.description}</p>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={collection.isVisible ? \"default\" : \"secondary\"}>\n                        {collection.isVisible ? \"แสดง\" : \"ซ่อน\"}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">{collection.fabricCount} ลายผ้า</span>\n                    </div>\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <MoreHorizontal className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Filters and Controls */}\n      <Card className=\"admin-fabric-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n              <Input\n                type=\"text\"\n                placeholder=\"ค้นหาลายผ้า...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={selectedCollection} onValueChange={setSelectedCollection}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"เลือกคอลเลกชั่น\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">ทุกคอลเลกชั่น</SelectItem>\n                {collections.map((collection) => (\n                  <SelectItem key={collection.id} value={collection.id}>\n                    {collection.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n              >\n                <Grid className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Actions Bar */}\n      {selectedFabrics.length > 0 && (\n        <div className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50\">\n          <div className=\"bulk-action-bar rounded-lg px-6 py-3 flex items-center gap-4\">\n            <span className=\"text-sm font-medium\">เลือกแล้ว {selectedFabrics.length} รายการ</span>\n            <div className=\"flex gap-2\">\n              <Button size=\"sm\" variant=\"outline\" onClick={() => bulkToggleVisibility(true)}>\n                <Eye className=\"w-4 h-4 mr-1\" />\n                แสดง\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => bulkToggleVisibility(false)}>\n                <EyeOff className=\"w-4 h-4 mr-1\" />\n                ซ่อน\n              </Button>\n              <Button size=\"sm\" variant=\"destructive\" onClick={bulkDelete}>\n                <Trash2 className=\"w-4 h-4 mr-1\" />\n                ลบ\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" onClick={clearSelection}>\n                ยกเลิก\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Fabrics Display */}\n      <Card className=\"admin-fabric-shadow\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>ลายผ้าทั้งหมด ({filteredFabrics.length})</CardTitle>\n            <div className=\"flex gap-2\">\n              <Button size=\"sm\" variant=\"outline\" onClick={selectAllFabrics}>\n                เลือกทั้งหมด\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={clearSelection}>\n                ยกเลิกการเลือก\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {viewMode === \"grid\" ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {filteredFabrics.map((fabric) => (\n                <div key={fabric.id} className=\"fabric-card-interactive border rounded-lg overflow-hidden\">\n                  <div className=\"aspect-square bg-muted relative\">\n                    <ImageIcon\n                      src={fabric.imageUrl || \"/placeholder.svg\"}\n                      alt={fabric.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <Checkbox\n                        checked={selectedFabrics.includes(fabric.id)}\n                        onCheckedChange={() => toggleFabricSelection(fabric.id)}\n                        className=\"bg-white/80 backdrop-blur-sm\"\n                      />\n                    </div>\n                    <div className=\"absolute top-2 right-2 flex gap-1\">\n                      <Badge variant={fabric.isVisible ? \"default\" : \"secondary\"} className=\"text-xs\">\n                        {fabric.isVisible ? \"แสดง\" : \"ซ่อน\"}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"p-4\">\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">{fabric.name}</h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{fabric.collectionName}</p>\n                    <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">{fabric.description}</p>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-bold text-primary\">{fabric.price.toLocaleString()} บาท</span>\n                      <span className=\"text-xs text-muted-foreground\">{fabric.sku}</span>\n                    </div>\n                    <div className=\"flex flex-wrap gap-1 mb-3\">\n                      {fabric.tags.slice(0, 3).map((tag) => (\n                        <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                      {fabric.tags.length > 3 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{fabric.tags.length - 3}\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1 bg-transparent\">\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1 bg-transparent\">\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"flex-1 text-destructive hover:text-destructive bg-transparent\"\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-border\">\n                    <th className=\"text-left py-3 px-4 font-semibold\">\n                      <Checkbox\n                        checked={selectedFabrics.length === filteredFabrics.length && filteredFabrics.length > 0}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            selectAllFabrics()\n                          } else {\n                            clearSelection()\n                          }\n                        }}\n                      />\n                    </th>\n                    <th className=\"text-left py-3 px-4 font-semibold\">รูปภาพ</th>\n                    <th className=\"text-left py-3 px-4 font-semibold\">ชื่อ</th>\n                    <th className=\"text-left py-3 px-4 font-semibold\">คอลเลกชั่น</th>\n                    <th className=\"text-left py-3 px-4 font-semibold\">ราคา</th>\n                    <th className=\"text-left py-3 px-4 font-semibold\">รหัส</th>\n                    <th className=\"text-left py-3 px-4 font-semibold\">สถานะ</th>\n                    <th className=\"text-left py-3 px-4 font-semibold\">การดำเนินการ</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredFabrics.map((fabric) => (\n                    <tr key={fabric.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"py-4 px-4\">\n                        <Checkbox\n                          checked={selectedFabrics.includes(fabric.id)}\n                          onCheckedChange={() => toggleFabricSelection(fabric.id)}\n                        />\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <ImageIcon\n                          src={fabric.imageUrl || \"/placeholder.svg\"}\n                          alt={fabric.name}\n                          className=\"w-12 h-12 object-cover rounded\"\n                        />\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <div>\n                          <h4 className=\"font-semibold\">{fabric.name}</h4>\n                          <p className=\"text-sm text-muted-foreground line-clamp-1\">{fabric.description}</p>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-4\">{fabric.collectionName}</td>\n                      <td className=\"py-4 px-4\">\n                        <span className=\"font-bold text-primary\">{fabric.price.toLocaleString()} บาท</span>\n                      </td>\n                      <td className=\"py-4 px-4\">{fabric.sku}</td>\n                      <td className=\"py-4 px-4\">\n                        <Badge variant={fabric.isVisible ? \"default\" : \"secondary\"}>\n                          {fabric.isVisible ? \"แสดง\" : \"ซ่อน\"}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-destructive hover:text-destructive\">\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n\n          {filteredFabrics.length === 0 && (\n            <div className=\"text-center py-12\">\n              <FileImage className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">ไม่พบลายผ้า</h3>\n              <p className=\"text-muted-foreground\">ลองเปลี่ยนคำค้นหาหรือตัวกรองดู</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/AdvancedSystemConfigurationDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'configBackup' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":129,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCategoryIntegrations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":330,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":330,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'systemStatus' is defined but never used. Allowed unused args must match /^_/u.","line":465,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":465,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'healthScore' is defined but never used. Allowed unused args must match /^_/u.","line":465,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":465,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'systemStatus' is defined but never used. Allowed unused args must match /^_/u.","line":652,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":652,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'testResults' is defined but never used. Allowed unused args must match /^_/u.","line":652,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":652,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Database,\n  Mail,\n  CreditCard,\n  Truck,\n  TestTube,\n  RefreshCw,\n  Download,\n  Upload,\n  Eye,\n  EyeOff,\n  Copy,\n  ExternalLink,\n  Zap,\n  Shield,\n  Monitor,\n  Activity,\n} from \"lucide-react\"\n\ninterface SystemStatus {\n  database: \"connected\" | \"disconnected\" | \"error\"\n  email: \"connected\" | \"mock\" | \"error\"\n  payment: \"connected\" | \"mock\" | \"error\"\n  shipping: \"connected\" | \"mock\" | \"error\"\n  storage: \"connected\" | \"disconnected\" | \"error\"\n  cache: \"connected\" | \"disconnected\" | \"error\"\n}\n\ninterface FeatureFlags {\n  customCovers: boolean\n  bulkOrders: boolean\n  loyaltyProgram: boolean\n  reviews: boolean\n  wishlist: boolean\n  advancedAnalytics: boolean\n  bulkOperations: boolean\n  exportFeatures: boolean\n  aiRecommendations: boolean\n  realTimeNotifications: boolean\n}\n\ninterface IntegrationConfig {\n  id: string\n  name: string\n  description: string\n  status: string\n  envVars: string[]\n  testEndpoint: string\n  icon: any\n  category: string\n  priority: \"high\" | \"medium\" | \"low\"\n  documentation: string\n}\n\nfunction getStatusIcon(status: string) {\n  switch (status) {\n    case \"connected\":\n      return <CheckCircle className=\"h-5 w-5 text-green-500\" />\n    case \"mock\":\n      return <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n    case \"error\":\n    case \"disconnected\":\n      return <XCircle className=\"h-5 w-5 text-red-500\" />\n    default:\n      return <AlertTriangle className=\"h-5 w-5 text-gray-500\" />\n  }\n}\n\nfunction getStatusBadge(status: string) {\n  switch (status) {\n    case \"connected\":\n      return <Badge className=\"bg-green-500 hover:bg-green-600\">เชื่อมต่อแล้ว</Badge>\n    case \"mock\":\n      return (\n        <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-800 hover:bg-amber-200\">\n          โหมดทดสอบ\n        </Badge>\n      )\n    case \"error\":\n      return <Badge variant=\"destructive\">ข้อผิดพลาด</Badge>\n    case \"disconnected\":\n      return <Badge variant=\"outline\">ไม่ได้เชื่อมต่อ</Badge>\n    default:\n      return <Badge variant=\"outline\">ไม่ทราบสถานะ</Badge>\n  }\n}\n\nexport default function AdvancedSystemConfigurationDashboard() {\n  const [systemStatus, setSystemStatus] = useState<SystemStatus>({\n    database: \"connected\",\n    email: \"mock\",\n    payment: \"mock\",\n    shipping: \"mock\",\n    storage: \"connected\",\n    cache: \"connected\",\n  })\n\n  const [featureFlags, setFeatureFlags] = useState<FeatureFlags>({\n    customCovers: true,\n    bulkOrders: true,\n    loyaltyProgram: false,\n    reviews: true,\n    wishlist: true,\n    advancedAnalytics: true,\n    bulkOperations: true,\n    exportFeatures: true,\n    aiRecommendations: false,\n    realTimeNotifications: true,\n  })\n\n  const [loading, setLoading] = useState(false)\n  const [testResults, setTestResults] = useState<Record<string, any>>({})\n  const [showSecrets, setShowSecrets] = useState<Record<string, boolean>>({})\n  const [configBackup, setConfigBackup] = useState<any>(null)\n\n  const integrations: IntegrationConfig[] = [\n    {\n      id: \"database\",\n      name: \"ฐานข้อมูล\",\n      description: \"Supabase และ Neon Database สำหรับจัดเก็บข้อมูลหลัก\",\n      status: systemStatus.database,\n      envVars: [\"SUPABASE_URL\", \"SUPABASE_ANON_KEY\", \"SUPABASE_SERVICE_ROLE_KEY\", \"DATABASE_URL\"],\n      testEndpoint: \"database\",\n      icon: Database,\n      category: \"core\",\n      priority: \"high\",\n      documentation: \"https://supabase.com/docs\",\n    },\n    {\n      id: \"email\",\n      name: \"ระบบอีเมล\",\n      description: \"SMTP หรือ SendGrid สำหรับส่งอีเมลแจ้งเตือนและการตลาด\",\n      status: systemStatus.email,\n      envVars: [\"SMTP_HOST\", \"SMTP_USER\", \"SMTP_PASS\", \"SENDGRID_API_KEY\"],\n      testEndpoint: \"email\",\n      icon: Mail,\n      category: \"communication\",\n      priority: \"high\",\n      documentation: \"https://sendgrid.com/docs\",\n    },\n    {\n      id: \"payment\",\n      name: \"การชำระเงิน\",\n      description: \"Stripe และ PromptPay สำหรับรับชำระเงิน\",\n      status: systemStatus.payment,\n      envVars: [\"STRIPE_SECRET_KEY\", \"STRIPE_PUBLISHABLE_KEY\", \"PROMPTPAY_ID\"],\n      testEndpoint: \"payment\",\n      icon: CreditCard,\n      category: \"commerce\",\n      priority: \"high\",\n      documentation: \"https://stripe.com/docs\",\n    },\n    {\n      id: \"shipping\",\n      name: \"การจัดส่ง\",\n      description: \"Thailand Post, Kerry, Flash Express สำหรับจัดส่งสินค้า\",\n      status: systemStatus.shipping,\n      envVars: [\"THAILAND_POST_API_KEY\", \"KERRY_API_KEY\", \"FLASH_API_KEY\"],\n      testEndpoint: \"shipping\",\n      icon: Truck,\n      category: \"logistics\",\n      priority: \"medium\",\n      documentation: \"https://developer.thailandpost.co.th\",\n    },\n    {\n      id: \"storage\",\n      name: \"การจัดเก็บไฟล์\",\n      description: \"Vercel Blob Storage สำหรับจัดเก็บรูปภาพและไฟล์\",\n      status: systemStatus.storage,\n      envVars: [\"BLOB_READ_WRITE_TOKEN\"],\n      testEndpoint: \"storage\",\n      icon: Database,\n      category: \"core\",\n      priority: \"high\",\n      documentation: \"https://vercel.com/docs/storage/vercel-blob\",\n    },\n    {\n      id: \"cache\",\n      name: \"ระบบแคช\",\n      description: \"Upstash Redis สำหรับแคชข้อมูลและเพิ่มประสิทธิภาพ\",\n      status: systemStatus.cache,\n      envVars: [\"KV_REST_API_URL\", \"KV_REST_API_TOKEN\"],\n      testEndpoint: \"cache\",\n      icon: Zap,\n      category: \"performance\",\n      priority: \"medium\",\n      documentation: \"https://upstash.com/docs/redis\",\n    },\n  ]\n\n  useEffect(() => {\n    checkSystemStatus()\n    loadFeatureFlags()\n    loadConfigBackup()\n  }, [])\n\n  const checkSystemStatus = async () => {\n    setLoading(true)\n    try {\n      const response = await fetch(\"/api/admin/system-status\")\n      if (response.ok) {\n        const status = await response.json()\n        setSystemStatus(status)\n      }\n    } catch (error) {\n      console.error(\"Failed to check system status:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadFeatureFlags = async () => {\n    try {\n      const response = await fetch(\"/api/admin/feature-flags\")\n      if (response.ok) {\n        const flags = await response.json()\n        setFeatureFlags(flags)\n      }\n    } catch (error) {\n      console.error(\"Failed to load feature flags:\", error)\n    }\n  }\n\n  const loadConfigBackup = async () => {\n    try {\n      const response = await fetch(\"/api/admin/config-backup\")\n      if (response.ok) {\n        const backup = await response.json()\n        setConfigBackup(backup)\n      }\n    } catch (error) {\n      console.error(\"Failed to load config backup:\", error)\n    }\n  }\n\n  const testConnection = async (service: string) => {\n    setLoading(true)\n    try {\n      const response = await fetch(`/api/health/${service}`)\n      const result = await response.json()\n      setTestResults((prev) => ({ ...prev, [service]: result }))\n\n      setSystemStatus((prev) => ({\n        ...prev,\n        [service]: result.status === \"healthy\" ? \"connected\" : \"error\",\n      }))\n    } catch (error) {\n      setTestResults((prev) => ({\n        ...prev,\n        [service]: { status: \"error\", error: error.message },\n      }))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateFeatureFlag = async (flag: keyof FeatureFlags, value: boolean) => {\n    try {\n      const response = await fetch(\"/api/admin/feature-flags\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ [flag]: value }),\n      })\n\n      if (response.ok) {\n        setFeatureFlags((prev) => ({ ...prev, [flag]: value }))\n      }\n    } catch (error) {\n      console.error(\"Failed to update feature flag:\", error)\n    }\n  }\n\n  const exportConfiguration = async () => {\n    try {\n      const config = {\n        systemStatus,\n        featureFlags,\n        timestamp: new Date().toISOString(),\n        version: \"1.0.0\",\n      }\n\n      const blob = new Blob([JSON.stringify(config, null, 2)], {\n        type: \"application/json\",\n      })\n      const url = URL.createObjectURL(blob)\n      const a = document.createElement(\"a\")\n      a.href = url\n      a.download = `system-config-${new Date().toISOString().split(\"T\")[0]}.json`\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      URL.revokeObjectURL(url)\n    } catch (error) {\n      console.error(\"Failed to export configuration:\", error)\n    }\n  }\n\n  const toggleSecretVisibility = (envVar: string) => {\n    setShowSecrets((prev) => ({\n      ...prev,\n      [envVar]: !prev[envVar],\n    }))\n  }\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text)\n  }\n\n  const getOverallHealthScore = () => {\n    const statuses = Object.values(systemStatus)\n    const connected = statuses.filter((s) => s === \"connected\").length\n    return Math.round((connected / statuses.length) * 100)\n  }\n\n  const getCategoryIntegrations = (category: string) => {\n    return integrations.filter((integration) => integration.category === category)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">ระบบกำหนดค่าขั้นสูง</h1>\n          <p className=\"text-muted-foreground mt-1\">จัดการการเชื่อมต่อ ฟีเจอร์ และการตั้งค่าระบบแบบครบวงจร</p>\n        </div>\n        <div className=\"flex items-center gap-3 mt-4 md:mt-0\">\n          <Button variant=\"outline\" onClick={loadConfigBackup}>\n            <Upload className=\"w-4 h-4 mr-2\" />\n            นำเข้าการตั้งค่า\n          </Button>\n          <Button variant=\"outline\" onClick={exportConfiguration}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            ส่งออกการตั้งค่า\n          </Button>\n          <Button onClick={checkSystemStatus} disabled={loading}>\n            <RefreshCw className={`w-4 h-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`} />\n            {loading ? \"กำลังตรวจสอบ...\" : \"ตรวจสอบสถานะ\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* System Health Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"admin-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">สุขภาพระบบโดยรวม</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <div className=\"text-2xl font-bold text-primary\">{getOverallHealthScore()}%</div>\n                </div>\n              </div>\n              <Monitor className=\"w-8 h-8 text-primary\" />\n            </div>\n            <Progress value={getOverallHealthScore()} className=\"h-2 mt-3\" />\n          </CardContent>\n        </Card>\n\n        <Card className=\"admin-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">การเชื่อมต่อที่ใช้งานได้</p>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {Object.values(systemStatus).filter((s) => s === \"connected\").length}\n                </div>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"admin-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">โหมดทดสอบ</p>\n                <div className=\"text-2xl font-bold text-amber-600\">\n                  {Object.values(systemStatus).filter((s) => s === \"mock\").length}\n                </div>\n              </div>\n              <TestTube className=\"w-8 h-8 text-amber-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"admin-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">ฟีเจอร์ที่เปิดใช้งาน</p>\n                <div className=\"text-2xl font-bold text-primary\">\n                  {Object.values(featureFlags).filter(Boolean).length}\n                </div>\n              </div>\n              <Activity className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Configuration Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n          <TabsTrigger value=\"integrations\">การเชื่อมต่อ</TabsTrigger>\n          <TabsTrigger value=\"features\">ฟีเจอร์</TabsTrigger>\n          <TabsTrigger value=\"monitoring\">การติดตาม</TabsTrigger>\n          <TabsTrigger value=\"documentation\">คู่มือ</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <SystemOverview\n            systemStatus={systemStatus}\n            integrations={integrations}\n            healthScore={getOverallHealthScore()}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"integrations\" className=\"space-y-6\">\n          <IntegrationManagement\n            integrations={integrations}\n            onTestConnection={testConnection}\n            testResults={testResults}\n            loading={loading}\n            showSecrets={showSecrets}\n            onToggleSecret={toggleSecretVisibility}\n            onCopyToClipboard={copyToClipboard}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"features\" className=\"space-y-6\">\n          <FeatureFlagManagement featureFlags={featureFlags} onUpdateFlag={updateFeatureFlag} />\n        </TabsContent>\n\n        <TabsContent value=\"monitoring\" className=\"space-y-6\">\n          <SystemMonitoring systemStatus={systemStatus} testResults={testResults} />\n        </TabsContent>\n\n        <TabsContent value=\"documentation\" className=\"space-y-6\">\n          <SystemDocumentation integrations={integrations} />\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\n// Component implementations would continue here...\nfunction SystemOverview({ systemStatus, integrations, healthScore }: any) {\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"admin-shadow\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5\" />\n            สถานะระบบหลัก\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {integrations\n              .filter((i: any) => i.priority === \"high\")\n              .map((integration: any) => (\n                <div key={integration.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <integration.icon className=\"w-5 h-5 text-primary\" />\n                      <span className=\"font-medium\">{integration.name}</span>\n                    </div>\n                    {getStatusIcon(integration.status)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">{integration.description}</p>\n                  {getStatusBadge(integration.status)}\n                </div>\n              ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nfunction IntegrationManagement({\n  integrations,\n  onTestConnection,\n  testResults,\n  loading,\n  showSecrets,\n  onToggleSecret,\n  onCopyToClipboard,\n}: any) {\n  return (\n    <div className=\"space-y-6\">\n      {[\"core\", \"commerce\", \"communication\", \"logistics\", \"performance\"].map((category) => (\n        <Card key={category} className=\"admin-shadow\">\n          <CardHeader>\n            <CardTitle className=\"capitalize\">{category} Integrations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {integrations\n                .filter((i: any) => i.category === category)\n                .map((integration: any) => (\n                  <div key={integration.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <integration.icon className=\"w-6 h-6 text-primary\" />\n                        <div>\n                          <h4 className=\"font-semibold\">{integration.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{integration.description}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {getStatusBadge(integration.status)}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => onTestConnection(integration.testEndpoint)}\n                          disabled={loading}\n                        >\n                          <TestTube className=\"w-4 h-4 mr-2\" />\n                          ทดสอบ\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div>\n                        <Label className=\"text-sm font-medium\">Environment Variables:</Label>\n                        <div className=\"grid gap-2 mt-2\">\n                          {integration.envVars.map((envVar: string) => (\n                            <div key={envVar} className=\"flex items-center gap-2 p-2 bg-muted rounded\">\n                              <code className=\"text-sm flex-1\">{envVar}</code>\n                              <Button variant=\"ghost\" size=\"sm\" onClick={() => onToggleSecret(envVar)}>\n                                {showSecrets[envVar] ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\" onClick={() => onCopyToClipboard(envVar)}>\n                                <Copy className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {testResults[integration.testEndpoint] && (\n                        <Alert\n                          className={\n                            testResults[integration.testEndpoint].status === \"healthy\"\n                              ? \"border-green-500\"\n                              : \"border-red-500\"\n                          }\n                        >\n                          <AlertDescription>\n                            <strong>ผลการทดสอบ:</strong>{\" \"}\n                            {testResults[integration.testEndpoint].message ||\n                              testResults[integration.testEndpoint].error}\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n\nfunction FeatureFlagManagement({ featureFlags, onUpdateFlag }: any) {\n  const features = [\n    {\n      key: \"customCovers\",\n      name: \"ผ้าคลุมโซฟาแบบกำหนดเอง\",\n      description: \"อนุญาตให้ลูกค้าสั่งทำผ้าคลุมโซฟาตามขนาด\",\n      category: \"product\",\n    },\n    { key: \"bulkOrders\", name: \"การสั่งซื้อจำนวนมาก\", description: \"ระบบสำหรับการสั่งซื้อสินค้าจำนวนมาก\", category: \"commerce\" },\n    { key: \"loyaltyProgram\", name: \"โปรแกรมสะสมแต้ม\", description: \"ระบบสะสมแต้มและแลกของรางวัล\", category: \"marketing\" },\n    { key: \"reviews\", name: \"รีวิวสินค้า\", description: \"อนุญาตให้ลูกค้าเขียนรีวิวและให้คะแนน\", category: \"social\" },\n    { key: \"wishlist\", name: \"รายการสินค้าที่ชอบ\", description: \"บันทึกสินค้าที่สนใจไว้ดูภายหลัง\", category: \"social\" },\n    {\n      key: \"advancedAnalytics\",\n      name: \"การวิเคราะห์ขั้นสูง\",\n      description: \"รายงานและการวิเคราะห์ข้อมูลขาย\",\n      category: \"analytics\",\n    },\n    { key: \"bulkOperations\", name: \"การจัดการแบบกลุ่ม\", description: \"จัดการสินค้าและคำสั่งซื้อหลายรายการ\", category: \"admin\" },\n    { key: \"exportFeatures\", name: \"การส่งออกข้อมูล\", description: \"ส่งออกข้อมูลเป็นไฟล์ Excel, CSV, PDF\", category: \"admin\" },\n    { key: \"aiRecommendations\", name: \"คำแนะนำด้วย AI\", description: \"ระบบแนะนำสินค้าด้วยปัญญาประดิษฐ์\", category: \"ai\" },\n    {\n      key: \"realTimeNotifications\",\n      name: \"การแจ้งเตือนแบบเรียลไทม์\",\n      description: \"แจ้งเตือนทันทีเมื่อมีกิจกรรมสำคัญ\",\n      category: \"communication\",\n    },\n  ]\n\n  const categories = [\"product\", \"commerce\", \"marketing\", \"social\", \"analytics\", \"admin\", \"ai\", \"communication\"]\n\n  return (\n    <div className=\"space-y-6\">\n      {categories.map((category) => (\n        <Card key={category} className=\"admin-shadow\">\n          <CardHeader>\n            <CardTitle className=\"capitalize\">{category} Features</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {features\n                .filter((f) => f.category === category)\n                .map((feature) => (\n                  <div\n                    key={feature.key}\n                    className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                  >\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-sm font-medium\">{feature.name}</Label>\n                      <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                    </div>\n                    <Switch\n                      checked={featureFlags[feature.key as keyof FeatureFlags]}\n                      onCheckedChange={(checked) => onUpdateFlag(feature.key, checked)}\n                    />\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n\nfunction SystemMonitoring({ systemStatus, testResults }: any) {\n  return (\n    <Card className=\"admin-shadow\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Monitor className=\"w-5 h-5\" />\n          การติดตามระบบ\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center py-12\">\n          <Activity className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">ระบบติดตามขั้นสูง</h3>\n          <p className=\"text-muted-foreground mb-4\">ติดตามประสิทธิภาพและสุขภาพของระบบแบบเรียลไทม์</p>\n          <Button>\n            <Monitor className=\"w-4 h-4 mr-2\" />\n            เปิดใช้งานการติดตาม\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction SystemDocumentation({ integrations }: any) {\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"admin-shadow\">\n        <CardHeader>\n          <CardTitle>คู่มือการตั้งค่าระบบขั้นสูง</CardTitle>\n          <CardDescription>คำแนะนำโดยละเอียดสำหรับการตั้งค่าและจัดการระบบ</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {integrations.map((integration: any) => (\n            <div key={integration.id}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <integration.icon className=\"w-5 h-5\" />\n                  {integration.name}\n                </h3>\n                <Button variant=\"outline\" size=\"sm\" asChild>\n                  <a href={integration.documentation} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    เอกสารอย่างเป็นทางการ\n                  </a>\n                </Button>\n              </div>\n              <div className=\"space-y-2 text-sm pl-7\">\n                <p className=\"text-muted-foreground\">{integration.description}</p>\n                <div>\n                  <strong>Environment Variables ที่จำเป็น:</strong>\n                  <ul className=\"list-disc list-inside ml-4 mt-1\">\n                    {integration.envVars.map((envVar: string) => (\n                      <li key={envVar} className=\"font-mono text-xs\">\n                        {envVar}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n              <Separator className=\"mt-4\" />\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/EnhancedAIChatDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMetrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAiInsights' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setActiveConversations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":53},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":325,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12388,12389],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12388,12389],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12388,12389],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12388,12389],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":325,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12407,12408],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12407,12408],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12407,12408],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12407,12408],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Brain,\n  MessageSquare,\n  TrendingUp,\n  Users,\n  Zap,\n  Settings,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Star,\n} from \"lucide-react\"\n\ninterface ConversationMetrics {\n  totalConversations: number\n  aiAutomationRate: number\n  avgResponseTime: number\n  customerSatisfaction: number\n  resolutionRate: number\n}\n\ninterface AIInsight {\n  type: \"trend\" | \"alert\" | \"opportunity\"\n  title: string\n  description: string\n  impact: \"high\" | \"medium\" | \"low\"\n  actionRequired: boolean\n}\n\nexport default function EnhancedAIChatDashboard() {\n  const [metrics, setMetrics] = useState<ConversationMetrics>({\n    totalConversations: 1250,\n    aiAutomationRate: 65,\n    avgResponseTime: 180,\n    customerSatisfaction: 4.6,\n    resolutionRate: 89,\n  })\n\n  const [aiInsights, setAiInsights] = useState<AIInsight[]>([\n    {\n      type: \"trend\",\n      title: \"เพิ่มขึ้น 23% ในคำถามเกี่ยวกับราคา\",\n      description: \"ลูกค้าสนใจข้อมูลราคามากขึ้น แนะนำให้เพิ่ม FAQ ราคา\",\n      impact: \"high\",\n      actionRequired: true,\n    },\n    {\n      type: \"opportunity\",\n      title: \"ช่วงเวลา 14:00-16:00 มีการสนทนาสูงสุด\",\n      description: \"ควรเพิ่มเจ้าหน้าที่ในช่วงเวลานี้\",\n      impact: \"medium\",\n      actionRequired: false,\n    },\n    {\n      type: \"alert\",\n      title: \"ลูกค้า VIP มีความพึงพอใจลดลง\",\n      description: \"ต้องติดตามและปรับปรุงการบริการ\",\n      impact: \"high\",\n      actionRequired: true,\n    },\n  ])\n\n  const [activeConversations, setActiveConversations] = useState([\n    {\n      id: \"conv_001\",\n      customer: \"คุณสมชาย\",\n      channel: \"facebook\",\n      sentiment: \"positive\",\n      urgency: \"medium\",\n      aiSuggestion: \"แนะนำผ้าคอลเลกชันใหม่\",\n      lastMessage: \"สนใจผ้าลายดอกไม้ครับ\",\n    },\n    {\n      id: \"conv_002\",\n      customer: \"คุณมาลี\",\n      channel: \"live_chat\",\n      sentiment: \"neutral\",\n      urgency: \"high\",\n      aiSuggestion: \"ตรวจสอบสถานะการจัดส่ง\",\n      lastMessage: \"สินค้าส่งมาแล้วหรือยังคะ\",\n    },\n  ])\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">AI Chat System</h1>\n          <p className=\"text-gray-600\">ระบบแชทอัจฉริยะที่เหนือกว่า 365 เพจ</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Settings className=\"w-4 h-4 mr-2\" />\n            ตั้งค่า AI\n          </Button>\n          <Button size=\"sm\" className=\"bg-emerald-600 hover:bg-emerald-700\">\n            <Brain className=\"w-4 h-4 mr-2\" />\n            เทรน AI Model\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">การสนทนาทั้งหมด</p>\n                <p className=\"text-2xl font-bold text-emerald-600\">{metrics.totalConversations.toLocaleString()}</p>\n              </div>\n              <MessageSquare className=\"w-8 h-8 text-emerald-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">AI Automation</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{metrics.aiAutomationRate}%</p>\n              </div>\n              <Zap className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">เวลาตอบกลับเฉลี่ย</p>\n                <p className=\"text-2xl font-bold text-orange-600\">{metrics.avgResponseTime}s</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">ความพึงพอใจ</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{metrics.customerSatisfaction}/5</p>\n              </div>\n              <Star className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">อัตราแก้ไขปัญหา</p>\n                <p className=\"text-2xl font-bold text-green-600\">{metrics.resolutionRate}%</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"insights\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n          <TabsTrigger value=\"conversations\">การสนทนาสด</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"faq\">FAQ Management</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* AI Insights */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"w-5 h-5 text-emerald-600\" />\n                  AI Insights & Recommendations\n                </CardTitle>\n                <CardDescription>ข้อมูลเชิงลึกและคำแนะนำจาก AI</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {aiInsights.map((insight, index) => (\n                  <div key={index} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {insight.type === \"trend\" && <TrendingUp className=\"w-4 h-4 text-blue-500\" />}\n                        {insight.type === \"alert\" && <AlertTriangle className=\"w-4 h-4 text-red-500\" />}\n                        {insight.type === \"opportunity\" && <Zap className=\"w-4 h-4 text-green-500\" />}\n                        <Badge\n                          variant={\n                            insight.impact === \"high\"\n                              ? \"destructive\"\n                              : insight.impact === \"medium\"\n                                ? \"default\"\n                                : \"secondary\"\n                          }\n                        >\n                          {insight.impact}\n                        </Badge>\n                      </div>\n                      {insight.actionRequired && (\n                        <Button size=\"sm\" variant=\"outline\">\n                          ดำเนินการ\n                        </Button>\n                      )}\n                    </div>\n                    <h4 className=\"font-semibold text-gray-900 mb-1\">{insight.title}</h4>\n                    <p className=\"text-sm text-gray-600\">{insight.description}</p>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Performance Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>ประสิทธิภาพ AI</CardTitle>\n                <CardDescription>การวัดผลการทำงานของระบบ AI</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">AI Response Accuracy</span>\n                    <span className=\"text-sm text-gray-600\">92%</span>\n                  </div>\n                  <Progress value={92} className=\"h-2\" />\n                </div>\n\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Customer Satisfaction with AI</span>\n                    <span className=\"text-sm text-gray-600\">88%</span>\n                  </div>\n                  <Progress value={88} className=\"h-2\" />\n                </div>\n\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Escalation Rate</span>\n                    <span className=\"text-sm text-gray-600\">15%</span>\n                  </div>\n                  <Progress value={15} className=\"h-2\" />\n                </div>\n\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Learning Progress</span>\n                    <span className=\"text-sm text-gray-600\">76%</span>\n                  </div>\n                  <Progress value={76} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"conversations\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>การสนทนาที่กำลังดำเนินอยู่</CardTitle>\n              <CardDescription>การสนทนาสดพร้อมคำแนะนำจาก AI</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activeConversations.map((conv) => (\n                  <div key={conv.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-emerald-100 rounded-full flex items-center justify-center\">\n                          <Users className=\"w-5 h-5 text-emerald-600\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{conv.customer}</h4>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {conv.channel}\n                            </Badge>\n                            <Badge\n                              variant={\n                                conv.sentiment === \"positive\"\n                                  ? \"default\"\n                                  : conv.sentiment === \"negative\"\n                                    ? \"destructive\"\n                                    : \"secondary\"\n                              }\n                              className=\"text-xs\"\n                            >\n                              {conv.sentiment}\n                            </Badge>\n                            <Badge\n                              variant={\n                                conv.urgency === \"high\"\n                                  ? \"destructive\"\n                                  : conv.urgency === \"medium\"\n                                    ? \"default\"\n                                    : \"secondary\"\n                              }\n                              className=\"text-xs\"\n                            >\n                              {conv.urgency}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\">\n                        เข้าร่วมแชท\n                      </Button>\n                    </div>\n\n                    <div className=\"bg-gray-50 rounded-lg p-3 mb-3\">\n                      <p className=\"text-sm text-gray-700 mb-2\">ข้อความล่าสุด:</p>\n                      <p className=\"text-sm font-medium\">\"{conv.lastMessage}\"</p>\n                    </div>\n\n                    <div className=\"bg-emerald-50 rounded-lg p-3\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <Brain className=\"w-4 h-4 text-emerald-600\" />\n                        <span className=\"text-sm font-medium text-emerald-800\">AI แนะนำ:</span>\n                      </div>\n                      <p className=\"text-sm text-emerald-700\">{conv.aiSuggestion}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Channel Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { channel: \"Facebook Messenger\", messages: 450, satisfaction: 4.7, color: \"bg-blue-500\" },\n                    { channel: \"Live Chat\", messages: 380, satisfaction: 4.8, color: \"bg-green-500\" },\n                    { channel: \"Email\", messages: 420, satisfaction: 4.4, color: \"bg-purple-500\" },\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-3 h-3 rounded-full ${item.color}`} />\n                        <span className=\"font-medium\">{item.channel}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">{item.messages} ข้อความ</p>\n                        <p className=\"text-sm text-gray-600\">⭐ {item.satisfaction}/5</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Topic Analysis</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { topic: \"ราคาสินค้า\", frequency: 35, sentiment: 0.7 },\n                    { topic: \"การเลือกผ้า\", frequency: 28, sentiment: 0.8 },\n                    { topic: \"การจัดส่ง\", frequency: 22, sentiment: 0.6 },\n                    { topic: \"การติดตั้ง\", frequency: 15, sentiment: 0.9 },\n                  ].map((item, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium\">{item.topic}</span>\n                        <span className=\"text-sm text-gray-600\">{item.frequency}%</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Progress value={item.frequency} className=\"flex-1 h-2\" />\n                        <Badge\n                          variant={\n                            item.sentiment > 0.7 ? \"default\" : item.sentiment > 0.5 ? \"secondary\" : \"destructive\"\n                          }\n                        >\n                          {(item.sentiment * 100).toFixed(0)}%\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"faq\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI-Powered FAQ Management</CardTitle>\n              <CardDescription>จัดการคำถามที่พบบ่อยด้วย AI</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h4 className=\"font-semibold\">FAQ Effectiveness Score</h4>\n                    <p className=\"text-sm text-gray-600\">AI วิเคราะห์ประสิทธิภาพของ FAQ</p>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-emerald-600 hover:bg-emerald-700\">\n                    <Brain className=\"w-4 h-4 mr-2\" />\n                    อัพเดท AI\n                  </Button>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {[\n                    { question: \"ราคาผ้าคลุมโซฟาเท่าไหร่?\", effectiveness: 92, usage: 156 },\n                    { question: \"ใช้เวลาจัดส่งนานแค่ไหน?\", effectiveness: 88, usage: 134 },\n                    { question: \"มีผ้าลายไหนบ้าง?\", effectiveness: 76, usage: 98 },\n                    { question: \"วิธีการสั่งซื้อ?\", effectiveness: 94, usage: 87 },\n                  ].map((faq, index) => (\n                    <div key={index} className=\"border rounded-lg p-4\">\n                      <h5 className=\"font-medium mb-2\">{faq.question}</h5>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Effectiveness</span>\n                          <span className=\"font-medium\">{faq.effectiveness}%</span>\n                        </div>\n                        <Progress value={faq.effectiveness} className=\"h-2\" />\n                        <div className=\"flex justify-between text-sm text-gray-600\">\n                          <span>Usage: {faq.usage} times</span>\n                          <Button size=\"sm\" variant=\"ghost\">\n                            แก้ไข\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/SQLExecutionDiagnostic.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":301,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10103,10155],"text":"Error: &quot;Cannot open file: No active block available\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10103,10155],"text":"Error: &ldquo;Cannot open file: No active block available\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10103,10155],"text":"Error: &#34;Cannot open file: No active block available\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10103,10155],"text":"Error: &rdquo;Cannot open file: No active block available\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":301,"column":94,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10103,10155],"text":"Error: \"Cannot open file: No active block available&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10103,10155],"text":"Error: \"Cannot open file: No active block available&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10103,10155],"text":"Error: \"Cannot open file: No active block available&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10103,10155],"text":"Error: \"Cannot open file: No active block available&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { CheckCircle, XCircle, AlertTriangle, Database, Play, RefreshCw } from \"lucide-react\"\n\ninterface DiagnosticResult {\n  test: string\n  status: \"success\" | \"error\" | \"warning\"\n  message: string\n  details?: any\n  timestamp: string\n}\n\nexport default function SQLExecutionDiagnostic() {\n  const [results, setResults] = useState<DiagnosticResult[]>([])\n  const [isRunning, setIsRunning] = useState(false)\n  const [customSQL, setCustomSQL] = useState(\"\")\n  const [sqlResult, setSqlResult] = useState<any>(null)\n\n  const runDiagnostics = async () => {\n    setIsRunning(true)\n    setResults([])\n\n    const tests = [\n      {\n        name: \"Database Connection\",\n        test: async () => {\n          const response = await fetch(\"/api/health/database\")\n          const data = await response.json()\n          return {\n            success: response.ok,\n            message: data.status === \"ok\" ? \"Database connected successfully\" : data.error,\n            details: data,\n          }\n        },\n      },\n      {\n        name: \"Supabase Environment Variables\",\n        test: async () => {\n          const hasUrl = !!process.env.NEXT_PUBLIC_SUPABASE_URL\n          const hasKey = !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n          return {\n            success: hasUrl && hasKey,\n            message: hasUrl && hasKey ? \"Environment variables configured\" : \"Missing Supabase environment variables\",\n            details: { hasUrl, hasKey },\n          }\n        },\n      },\n      {\n        name: \"SQL Execution Permissions\",\n        test: async () => {\n          try {\n            const response = await fetch(\"/api/admin/test-sql\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ sql: \"SELECT 1 as test_value\" }),\n            })\n            const data = await response.json()\n            return {\n              success: response.ok,\n              message: response.ok ? \"SQL execution working\" : data.error || \"SQL execution failed\",\n              details: data,\n            }\n          } catch (error) {\n            return {\n              success: false,\n              message: \"SQL execution endpoint not available\",\n              details: error instanceof Error ? error.message : \"Unknown error\",\n            }\n          }\n        },\n      },\n      {\n        name: \"File System Access\",\n        test: async () => {\n          try {\n            const response = await fetch(\"/api/admin/file-access-test\")\n            const data = await response.json()\n            return {\n              success: response.ok,\n              message: response.ok ? \"File system accessible\" : \"File access issues detected\",\n              details: data,\n            }\n          } catch (error) {\n            return {\n              success: false,\n              message: \"File access test failed\",\n              details: error instanceof Error ? error.message : \"Unknown error\",\n            }\n          }\n        },\n      },\n      {\n        name: \"Script Execution Environment\",\n        test: async () => {\n          try {\n            const response = await fetch(\"/api/admin/script-test\")\n            const data = await response.json()\n            return {\n              success: response.ok,\n              message: response.ok ? \"Script execution environment ready\" : \"Script execution issues\",\n              details: data,\n            }\n          } catch (error) {\n            return {\n              success: false,\n              message: \"Script execution test failed\",\n              details: error instanceof Error ? error.message : \"Unknown error\",\n            }\n          }\n        },\n      },\n    ]\n\n    for (const { name, test } of tests) {\n      try {\n        const result = await test()\n        setResults((prev) => [\n          ...prev,\n          {\n            test: name,\n            status: result.success ? \"success\" : \"error\",\n            message: result.message,\n            details: result.details,\n            timestamp: new Date().toISOString(),\n          },\n        ])\n      } catch (error) {\n        setResults((prev) => [\n          ...prev,\n          {\n            test: name,\n            status: \"error\",\n            message: \"Test execution failed\",\n            details: error instanceof Error ? error.message : \"Unknown error\",\n            timestamp: new Date().toISOString(),\n          },\n        ])\n      }\n    }\n\n    setIsRunning(false)\n  }\n\n  const executeCustomSQL = async () => {\n    if (!customSQL.trim()) return\n\n    try {\n      const response = await fetch(\"/api/admin/execute-sql\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ sql: customSQL }),\n      })\n\n      const data = await response.json()\n      setSqlResult({\n        success: response.ok,\n        data: data,\n        timestamp: new Date().toISOString(),\n      })\n    } catch (error) {\n      setSqlResult({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      })\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n      case \"error\":\n        return <XCircle className=\"h-4 w-4 text-red-500\" />\n      case \"warning\":\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n      default:\n        return null\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      success: \"default\",\n      error: \"destructive\",\n      warning: \"secondary\",\n    } as const\n\n    return <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>{status.toUpperCase()}</Badge>\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Database className=\"h-5 w-5\" />\n            SQL Execution Diagnostic Tool\n          </CardTitle>\n          <CardDescription>Diagnose issues preventing SQL command execution</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button onClick={runDiagnostics} disabled={isRunning} className=\"w-full\">\n            {isRunning ? (\n              <>\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                Running Diagnostics...\n              </>\n            ) : (\n              <>\n                <Play className=\"h-4 w-4 mr-2\" />\n                Run Diagnostics\n              </>\n            )}\n          </Button>\n\n          {results.length > 0 && (\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold\">Diagnostic Results</h3>\n              {results.map((result, index) => (\n                <div key={index} className=\"flex items-start justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-start gap-3 flex-1\">\n                    {getStatusIcon(result.status)}\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">{result.test}</h4>\n                        {getStatusBadge(result.status)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{result.message}</p>\n                      {result.details && (\n                        <details className=\"mt-2\">\n                          <summary className=\"text-xs text-muted-foreground cursor-pointer\">View Details</summary>\n                          <pre className=\"text-xs bg-muted p-2 rounded mt-1 overflow-auto\">\n                            {JSON.stringify(result.details, null, 2)}\n                          </pre>\n                        </details>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Custom SQL Test</CardTitle>\n          <CardDescription>Test SQL execution directly</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Textarea\n            placeholder=\"Enter SQL command to test...\"\n            value={customSQL}\n            onChange={(e) => setCustomSQL(e.target.value)}\n            rows={4}\n          />\n          <Button onClick={executeCustomSQL} disabled={!customSQL.trim()}>\n            <Play className=\"h-4 w-4 mr-2\" />\n            Execute SQL\n          </Button>\n\n          {sqlResult && (\n            <Alert>\n              <AlertDescription>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    {sqlResult.success ? (\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    ) : (\n                      <XCircle className=\"h-4 w-4 text-red-500\" />\n                    )}\n                    <span className=\"font-medium\">\n                      {sqlResult.success ? \"SQL executed successfully\" : \"SQL execution failed\"}\n                    </span>\n                  </div>\n                  <pre className=\"text-xs bg-muted p-2 rounded overflow-auto\">\n                    {JSON.stringify(sqlResult.success ? sqlResult.data : sqlResult.error, null, 2)}\n                  </pre>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Common Solutions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 text-sm\">\n            <div>\n              <h4 className=\"font-medium\">Error: \"Cannot open file: No active block available\"</h4>\n              <ul className=\"list-disc list-inside text-muted-foreground mt-1 space-y-1\">\n                <li>Check if Supabase integration is properly configured</li>\n                <li>Verify environment variables are set correctly</li>\n                <li>Ensure database connection is active</li>\n                <li>Try refreshing the page and running the script again</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium\">Database Connection Issues</h4>\n              <ul className=\"list-disc list-inside text-muted-foreground mt-1 space-y-1\">\n                <li>Check Supabase project status</li>\n                <li>Verify API keys and URLs</li>\n                <li>Check network connectivity</li>\n                <li>Review database permissions</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium\">File Access Problems</h4>\n              <ul className=\"list-disc list-inside text-muted-foreground mt-1 space-y-1\">\n                <li>Check file permissions</li>\n                <li>Verify script file exists</li>\n                <li>Ensure proper file paths</li>\n                <li>Check for file system locks</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/SuperiorAIChatDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMetrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSentimentData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCustomerInsights' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  MessageSquare,\n  Brain,\n  TrendingUp,\n  Users,\n  Clock,\n  Star,\n  BarChart3,\n  Zap,\n  Target,\n  Heart,\n  MessageCircle,\n  Bot,\n  UserCheck,\n  Activity,\n} from \"lucide-react\"\n\ninterface ConversationMetrics {\n  totalConversations: number\n  activeConversations: number\n  avgResponseTime: number\n  customerSatisfaction: number\n  resolutionRate: number\n  aiAccuracy: number\n}\n\ninterface SentimentData {\n  positive: number\n  negative: number\n  neutral: number\n}\n\ninterface CustomerInsight {\n  id: string\n  name: string\n  lastMessage: string\n  sentiment: \"positive\" | \"negative\" | \"neutral\"\n  purchaseIntent: number\n  engagementLevel: \"high\" | \"medium\" | \"low\"\n  responseTime: number\n}\n\nexport default function SuperiorAIChatDashboard() {\n  const [metrics, setMetrics] = useState<ConversationMetrics>({\n    totalConversations: 1247,\n    activeConversations: 23,\n    avgResponseTime: 12,\n    customerSatisfaction: 4.8,\n    resolutionRate: 94,\n    aiAccuracy: 89,\n  })\n\n  const [sentimentData, setSentimentData] = useState<SentimentData>({\n    positive: 68,\n    negative: 12,\n    neutral: 20,\n  })\n\n  const [customerInsights, setCustomerInsights] = useState<CustomerInsight[]>([\n    {\n      id: \"1\",\n      name: \"สมชาย ใจดี\",\n      lastMessage: \"ต้องการผ้าคลุมโซฟาสีน้ำเงิน\",\n      sentiment: \"positive\",\n      purchaseIntent: 85,\n      engagementLevel: \"high\",\n      responseTime: 8,\n    },\n    {\n      id: \"2\",\n      name: \"วิภา สวยงาม\",\n      lastMessage: \"สินค้าที่สั่งมาไม่ตรงตามที่ต้องการ\",\n      sentiment: \"negative\",\n      purchaseIntent: 25,\n      engagementLevel: \"medium\",\n      responseTime: 15,\n    },\n  ])\n\n  const [activeTab, setActiveTab] = useState(\"overview\")\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary\">AI Chat System</h1>\n          <p className=\"text-muted-foreground\">ระบบแชท AI ขั้นสูงที่เหนือกว่า 365 เพจ</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Activity className=\"w-4 h-4 mr-2\" />\n            Real-time Monitor\n          </Button>\n          <Button className=\"ai-chat-gradient\">\n            <Brain className=\"w-4 h-4 mr-2\" />\n            AI Settings\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"ai-analytics-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">การสนทนาทั้งหมด</CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{metrics.totalConversations.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600\">+12%</span> จากเดือนที่แล้ว\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"ai-analytics-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">เวลาตอบสนองเฉลี่ย</CardTitle>\n            <Clock className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{metrics.avgResponseTime}s</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600\">-23%</span> เร็วขึ้นจากเดิม\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"ai-analytics-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">ความพึงพอใจลูกค้า</CardTitle>\n            <Star className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{metrics.customerSatisfaction}/5</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600\">+0.3</span> คะแนนจากเดิม\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"ai-analytics-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">ความแม่นยำ AI</CardTitle>\n            <Brain className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{metrics.aiAccuracy}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600\">+5%</span> ปรับปรุงจากเดิม\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Dashboard Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n          <TabsTrigger value=\"conversations\">การสนทนา</TabsTrigger>\n          <TabsTrigger value=\"analytics\">การวิเคราะห์</TabsTrigger>\n          <TabsTrigger value=\"customers\">ลูกค้า</TabsTrigger>\n          <TabsTrigger value=\"settings\">ตั้งค่า</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Sentiment Analysis */}\n            <Card className=\"ai-feature-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"w-5 h-5 text-primary\" />\n                  การวิเคราะห์อารมณ์ลูกค้า\n                </CardTitle>\n                <CardDescription>การวิเคราะห์ความรู้สึกจากการสนทนาแบบ Real-time</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">ความรู้สึกดี</span>\n                    <span className=\"text-sm font-medium\">{sentimentData.positive}%</span>\n                  </div>\n                  <Progress value={sentimentData.positive} className=\"ai-sentiment-positive\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">เป็นกลาง</span>\n                    <span className=\"text-sm font-medium\">{sentimentData.neutral}%</span>\n                  </div>\n                  <Progress value={sentimentData.neutral} className=\"ai-sentiment-neutral\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">ความรู้สึกไม่ดี</span>\n                    <span className=\"text-sm font-medium\">{sentimentData.negative}%</span>\n                  </div>\n                  <Progress value={sentimentData.negative} className=\"ai-sentiment-negative\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Performance */}\n            <Card className=\"ai-feature-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5 text-primary\" />\n                  ประสิทธิภาพ AI\n                </CardTitle>\n                <CardDescription>การติดตามประสิทธิภาพของระบบ AI</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">{metrics.resolutionRate}%</div>\n                    <div className=\"text-sm text-green-700\">อัตราการแก้ไขปัญหา</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{metrics.activeConversations}</div>\n                    <div className=\"text-sm text-blue-700\">การสนทนาที่ใช้งานอยู่</div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">ความแม่นยำในการตอบ</span>\n                    <span className=\"text-sm font-medium\">{metrics.aiAccuracy}%</span>\n                  </div>\n                  <Progress value={metrics.aiAccuracy} />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Customer Insights */}\n          <Card className=\"ai-feature-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5 text-primary\" />\n                ข้อมูลเชิงลึกลูกค้า\n              </CardTitle>\n              <CardDescription>การวิเคราะห์พฤติกรรมและความต้องการของลูกค้า</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {customerInsights.map((customer) => (\n                  <div\n                    key={customer.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <UserCheck className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{customer.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{customer.lastMessage}</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge\n                        variant={\n                          customer.sentiment === \"positive\"\n                            ? \"default\"\n                            : customer.sentiment === \"negative\"\n                              ? \"destructive\"\n                              : \"secondary\"\n                        }\n                        className=\"text-xs\"\n                      >\n                        {customer.sentiment === \"positive\"\n                          ? \"ดี\"\n                          : customer.sentiment === \"negative\"\n                            ? \"ไม่ดี\"\n                            : \"เป็นกลาง\"}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        ความต้องการซื้อ: {customer.purchaseIntent}%\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground\">{customer.responseTime}s</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"conversations\" className=\"space-y-4\">\n          <Card className=\"ai-feature-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageCircle className=\"w-5 h-5 text-primary\" />\n                การจัดการการสนทนา\n              </CardTitle>\n              <CardDescription>ระบบจัดการการสนทนาแบบ Real-time พร้อม AI Assistant</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Bot className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n                <p>ระบบการสนทนาขั้นสูงกำลังพัฒนา...</p>\n                <p className=\"text-sm\">จะรองรับการสนทนาแบบ Multi-channel และ AI Automation</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card className=\"ai-feature-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-primary\" />\n                การวิเคราะห์ขั้นสูง\n              </CardTitle>\n              <CardDescription>รายงานและการวิเคราะห์เชิงลึกสำหรับการตัดสินใจทางธุรกิจ</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <TrendingUp className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n                <p>ระบบการวิเคราะห์ขั้นสูงกำลังพัฒนา...</p>\n                <p className=\"text-sm\">จะรองรับ Predictive Analytics และ Business Intelligence</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"customers\" className=\"space-y-4\">\n          <Card className=\"ai-feature-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5 text-primary\" />\n                การจัดการลูกค้า\n              </CardTitle>\n              <CardDescription>ระบบจัดการข้อมูลลูกค้าและการปรับแต่งประสบการณ์</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <UserCheck className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n                <p>ระบบจัดการลูกค้าขั้นสูงกำลังพัฒนา...</p>\n                <p className=\"text-sm\">จะรองรับ Customer Segmentation และ Personalization</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card className=\"ai-feature-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"w-5 h-5 text-primary\" />\n                การตั้งค่า AI\n              </CardTitle>\n              <CardDescription>การปรับแต่งพารามิเตอร์และการเรียนรู้ของระบบ AI</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Brain className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n                <p>ระบบการตั้งค่า AI ขั้นสูงกำลังพัฒนา...</p>\n                <p className=\"text-sm\">จะรองรับ Model Training และ Fine-tuning</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/SystemConfigurationDashboard.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":258,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ &quot;โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ &ldquo;โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ &#34;โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ &rdquo;โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":258,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ&quot; จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ&ldquo; จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ&#34; จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ&rdquo; จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":258,"column":111,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ &quot;การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ &ldquo;การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ &#34;การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ &rdquo;การเชื่อมต่อ\" เพื่อใช้งานจริง\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":258,"column":124,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ&quot; เพื่อใช้งานจริง\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ&ldquo; เพื่อใช้งานจริง\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ&#34; เพื่อใช้งานจริง\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9458,9612],"text":"\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ&rdquo; เพื่อใช้งานจริง\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":596,"column":11,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          &quot;การเชื่อมต่อ\"\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          &ldquo;การเชื่อมต่อ\"\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          &#34;การเชื่อมต่อ\"\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          &rdquo;การเชื่อมต่อ\"\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":596,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          \"การเชื่อมต่อ&quot;\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          \"การเชื่อมต่อ&ldquo;\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          \"การเชื่อมต่อ&#34;\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[20969,21097],"text":" หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          \"การเชื่อมต่อ&rdquo;\n        "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { CheckCircle, XCircle, AlertTriangle, Settings, Database, Mail, CreditCard, Truck, Bell } from \"lucide-react\"\n\ninterface SystemStatus {\n  database: \"connected\" | \"disconnected\" | \"error\"\n  email: \"connected\" | \"mock\" | \"error\"\n  payment: \"connected\" | \"mock\" | \"error\"\n  shipping: \"connected\" | \"mock\" | \"error\"\n  storage: \"connected\" | \"disconnected\" | \"error\"\n}\n\ninterface FeatureFlags {\n  customCovers: boolean\n  bulkOrders: boolean\n  loyaltyProgram: boolean\n  reviews: boolean\n  wishlist: boolean\n  advancedAnalytics: boolean\n  bulkOperations: boolean\n  exportFeatures: boolean\n}\n\nfunction getStatusIcon(status: string) {\n  switch (status) {\n    case \"connected\":\n      return <CheckCircle className=\"h-5 w-5 text-green-500\" />\n    case \"mock\":\n      return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n    case \"error\":\n    case \"disconnected\":\n      return <XCircle className=\"h-5 w-5 text-red-500\" />\n    default:\n      return <AlertTriangle className=\"h-5 w-5 text-gray-500\" />\n  }\n}\n\nfunction getStatusBadge(status: string) {\n  switch (status) {\n    case \"connected\":\n      return (\n        <Badge variant=\"default\" className=\"bg-green-500\">\n          เชื่อมต่อแล้ว\n        </Badge>\n      )\n    case \"mock\":\n      return <Badge variant=\"secondary\">โหมดทดสอบ</Badge>\n    case \"error\":\n      return <Badge variant=\"destructive\">ข้อผิดพลาด</Badge>\n    case \"disconnected\":\n      return <Badge variant=\"outline\">ไม่ได้เชื่อมต่อ</Badge>\n    default:\n      return <Badge variant=\"outline\">ไม่ทราบสถานะ</Badge>\n  }\n}\n\nexport default function SystemConfigurationDashboard() {\n  const [systemStatus, setSystemStatus] = useState<SystemStatus>({\n    database: \"disconnected\",\n    email: \"mock\",\n    payment: \"mock\",\n    shipping: \"mock\",\n    storage: \"disconnected\",\n  })\n\n  const [featureFlags, setFeatureFlags] = useState<FeatureFlags>({\n    customCovers: true,\n    bulkOrders: true,\n    loyaltyProgram: false,\n    reviews: true,\n    wishlist: true,\n    advancedAnalytics: true,\n    bulkOperations: true,\n    exportFeatures: true,\n  })\n\n  const [loading, setLoading] = useState(false)\n  const [testResults, setTestResults] = useState<Record<string, any>>({})\n\n  useEffect(() => {\n    checkSystemStatus()\n    loadFeatureFlags()\n  }, [])\n\n  const checkSystemStatus = async () => {\n    try {\n      const response = await fetch(\"/api/admin/system-status\")\n      const status = await response.json()\n      setSystemStatus(status)\n    } catch (error) {\n      console.error(\"Failed to check system status:\", error)\n    }\n  }\n\n  const loadFeatureFlags = async () => {\n    try {\n      const response = await fetch(\"/api/admin/feature-flags\")\n      const flags = await response.json()\n      setFeatureFlags(flags)\n    } catch (error) {\n      console.error(\"Failed to load feature flags:\", error)\n    }\n  }\n\n  const testConnection = async (service: string) => {\n    setLoading(true)\n    try {\n      const response = await fetch(`/api/health/${service}`)\n      const result = await response.json()\n      setTestResults((prev) => ({ ...prev, [service]: result }))\n\n      // Update system status based on test result\n      setSystemStatus((prev) => ({\n        ...prev,\n        [service]: result.status === \"healthy\" ? \"connected\" : \"error\",\n      }))\n    } catch (error) {\n      setTestResults((prev) => ({ ...prev, [service]: { status: \"error\", error: error.message } }))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateFeatureFlag = async (flag: keyof FeatureFlags, value: boolean) => {\n    try {\n      await fetch(\"/api/admin/feature-flags\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ [flag]: value }),\n      })\n\n      setFeatureFlags((prev) => ({ ...prev, [flag]: value }))\n    } catch (error) {\n      console.error(\"Failed to update feature flag:\", error)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">การกำหนดค่าระบบ</h1>\n          <p className=\"text-muted-foreground\">จัดการการเชื่อมต่อและฟีเจอร์ต่าง ๆ ของระบบ</p>\n        </div>\n        <Button onClick={checkSystemStatus} disabled={loading}>\n          {loading ? \"กำลังตรวจสอบ...\" : \"ตรวจสอบสถานะ\"}\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n          <TabsTrigger value=\"integrations\">การเชื่อมต่อ</TabsTrigger>\n          <TabsTrigger value=\"features\">ฟีเจอร์</TabsTrigger>\n          <TabsTrigger value=\"documentation\">คู่มือ</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">ฐานข้อมูล</CardTitle>\n                <Database className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(systemStatus.database)}\n                  {getStatusBadge(systemStatus.database)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">Supabase & Neon</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">อีเมล</CardTitle>\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(systemStatus.email)}\n                  {getStatusBadge(systemStatus.email)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">SMTP / SendGrid</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">การชำระเงิน</CardTitle>\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(systemStatus.payment)}\n                  {getStatusBadge(systemStatus.payment)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">Stripe / PromptPay</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">การจัดส่ง</CardTitle>\n                <Truck className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(systemStatus.shipping)}\n                  {getStatusBadge(systemStatus.shipping)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">Thailand Post / Kerry / Flash</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">การจัดเก็บไฟล์</CardTitle>\n                <Settings className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(systemStatus.storage)}\n                  {getStatusBadge(systemStatus.storage)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">Vercel Blob</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">การแจ้งเตือน</CardTitle>\n                <Bell className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  <Badge variant=\"default\" className=\"bg-green-500\">\n                    พร้อมใช้งาน\n                  </Badge>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">LINE Notify / Firebase</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              ระบบที่แสดงสถานะ \"โหมดทดสอบ\" จะใช้ข้อมูลจำลองแทนการเชื่อมต่อจริง กรุณาตั้งค่าการเชื่อมต่อในแท็บ \"การเชื่อมต่อ\" เพื่อใช้งานจริง\n            </AlertDescription>\n          </Alert>\n        </TabsContent>\n\n        <TabsContent value=\"integrations\" className=\"space-y-4\">\n          <IntegrationManagement\n            systemStatus={systemStatus}\n            onTestConnection={testConnection}\n            testResults={testResults}\n            loading={loading}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"features\" className=\"space-y-4\">\n          <FeatureFlagManagement featureFlags={featureFlags} onUpdateFlag={updateFeatureFlag} />\n        </TabsContent>\n\n        <TabsContent value=\"documentation\" className=\"space-y-4\">\n          <SystemDocumentation />\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\nfunction IntegrationManagement({\n  systemStatus,\n  onTestConnection,\n  testResults,\n  loading,\n}: {\n  systemStatus: SystemStatus\n  onTestConnection: (service: string) => void\n  testResults: Record<string, any>\n  loading: boolean\n}) {\n  const integrations = [\n    {\n      id: \"database\",\n      name: \"ฐานข้อมูล\",\n      description: \"Supabase และ Neon Database\",\n      status: systemStatus.database,\n      envVars: [\"SUPABASE_URL\", \"SUPABASE_ANON_KEY\", \"DATABASE_URL\"],\n      testEndpoint: \"database\",\n    },\n    {\n      id: \"email\",\n      name: \"ระบบอีเมล\",\n      description: \"SMTP หรือ SendGrid สำหรับส่งอีเมล\",\n      status: systemStatus.email,\n      envVars: [\"SMTP_HOST\", \"SMTP_USER\", \"SMTP_PASS\", \"SENDGRID_API_KEY\"],\n      testEndpoint: \"email\",\n    },\n    {\n      id: \"payment\",\n      name: \"การชำระเงิน\",\n      description: \"Stripe และ PromptPay\",\n      status: systemStatus.payment,\n      envVars: [\"STRIPE_SECRET_KEY\", \"PROMPTPAY_ID\"],\n      testEndpoint: \"payment\",\n    },\n    {\n      id: \"shipping\",\n      name: \"การจัดส่ง\",\n      description: \"Thailand Post, Kerry, Flash Express\",\n      status: systemStatus.shipping,\n      envVars: [\"THAILAND_POST_API_KEY\", \"KERRY_API_KEY\", \"FLASH_API_KEY\"],\n      testEndpoint: \"shipping\",\n    },\n    {\n      id: \"storage\",\n      name: \"การจัดเก็บไฟล์\",\n      description: \"Vercel Blob Storage\",\n      status: systemStatus.storage,\n      envVars: [\"BLOB_READ_WRITE_TOKEN\"],\n      testEndpoint: \"storage\",\n    },\n  ]\n\n  return (\n    <div className=\"space-y-4\">\n      {integrations.map((integration) => (\n        <Card key={integration.id}>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <span>{integration.name}</span>\n                  {getStatusIcon(integration.status)}\n                </CardTitle>\n                <CardDescription>{integration.description}</CardDescription>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {getStatusBadge(integration.status)}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onTestConnection(integration.testEndpoint)}\n                  disabled={loading}\n                >\n                  ทดสอบการเชื่อมต่อ\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Environment Variables ที่จำเป็น:</Label>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {integration.envVars.map((envVar) => (\n                    <Badge key={envVar} variant=\"outline\" className=\"text-xs\">\n                      {envVar}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {testResults[integration.testEndpoint] && (\n                <Alert\n                  className={\n                    testResults[integration.testEndpoint].status === \"healthy\" ? \"border-green-500\" : \"border-red-500\"\n                  }\n                >\n                  <AlertDescription>\n                    <strong>ผลการทดสอบ:</strong>{\" \"}\n                    {testResults[integration.testEndpoint].message || testResults[integration.testEndpoint].error}\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n\nfunction FeatureFlagManagement({\n  featureFlags,\n  onUpdateFlag,\n}: {\n  featureFlags: FeatureFlags\n  onUpdateFlag: (flag: keyof FeatureFlags, value: boolean) => void\n}) {\n  const features = [\n    {\n      key: \"customCovers\" as keyof FeatureFlags,\n      name: \"ผ้าคลุมโซฟาแบบกำหนดเอง\",\n      description: \"อนุญาตให้ลูกค้าสั่งทำผ้าคลุมโซฟาตามขนาดที่ต้องการ\",\n    },\n    {\n      key: \"bulkOrders\" as keyof FeatureFlags,\n      name: \"การสั่งซื้อจำนวนมาก\",\n      description: \"ระบบสำหรับการสั่งซื้อสินค้าจำนวนมากพร้อมส่วนลด\",\n    },\n    {\n      key: \"loyaltyProgram\" as keyof FeatureFlags,\n      name: \"โปรแกรมสะสมแต้ม\",\n      description: \"ระบบสะสมแต้มและแลกของรางวัลสำหรับลูกค้า\",\n    },\n    {\n      key: \"reviews\" as keyof FeatureFlags,\n      name: \"รีวิวสินค้า\",\n      description: \"อนุญาตให้ลูกค้าเขียนรีวิวและให้คะแนนสินค้า\",\n    },\n    {\n      key: \"wishlist\" as keyof FeatureFlags,\n      name: \"รายการสินค้าที่ชอบ\",\n      description: \"ลูกค้าสามารถบันทึกสินค้าที่สนใจไว้ดูภายหลัง\",\n    },\n    {\n      key: \"advancedAnalytics\" as keyof FeatureFlags,\n      name: \"การวิเคราะห์ขั้นสูง\",\n      description: \"รายงานและการวิเคราะห์ข้อมูลขายขั้นสูง\",\n    },\n    {\n      key: \"bulkOperations\" as keyof FeatureFlags,\n      name: \"การจัดการแบบกลุ่ม\",\n      description: \"จัดการสินค้าและคำสั่งซื้อหลายรายการพร้อมกัน\",\n    },\n    {\n      key: \"exportFeatures\" as keyof FeatureFlags,\n      name: \"การส่งออกข้อมูล\",\n      description: \"ส่งออกข้อมูลเป็นไฟล์ Excel, CSV, PDF\",\n    },\n  ]\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle>การจัดการฟีเจอร์</CardTitle>\n          <CardDescription>เปิด/ปิดฟีเจอร์ต่าง ๆ ของระบบตามความต้องการ</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {features.map((feature) => (\n              <div key={feature.key} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"space-y-1\">\n                  <Label className=\"text-sm font-medium\">{feature.name}</Label>\n                  <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                </div>\n                <Switch\n                  checked={featureFlags[feature.key]}\n                  onCheckedChange={(checked) => onUpdateFlag(feature.key, checked)}\n                />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nfunction SystemDocumentation() {\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>คู่มือการตั้งค่าระบบ</CardTitle>\n          <CardDescription>คำแนะนำในการตั้งค่าการเชื่อมต่อต่าง ๆ</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">1. การตั้งค่าฐานข้อมูล</h3>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <strong>Supabase:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>\n                  สร้างโปรเจกต์ใหม่ที่{\" \"}\n                  <a href=\"https://supabase.com\" className=\"text-blue-500 hover:underline\">\n                    supabase.com\n                  </a>\n                </li>\n                <li>คัดลอก URL และ anon key จาก Settings → API</li>\n                <li>ตั้งค่า Environment Variables: SUPABASE_URL, SUPABASE_ANON_KEY</li>\n              </ul>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">2. การตั้งค่าระบบอีเมล</h3>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <strong>SMTP:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>ใช้ Gmail SMTP: smtp.gmail.com, port 587</li>\n                <li>สร้าง App Password สำหรับ Gmail</li>\n                <li>ตั้งค่า: SMTP_HOST, SMTP_USER, SMTP_PASS</li>\n              </ul>\n              <p>\n                <strong>SendGrid:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>\n                  สมัครสมาชิกที่{\" \"}\n                  <a href=\"https://sendgrid.com\" className=\"text-blue-500 hover:underline\">\n                    sendgrid.com\n                  </a>\n                </li>\n                <li>สร้าง API Key จาก Settings → API Keys</li>\n                <li>ตั้งค่า: SENDGRID_API_KEY</li>\n              </ul>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">3. การตั้งค่าการชำระเงิน</h3>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <strong>Stripe:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>\n                  สร้างบัญชีที่{\" \"}\n                  <a href=\"https://stripe.com\" className=\"text-blue-500 hover:underline\">\n                    stripe.com\n                  </a>\n                </li>\n                <li>รับ Secret Key จาก Dashboard → Developers → API keys</li>\n                <li>ตั้งค่า: STRIPE_SECRET_KEY</li>\n              </ul>\n              <p>\n                <strong>PromptPay:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>ใช้เบอร์โทรศัพท์หรือเลขประจำตัวประชาชน</li>\n                <li>ตั้งค่า: PROMPTPAY_ID, PROMPTPAY_MERCHANT_NAME</li>\n              </ul>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">4. การตั้งค่าการจัดส่ง</h3>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <strong>Thailand Post:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>สมัครใช้บริการ API ที่ไปรษณีย์ไทย</li>\n                <li>ตั้งค่า: THAILAND_POST_API_KEY, THAILAND_POST_CUSTOMER_CODE</li>\n              </ul>\n              <p>\n                <strong>Kerry Express:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>ติดต่อ Kerry Express เพื่อขอ API access</li>\n                <li>ตั้งค่า: KERRY_API_KEY, KERRY_API_SECRET</li>\n              </ul>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">5. การตั้งค่าการจัดเก็บไฟล์</h3>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <strong>Vercel Blob:</strong>\n              </p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>เปิดใช้งาน Blob Storage ใน Vercel Dashboard</li>\n                <li>คัดลอก Token จาก Storage → Blob</li>\n                <li>ตั้งค่า: BLOB_READ_WRITE_TOKEN</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Alert>\n        <AlertTriangle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>หมายเหตุ:</strong> หลังจากตั้งค่า Environment Variables แล้ว กรุณา restart แอปพลิเคชันและทดสอบการเชื่อมต่อในแท็บ\n          \"การเชื่อมต่อ\"\n        </AlertDescription>\n      </Alert>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/admin/UnifiedFacebookChatDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setPages' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":34,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mockMessages'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mockMessages]","fix":{"range":[2196,2198],"text":"[mockMessages]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { MessageSquare, Users, Clock, Send, Search, Facebook } from \"lucide-react\"\n\ninterface ChatMessage {\n  id: string\n  pageId: string\n  pageName: string\n  senderId: string\n  senderName: string\n  message: string\n  timestamp: Date\n  isRead: boolean\n  type: \"incoming\" | \"outgoing\"\n}\n\ninterface FacebookPage {\n  id: string\n  name: string\n  unreadCount: number\n  lastMessage?: string\n  lastMessageTime?: Date\n}\n\nexport default function UnifiedFacebookChatDashboard() {\n  const [selectedPage, setSelectedPage] = useState<string | null>(null)\n  const [messages, setMessages] = useState<ChatMessage[]>([])\n  const [pages, setPages] = useState<FacebookPage[]>([\n    {\n      id: \"page1\",\n      name: \"ELF SofaCover Pro\",\n      unreadCount: 3,\n      lastMessage: \"สอบถามราคาผ้าคลุมโซฟาครับ\",\n      lastMessageTime: new Date(Date.now() - 5 * 60 * 1000),\n    },\n    {\n      id: \"page2\",\n      name: \"ELF Home Decor\",\n      unreadCount: 1,\n      lastMessage: \"ขอดูสีอื่นได้ไหมคะ\",\n      lastMessageTime: new Date(Date.now() - 15 * 60 * 1000),\n    },\n  ])\n  const [newMessage, setNewMessage] = useState(\"\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  const mockMessages: ChatMessage[] = [\n    {\n      id: \"1\",\n      pageId: \"page1\",\n      pageName: \"ELF SofaCover Pro\",\n      senderId: \"user1\",\n      senderName: \"คุณสมชาย\",\n      message: \"สวัสดีครับ สอบถามราคาผ้าคลุมโซฟา 3 ที่นั่งครับ\",\n      timestamp: new Date(Date.now() - 30 * 60 * 1000),\n      isRead: true,\n      type: \"incoming\",\n    },\n    {\n      id: \"2\",\n      pageId: \"page1\",\n      pageName: \"ELF SofaCover Pro\",\n      senderId: \"admin\",\n      senderName: \"Admin\",\n      message: \"สวัสดีครับ ผ้าคลุมโซฟา 3 ที่นั่งราคา 2,890 บาทครับ\",\n      timestamp: new Date(Date.now() - 25 * 60 * 1000),\n      isRead: true,\n      type: \"outgoing\",\n    },\n  ]\n\n  useEffect(() => {\n    setMessages(mockMessages)\n  }, [])\n\n  const filteredMessages = messages.filter((msg) => (selectedPage ? msg.pageId === selectedPage : true))\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || !selectedPage) return\n\n    const message: ChatMessage = {\n      id: Date.now().toString(),\n      pageId: selectedPage,\n      pageName: pages.find((p) => p.id === selectedPage)?.name || \"\",\n      senderId: \"admin\",\n      senderName: \"Admin\",\n      message: newMessage,\n      timestamp: new Date(),\n      isRead: true,\n      type: \"outgoing\",\n    }\n\n    setMessages((prev) => [...prev, message])\n    setNewMessage(\"\")\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Unified Facebook Chat</h1>\n          <p className=\"text-gray-600 mt-1\">ระบบแชท Facebook แบบรวมศูนย์</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Facebook className=\"w-6 h-6 text-blue-600\" />\n          <Badge variant=\"secondary\">{pages.length} เพจ</Badge>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-4 gap-6 h-[600px]\">\n        {/* Pages List */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Facebook Pages</span>\n              <Badge variant=\"outline\">{pages.reduce((sum, p) => sum + p.unreadCount, 0)}</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"space-y-1\">\n              {pages.map((page) => (\n                <button\n                  key={page.id}\n                  onClick={() => setSelectedPage(page.id)}\n                  className={`w-full p-3 text-left hover:bg-gray-50 border-b transition-colors ${\n                    selectedPage === page.id ? \"bg-blue-50 border-l-4 border-l-blue-500\" : \"\"\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"font-medium text-sm\">{page.name}</span>\n                    {page.unreadCount > 0 && (\n                      <Badge variant=\"destructive\" className=\"text-xs\">\n                        {page.unreadCount}\n                      </Badge>\n                    )}\n                  </div>\n                  {page.lastMessage && <p className=\"text-xs text-gray-500 truncate\">{page.lastMessage}</p>}\n                  {page.lastMessageTime && (\n                    <p className=\"text-xs text-gray-400 mt-1\">\n                      {page.lastMessageTime.toLocaleTimeString(\"th-TH\", {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                      })}\n                    </p>\n                  )}\n                </button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Chat Area */}\n        <Card className=\"lg:col-span-3\">\n          <CardHeader className=\"border-b\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  <span>{selectedPage ? pages.find((p) => p.id === selectedPage)?.name : \"เลือกเพจเพื่อเริ่มแชท\"}</span>\n                </CardTitle>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  placeholder=\"ค้นหาข้อความ...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-48\"\n                />\n                <Button variant=\"outline\" size=\"sm\">\n                  <Search className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-0 flex flex-col h-[400px]\">\n            {/* Messages */}\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n              {selectedPage ? (\n                filteredMessages.length > 0 ? (\n                  filteredMessages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${message.type === \"outgoing\" ? \"justify-end\" : \"justify-start\"}`}\n                    >\n                      <div\n                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                          message.type === \"outgoing\" ? \"bg-blue-500 text-white\" : \"bg-gray-100 text-gray-900\"\n                        }`}\n                      >\n                        <p className=\"text-sm\">{message.message}</p>\n                        <p\n                          className={`text-xs mt-1 ${message.type === \"outgoing\" ? \"text-blue-100\" : \"text-gray-500\"}`}\n                        >\n                          {message.timestamp.toLocaleTimeString(\"th-TH\", {\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <MessageSquare className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>ยังไม่มีข้อความในแชทนี้</p>\n                  </div>\n                )\n              ) : (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>เลือกเพจจากรายการด้านซ้ายเพื่อเริ่มแชท</p>\n                </div>\n              )}\n            </div>\n\n            {/* Message Input */}\n            {selectedPage && (\n              <div className=\"border-t p-4\">\n                <div className=\"flex space-x-2\">\n                  <Textarea\n                    placeholder=\"พิมพ์ข้อความ...\"\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    className=\"flex-1 min-h-[40px] max-h-[120px]\"\n                    onKeyPress={(e) => {\n                      if (e.key === \"Enter\" && !e.shiftKey) {\n                        e.preventDefault()\n                        handleSendMessage()\n                      }\n                    }}\n                  />\n                  <Button onClick={handleSendMessage} disabled={!newMessage.trim()} className=\"self-end\">\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">ข้อความรวม</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-2\">1,234</p>\n              </div>\n              <MessageSquare className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">ลูกค้าที่แชท</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-2\">89</p>\n              </div>\n              <Users className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">เวลาตอบกลับเฉลี่ย</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-2\">2.5 นาที</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/advanced/LiveChatWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAgentInfo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":34,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":225,"column":17,"nodeType":"JSXOpeningElement","endLine":229,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { MessageCircle, X, Send, Minimize2, Maximize2, Phone, Mail } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { useLanguage } from \"@/app/contexts/LanguageContext\"\nimport { useAuth } from \"@/app/contexts/AuthContext\"\n\ninterface ChatMessage {\n  id: string\n  sender: \"user\" | \"agent\" | \"system\"\n  message: string\n  timestamp: string\n  read: boolean\n}\n\ninterface LiveChatWidgetProps {\n  position?: \"bottom-right\" | \"bottom-left\"\n  theme?: \"light\" | \"dark\"\n  autoOpen?: boolean\n}\n\nexport function LiveChatWidget({ position = \"bottom-right\", theme = \"light\", autoOpen = false }: LiveChatWidgetProps) {\n  const [isOpen, setIsOpen] = useState(autoOpen)\n  const [isMinimized, setIsMinimized] = useState(false)\n  const [messages, setMessages] = useState<ChatMessage[]>([])\n  const [newMessage, setNewMessage] = useState(\"\")\n  const [isTyping, setIsTyping] = useState(false)\n  const [isConnected, setIsConnected] = useState(false)\n  const [unreadCount, setUnreadCount] = useState(0)\n  const [agentInfo, setAgentInfo] = useState({\n    name: \"Sarah\",\n    avatar: \"/placeholder.svg?height=40&width=40&text=S\",\n    status: \"online\",\n  })\n\n  const { language } = useLanguage()\n  const { user } = useAuth()\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n\n  const positionClasses = {\n    \"bottom-right\": \"bottom-4 right-4\",\n    \"bottom-left\": \"bottom-4 left-4\",\n  }\n\n  useEffect(() => {\n    // Initialize chat with welcome message\n    const welcomeMessage: ChatMessage = {\n      id: \"welcome\",\n      sender: \"system\",\n      message:\n        language === \"th\"\n          ? \"สวัสดีค่ะ! ยินดีต้อนรับสู่ SofaCover Pro เราพร้อมช่วยเหลือคุณ 24/7\"\n          : \"Hello! Welcome to SofaCover Pro. We're here to help you 24/7\",\n      timestamp: new Date().toISOString(),\n      read: false,\n    }\n\n    setMessages([welcomeMessage])\n\n    // Simulate connection\n    setTimeout(() => {\n      setIsConnected(true)\n      const agentMessage: ChatMessage = {\n        id: \"agent-intro\",\n        sender: \"agent\",\n        message:\n          language === \"th\"\n            ? \"สวัสดีค่ะ! ฉันชื่อ Sarah จากทีมบริการลูกค้า มีอะไรให้ช่วยเหลือไหมคะ?\"\n            : \"Hi! I'm Sarah from customer service. How can I help you today?\",\n        timestamp: new Date().toISOString(),\n        read: false,\n      }\n      setMessages((prev) => [...prev, agentMessage])\n      setUnreadCount(1)\n    }, 2000)\n  }, [language])\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n  }\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return\n\n    const userMessage: ChatMessage = {\n      id: `user-${Date.now()}`,\n      sender: \"user\",\n      message: newMessage,\n      timestamp: new Date().toISOString(),\n      read: true,\n    }\n\n    setMessages((prev) => [...prev, userMessage])\n    setNewMessage(\"\")\n    setIsTyping(true)\n\n    // Simulate agent response\n    setTimeout(\n      () => {\n        setIsTyping(false)\n        const agentResponse = generateAgentResponse(newMessage)\n        const agentMessage: ChatMessage = {\n          id: `agent-${Date.now()}`,\n          sender: \"agent\",\n          message: agentResponse,\n          timestamp: new Date().toISOString(),\n          read: false,\n        }\n        setMessages((prev) => [...prev, agentMessage])\n\n        if (isMinimized || !isOpen) {\n          setUnreadCount((prev) => prev + 1)\n        }\n      },\n      1000 + Math.random() * 2000,\n    )\n  }\n\n  const generateAgentResponse = (userMessage: string): string => {\n    const lowerMessage = userMessage.toLowerCase()\n\n    if (lowerMessage.includes(\"price\") || lowerMessage.includes(\"ราคา\")) {\n      return language === \"th\"\n        ? \"ราคาของเราเริ่มต้นที่ 890 บาท ขึ้นอยู่กับขนาดและผ้าที่เลือก คุณสามารถส่งรูปโซฟาให้เราเพื่อประเมินราคาที่แม่นยำได้ค่ะ\"\n        : \"Our prices start from 890 THB depending on size and fabric choice. You can send us a photo of your sofa for an accurate quote.\"\n    }\n\n    if (lowerMessage.includes(\"delivery\") || lowerMessage.includes(\"จัดส่ง\")) {\n      return language === \"th\"\n        ? \"เราจัดส่งทั่วประเทศไทย ใช้เวลา 3-5 วันทำการ และฟรีค่าจัดส่งสำหรับออเดอร์เกิน 1,000 บาทค่ะ\"\n        : \"We deliver nationwide in Thailand within 3-5 business days. Free shipping for orders over 1,000 THB.\"\n    }\n\n    if (lowerMessage.includes(\"fabric\") || lowerMessage.includes(\"ผ้า\")) {\n      return language === \"th\"\n        ? \"เรามีผ้าให้เลือกมากมาย ทั้งผ้าฝ้าย ผ้าลินิน และผ้าสังเคราะห์ คุณสามารถดูแกลเลอรี่ผ้าของเราได้ที่หน้า Fabric Gallery ค่ะ\"\n        : \"We have a wide selection of fabrics including cotton, linen, and synthetic materials. You can browse our Fabric Gallery page.\"\n    }\n\n    if (lowerMessage.includes(\"custom\") || lowerMessage.includes(\"สั่งทำ\")) {\n      return language === \"th\"\n        ? \"เราทำผ้าคลุมโซฟาตามสั่งทุกขนาด เพียงส่งรูปและขนาดโซฟามาให้เรา เราจะช่วยออกแบบให้เหมาะสมที่สุดค่ะ\"\n        : \"We make custom sofa covers for any size. Just send us photos and measurements of your sofa, and we'll design the perfect fit.\"\n    }\n\n    // Default responses\n    const defaultResponses =\n      language === \"th\"\n        ? [\n            \"ขอบคุณสำหรับคำถามค่ะ ให้ฉันช่วยหาข้อมูลให้นะคะ\",\n            \"เข้าใจค่ะ คุณสามารถโทรหาเราที่ 02-xxx-xxxx หรือส่งข้อความทาง Facebook ได้เลยค่ะ\",\n            \"ฉันจะช่วยคุณเรื่องนี้ค่ะ คุณต้องการข้อมูลเพิ่มเติมอะไรไหมคะ?\",\n          ]\n        : [\n            \"Thank you for your question. Let me help you with that.\",\n            \"I understand. You can call us at 02-xxx-xxxx or message us on Facebook.\",\n            \"I'll help you with this. Do you need any additional information?\",\n          ]\n\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)]\n  }\n\n  const handleOpenChat = () => {\n    setIsOpen(true)\n    setIsMinimized(false)\n    setUnreadCount(0)\n\n    // Mark messages as read\n    setMessages((prev) => prev.map((msg) => ({ ...msg, read: true })))\n  }\n\n  const quickActions = [\n    {\n      text: language === \"th\" ? \"ขอใบเสนอราคา\" : \"Get Quote\",\n      action: () => setNewMessage(language === \"th\" ? \"ขอใบเสนอราคาค่ะ\" : \"I'd like to get a quote\"),\n    },\n    {\n      text: language === \"th\" ? \"ดูแกลเลอรี่ผ้า\" : \"View Fabrics\",\n      action: () => window.open(\"/fabric-gallery\", \"_blank\"),\n    },\n    {\n      text: language === \"th\" ? \"ติดตามออเดอร์\" : \"Track Order\",\n      action: () => setNewMessage(language === \"th\" ? \"ต้องการติดตามออเดอร์ค่ะ\" : \"I'd like to track my order\"),\n    },\n  ]\n\n  if (!isOpen) {\n    return (\n      <div className={`fixed ${positionClasses[position]} z-50`}>\n        <div className=\"relative\">\n          <Button\n            onClick={handleOpenChat}\n            className=\"rounded-full w-16 h-16 shadow-lg bg-green-600 hover:bg-green-700 text-white\"\n          >\n            <MessageCircle className=\"w-7 h-7\" />\n          </Button>\n          {unreadCount > 0 && (\n            <Badge className=\"absolute -top-2 -right-2 w-6 h-6 flex items-center justify-center p-0 text-xs bg-red-500\">\n              {unreadCount}\n            </Badge>\n          )}\n          <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-green-500 rounded-full border-2 border-white\"></div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`fixed ${positionClasses[position]} z-50`}>\n      <Card\n        className={`w-80 h-96 shadow-xl ${theme === \"dark\" ? \"bg-gray-800 text-white\" : \"bg-white\"} ${isMinimized ? \"h-14\" : \"\"}`}\n      >\n        <CardHeader className=\"pb-2 px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"relative\">\n                <img\n                  src={agentInfo.avatar || \"/placeholder.svg\"}\n                  alt={agentInfo.name}\n                  className=\"w-8 h-8 rounded-full\"\n                />\n                <div\n                  className={`absolute bottom-0 right-0 w-3 h-3 rounded-full border-2 border-white ${\n                    isConnected ? \"bg-green-500\" : \"bg-gray-400\"\n                  }`}\n                ></div>\n              </div>\n              <div>\n                <CardTitle className=\"text-sm\">{agentInfo.name}</CardTitle>\n                <p className=\"text-xs text-gray-500\">\n                  {isConnected\n                    ? language === \"th\"\n                      ? \"ออนไลน์\"\n                      : \"Online\"\n                    : language === \"th\"\n                      ? \"กำลังเชื่อมต่อ...\"\n                      : \"Connecting...\"}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsMinimized(!isMinimized)} className=\"p-1 h-8 w-8\">\n                {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsOpen(false)} className=\"p-1 h-8 w-8\">\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        {!isMinimized && (\n          <CardContent className=\"p-0 flex flex-col h-80\">\n            {/* Messages */}\n            <div className=\"flex-1 overflow-y-auto px-4 py-2 space-y-3\">\n              {messages.map((message) => (\n                <div key={message.id} className={`flex ${message.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}>\n                  <div\n                    className={`max-w-xs px-3 py-2 rounded-lg text-sm ${\n                      message.sender === \"user\"\n                        ? \"bg-green-600 text-white\"\n                        : message.sender === \"system\"\n                          ? \"bg-blue-100 text-blue-800 text-center\"\n                          : \"bg-gray-100 text-gray-800\"\n                    }`}\n                  >\n                    {message.message}\n                    <div className={`text-xs mt-1 ${message.sender === \"user\" ? \"text-green-100\" : \"text-gray-500\"}`}>\n                      {new Date(message.timestamp).toLocaleTimeString([], {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                      })}\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              {isTyping && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-gray-100 text-gray-800 px-3 py-2 rounded-lg text-sm\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                      <div\n                        className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                        style={{ animationDelay: \"0.1s\" }}\n                      ></div>\n                      <div\n                        className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                        style={{ animationDelay: \"0.2s\" }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* Quick Actions */}\n            {messages.length <= 2 && (\n              <div className=\"px-4 py-2 border-t\">\n                <p className=\"text-xs text-gray-500 mb-2\">{language === \"th\" ? \"คำถามที่พบบ่อย:\" : \"Quick actions:\"}</p>\n                <div className=\"flex flex-wrap gap-1\">\n                  {quickActions.map((action, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={action.action}\n                      className=\"text-xs h-7 bg-transparent\"\n                    >\n                      {action.text}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Input */}\n            <div className=\"px-4 py-3 border-t\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  placeholder={language === \"th\" ? \"พิมพ์ข้อความ...\" : \"Type a message...\"}\n                  onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n                  className=\"flex-1 text-sm\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!newMessage.trim() || !isConnected}\n                  size=\"sm\"\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n\n              {/* Contact Options */}\n              <div className=\"flex items-center justify-center space-x-4 mt-2 text-xs text-gray-500\">\n                <button className=\"flex items-center space-x-1 hover:text-green-600\">\n                  <Phone className=\"w-3 h-3\" />\n                  <span>02-xxx-xxxx</span>\n                </button>\n                <button className=\"flex items-center space-x-1 hover:text-blue-600\">\n                  <Mail className=\"w-3 h-3\" />\n                  <span>support@sofacover.com</span>\n                </button>\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/advanced/LoyaltyProgram.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":57,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLoyaltyData'. Either include it or remove the dependency array.","line":165,"column":6,"nodeType":"ArrayExpression","endLine":165,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [loadLoyaltyData, userPoints]","fix":{"range":[5100,5112],"text":"[loadLoyaltyData, userPoints]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":347,"column":21,"nodeType":"JSXOpeningElement","endLine":351,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Star, Gift, Trophy, Crown, Zap, ArrowRight, Calendar, ShoppingBag } from \"lucide-react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { useLanguage } from \"@/app/contexts/LanguageContext\"\nimport { useAuth } from \"@/app/contexts/AuthContext\"\n\ninterface LoyaltyTier {\n  id: string\n  name: string\n  nameEn: string\n  minPoints: number\n  maxPoints: number\n  benefits: string[]\n  benefitsEn: string[]\n  color: string\n  icon: React.ReactNode\n}\n\ninterface LoyaltyTransaction {\n  id: string\n  type: \"earned\" | \"redeemed\"\n  points: number\n  description: string\n  date: string\n  orderId?: string\n}\n\ninterface Reward {\n  id: string\n  name: string\n  nameEn: string\n  description: string\n  descriptionEn: string\n  pointsCost: number\n  category: \"discount\" | \"freebie\" | \"exclusive\"\n  image: string\n  available: boolean\n}\n\nexport function LoyaltyProgram() {\n  const [userPoints, setUserPoints] = useState(1250)\n  const [currentTier, setCurrentTier] = useState<LoyaltyTier | null>(null)\n  const [nextTier, setNextTier] = useState<LoyaltyTier | null>(null)\n  const [transactions, setTransactions] = useState<LoyaltyTransaction[]>([])\n  const [rewards, setRewards] = useState<Reward[]>([])\n  const [loading, setLoading] = useState(true)\n\n  const { language } = useLanguage()\n  const { user } = useAuth()\n\n  const loyaltyTiers: LoyaltyTier[] = [\n    {\n      id: \"bronze\",\n      name: \"สมาชิกทองแดง\",\n      nameEn: \"Bronze Member\",\n      minPoints: 0,\n      maxPoints: 499,\n      benefits: [\"ส่วนลด 5% สำหรับออเดอร์แรก\", \"แจ้งข่าวสารพิเศษ\"],\n      benefitsEn: [\"5% discount on first order\", \"Special newsletter\"],\n      color: \"bg-amber-600\",\n      icon: <Star className=\"w-5 h-5\" />,\n    },\n    {\n      id: \"silver\",\n      name: \"สมาชิกเงิน\",\n      nameEn: \"Silver Member\",\n      minPoints: 500,\n      maxPoints: 1499,\n      benefits: [\"ส่วนลด 10% ทุกออเดอร์\", \"ฟรีค่าจัดส่งเมื่อซื้อครบ 800 บาท\", \"เข้าถึงสินค้าใหม่ก่อนใคร\"],\n      benefitsEn: [\"10% discount on all orders\", \"Free shipping over 800 THB\", \"Early access to new products\"],\n      color: \"bg-gray-400\",\n      icon: <Gift className=\"w-5 h-5\" />,\n    },\n    {\n      id: \"gold\",\n      name: \"สมาชิกทอง\",\n      nameEn: \"Gold Member\",\n      minPoints: 1500,\n      maxPoints: 2999,\n      benefits: [\"ส่วนลด 15% ทุกออเดอร์\", \"ฟรีค่าจัดส่งทุกออเดอร์\", \"บริการปรึกษาส่วนตัว\", \"ของขวัญวันเกิด\"],\n      benefitsEn: [\n        \"15% discount on all orders\",\n        \"Free shipping on all orders\",\n        \"Personal consultation\",\n        \"Birthday gift\",\n      ],\n      color: \"bg-yellow-500\",\n      icon: <Trophy className=\"w-5 h-5\" />,\n    },\n    {\n      id: \"platinum\",\n      name: \"สมาชิกแพลทินัม\",\n      nameEn: \"Platinum Member\",\n      minPoints: 3000,\n      maxPoints: 9999,\n      benefits: [\"ส่วนลด 20% ทุกออเดอร์\", \"ฟรีค่าจัดส่งและติดตั้ง\", \"บริการออกแบบเฉพาะ\", \"เข้าถึงคอลเลกชันพิเศษ\"],\n      benefitsEn: [\n        \"20% discount on all orders\",\n        \"Free shipping & installation\",\n        \"Custom design service\",\n        \"Exclusive collections\",\n      ],\n      color: \"bg-purple-600\",\n      icon: <Crown className=\"w-5 h-5\" />,\n    },\n  ]\n\n  const availableRewards: Reward[] = [\n    {\n      id: \"discount-100\",\n      name: \"คูปองส่วนลด 100 บาท\",\n      nameEn: \"100 THB Discount Coupon\",\n      description: \"ใช้ได้กับออเดอร์ขั้นต่ำ 1,000 บาท\",\n      descriptionEn: \"Valid for orders over 1,000 THB\",\n      pointsCost: 200,\n      category: \"discount\",\n      image: \"/placeholder.svg?height=100&width=100&text=100฿\",\n      available: true,\n    },\n    {\n      id: \"free-pillow\",\n      name: \"หมอนอิงฟรี\",\n      nameEn: \"Free Throw Pillow\",\n      description: \"หมอนอิงผ้าเดียวกับผ้าคลุมโซฟา\",\n      descriptionEn: \"Matching throw pillow with sofa cover\",\n      pointsCost: 500,\n      category: \"freebie\",\n      image: \"/placeholder.svg?height=100&width=100&text=Pillow\",\n      available: true,\n    },\n    {\n      id: \"premium-fabric\",\n      name: \"อัพเกรดผ้าพรีเมียมฟรี\",\n      nameEn: \"Free Premium Fabric Upgrade\",\n      description: \"อัพเกรดเป็นผ้าพรีเมียมโดยไม่เสียค่าใช้จ่ายเพิ่ม\",\n      descriptionEn: \"Upgrade to premium fabric at no extra cost\",\n      pointsCost: 800,\n      category: \"exclusive\",\n      image: \"/placeholder.svg?height=100&width=100&text=Premium\",\n      available: true,\n    },\n    {\n      id: \"vip-consultation\",\n      name: \"บริการปรึกษา VIP\",\n      nameEn: \"VIP Consultation Service\",\n      description: \"บริการปรึกษาการออกแบบแบบ 1:1 กับผู้เชี่ยวชาญ\",\n      descriptionEn: \"1:1 design consultation with expert\",\n      pointsCost: 1000,\n      category: \"exclusive\",\n      image: \"/placeholder.svg?height=100&width=100&text=VIP\",\n      available: currentTier?.id === \"gold\" || currentTier?.id === \"platinum\",\n    },\n  ]\n\n  useEffect(() => {\n    loadLoyaltyData()\n  }, [userPoints])\n\n  const loadLoyaltyData = () => {\n    // Determine current tier\n    const tier = loyaltyTiers.find((t) => userPoints >= t.minPoints && userPoints <= t.maxPoints)\n    setCurrentTier(tier || loyaltyTiers[0])\n\n    // Determine next tier\n    const nextTierIndex = loyaltyTiers.findIndex((t) => userPoints < t.minPoints)\n    setNextTier(nextTierIndex >= 0 ? loyaltyTiers[nextTierIndex] : null)\n\n    // Load mock transactions\n    setTransactions([\n      {\n        id: \"1\",\n        type: \"earned\",\n        points: 150,\n        description: \"Purchase Order #ORD-2024-001\",\n        date: \"2024-01-15\",\n        orderId: \"ORD-2024-001\",\n      },\n      {\n        id: \"2\",\n        type: \"earned\",\n        points: 200,\n        description: \"Product Review Bonus\",\n        date: \"2024-01-10\",\n      },\n      {\n        id: \"3\",\n        type: \"redeemed\",\n        points: -100,\n        description: \"100 THB Discount Coupon\",\n        date: \"2024-01-05\",\n      },\n    ])\n\n    setRewards(availableRewards)\n    setLoading(false)\n  }\n\n  const redeemReward = async (rewardId: string) => {\n    const reward = rewards.find((r) => r.id === rewardId)\n    if (!reward || userPoints < reward.pointsCost) return\n\n    // Simulate redemption\n    setUserPoints((prev) => prev - reward.pointsCost)\n\n    const newTransaction: LoyaltyTransaction = {\n      id: `redeem-${Date.now()}`,\n      type: \"redeemed\",\n      points: -reward.pointsCost,\n      description: language === \"th\" ? reward.name : reward.nameEn,\n      date: new Date().toISOString().split(\"T\")[0],\n    }\n\n    setTransactions((prev) => [newTransaction, ...prev])\n\n    // Show success message (you can integrate with toast system)\n    alert(language === \"th\" ? `แลกรางวัล \"${reward.name}\" สำเร็จ!` : `Successfully redeemed \"${reward.nameEn}\"!`)\n  }\n\n  const getProgressToNextTier = () => {\n    if (!nextTier) return 100\n    const progress =\n      ((userPoints - (currentTier?.minPoints || 0)) / (nextTier.minPoints - (currentTier?.minPoints || 0))) * 100\n    return Math.min(progress, 100)\n  }\n\n  if (loading) {\n    return <div className=\"animate-pulse h-96 bg-gray-200 rounded-lg\" />\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          {language === \"th\" ? \"โปรแกรมสมาชิก\" : \"Loyalty Program\"}\n        </h2>\n        <p className=\"text-gray-600\">\n          {language === \"th\" ? \"สะสมแต้มและรับสิทธิพิเศษมากมาย\" : \"Earn points and enjoy exclusive benefits\"}\n        </p>\n      </div>\n\n      {/* Current Status */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`p-3 rounded-full text-white ${currentTier?.color}`}>{currentTier?.icon}</div>\n              <div>\n                <h3 className=\"text-xl font-bold\">{language === \"th\" ? currentTier?.name : currentTier?.nameEn}</h3>\n                <p className=\"text-gray-600\">\n                  {userPoints.toLocaleString()} {language === \"th\" ? \"แต้ม\" : \"points\"}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-purple-600\">{userPoints.toLocaleString()}</div>\n              <div className=\"text-sm text-gray-500\">{language === \"th\" ? \"แต้มสะสม\" : \"Total Points\"}</div>\n            </div>\n          </div>\n\n          {nextTier && (\n            <div>\n              <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                <span>\n                  {language === \"th\" ? \"ความคืบหน้าไปยัง\" : \"Progress to\"}{\" \"}\n                  {language === \"th\" ? nextTier.name : nextTier.nameEn}\n                </span>\n                <span>\n                  {nextTier.minPoints - userPoints} {language === \"th\" ? \"แต้มที่เหลือ\" : \"points to go\"}\n                </span>\n              </div>\n              <Progress value={getProgressToNextTier()} className=\"h-2\" />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"benefits\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"benefits\">{language === \"th\" ? \"สิทธิประโยชน์\" : \"Benefits\"}</TabsTrigger>\n          <TabsTrigger value=\"rewards\">{language === \"th\" ? \"แลกรางวัล\" : \"Rewards\"}</TabsTrigger>\n          <TabsTrigger value=\"history\">{language === \"th\" ? \"ประวัติ\" : \"History\"}</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"benefits\" className=\"space-y-4\">\n          {/* Current Tier Benefits */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <div className={`p-2 rounded-full text-white ${currentTier?.color}`}>{currentTier?.icon}</div>\n                <span>{language === \"th\" ? \"สิทธิประโยชน์ปัจจุบัน\" : \"Current Benefits\"}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {(language === \"th\" ? currentTier?.benefits : currentTier?.benefitsEn)?.map((benefit, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Zap className=\"w-4 h-4 text-green-500\" />\n                    <span>{benefit}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* All Tiers */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {loyaltyTiers.map((tier) => (\n              <Card key={tier.id} className={`${userPoints >= tier.minPoints ? \"ring-2 ring-purple-500\" : \"\"}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center mb-3\">\n                    <div className={`inline-flex p-3 rounded-full text-white ${tier.color} mb-2`}>{tier.icon}</div>\n                    <h3 className=\"font-bold\">{language === \"th\" ? tier.name : tier.nameEn}</h3>\n                    <p className=\"text-sm text-gray-500\">\n                      {tier.minPoints.toLocaleString()} - {tier.maxPoints.toLocaleString()}{\" \"}\n                      {language === \"th\" ? \"แต้ม\" : \"pts\"}\n                    </p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    {(language === \"th\" ? tier.benefits : tier.benefitsEn).slice(0, 2).map((benefit, index) => (\n                      <div key={index} className=\"text-xs text-gray-600 flex items-start space-x-1\">\n                        <span className=\"text-green-500 mt-0.5\">•</span>\n                        <span>{benefit}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"rewards\" className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {rewards.map((reward) => (\n              <Card key={reward.id} className={`${!reward.available ? \"opacity-50\" : \"\"}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center mb-4\">\n                    <img\n                      src={reward.image || \"/placeholder.svg\"}\n                      alt={language === \"th\" ? reward.name : reward.nameEn}\n                      className=\"w-20 h-20 mx-auto mb-3 rounded-lg\"\n                    />\n                    <h3 className=\"font-bold mb-1\">{language === \"th\" ? reward.name : reward.nameEn}</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">\n                      {language === \"th\" ? reward.description : reward.descriptionEn}\n                    </p>\n                    <Badge variant={reward.category === \"exclusive\" ? \"default\" : \"secondary\"}>\n                      {reward.category === \"discount\" && (language === \"th\" ? \"ส่วนลด\" : \"Discount\")}\n                      {reward.category === \"freebie\" && (language === \"th\" ? \"ของแถม\" : \"Freebie\")}\n                      {reward.category === \"exclusive\" && (language === \"th\" ? \"พิเศษ\" : \"Exclusive\")}\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"w-4 h-4 text-yellow-500\" />\n                      <span className=\"font-bold\">{reward.pointsCost.toLocaleString()}</span>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => redeemReward(reward.id)}\n                      disabled={!reward.available || userPoints < reward.pointsCost}\n                    >\n                      {language === \"th\" ? \"แลก\" : \"Redeem\"}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{language === \"th\" ? \"ประวัติการใช้แต้ม\" : \"Points History\"}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {transactions.map((transaction) => (\n                  <div key={transaction.id} className=\"flex items-center justify-between py-2 border-b last:border-b-0\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div\n                        className={`p-2 rounded-full ${\n                          transaction.type === \"earned\" ? \"bg-green-100 text-green-600\" : \"bg-red-100 text-red-600\"\n                        }`}\n                      >\n                        {transaction.type === \"earned\" ? (\n                          <ArrowRight className=\"w-4 h-4\" />\n                        ) : (\n                          <ShoppingBag className=\"w-4 h-4\" />\n                        )}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{transaction.description}</p>\n                        <p className=\"text-sm text-gray-500 flex items-center space-x-1\">\n                          <Calendar className=\"w-3 h-3\" />\n                          <span>{new Date(transaction.date).toLocaleDateString()}</span>\n                        </p>\n                      </div>\n                    </div>\n                    <div className={`font-bold ${transaction.type === \"earned\" ? \"text-green-600\" : \"text-red-600\"}`}>\n                      {transaction.type === \"earned\" ? \"+\" : \"\"}\n                      {transaction.points.toLocaleString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/advanced/OfflineIndicator.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":53,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1504,1542],"text":"\n            You&apos;re offline\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1504,1542],"text":"\n            You&lsquo;re offline\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1504,1542],"text":"\n            You&#39;re offline\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1504,1542],"text":"\n            You&rsquo;re offline\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { WifiOff, Wifi } from \"lucide-react\"\n\nexport function OfflineIndicator() {\n  const [isOnline, setIsOnline] = useState(true)\n  const [showIndicator, setShowIndicator] = useState(false)\n\n  useEffect(() => {\n    const updateOnlineStatus = () => {\n      const online = navigator.onLine\n      setIsOnline(online)\n\n      if (!online) {\n        setShowIndicator(true)\n      } else {\n        // Hide indicator after 3 seconds when back online\n        setTimeout(() => setShowIndicator(false), 3000)\n      }\n    }\n\n    // Set initial status\n    updateOnlineStatus()\n\n    // Listen for online/offline events\n    window.addEventListener(\"online\", updateOnlineStatus)\n    window.addEventListener(\"offline\", updateOnlineStatus)\n\n    return () => {\n      window.removeEventListener(\"online\", updateOnlineStatus)\n      window.removeEventListener(\"offline\", updateOnlineStatus)\n    }\n  }, [])\n\n  if (!showIndicator) return null\n\n  return (\n    <div\n      className={`fixed top-4 left-1/2 -translate-x-1/2 z-50 rounded-full px-4 py-2 text-sm font-medium text-white transition-all duration-300 ${\n        isOnline ? \"bg-green-500 animate-in slide-in-from-top-2\" : \"bg-red-500 animate-in slide-in-from-top-2\"\n      }`}\n    >\n      <div className=\"flex items-center gap-2\">\n        {isOnline ? (\n          <>\n            <Wifi className=\"h-4 w-4\" />\n            Back online\n          </>\n        ) : (\n          <>\n            <WifiOff className=\"h-4 w-4\" />\n            You're offline\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/advanced/PWAInstallPrompt.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1902,1949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1969,2017],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { X, Download, Smartphone } from \"lucide-react\"\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>\n  userChoice: Promise<{ outcome: \"accepted\" | \"dismissed\" }>\n}\n\nexport function PWAInstallPrompt() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null)\n  const [showPrompt, setShowPrompt] = useState(false)\n  const [isInstalled, setIsInstalled] = useState(false)\n\n  useEffect(() => {\n    // Check if app is already installed\n    const isStandalone = window.matchMedia(\"(display-mode: standalone)\").matches\n    const isInWebAppiOS = (window.navigator as any).standalone === true\n    setIsInstalled(isStandalone || isInWebAppiOS)\n\n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault()\n      setDeferredPrompt(e as BeforeInstallPromptEvent)\n\n      // Show prompt after user has been on site for 30 seconds\n      setTimeout(() => {\n        if (!localStorage.getItem(\"pwa-install-dismissed\")) {\n          setShowPrompt(true)\n        }\n      }, 30000)\n    }\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true)\n      setShowPrompt(false)\n      setDeferredPrompt(null)\n    }\n\n    window.addEventListener(\"beforeinstallprompt\", handleBeforeInstallPrompt)\n    window.addEventListener(\"appinstalled\", handleAppInstalled)\n\n    return () => {\n      window.removeEventListener(\"beforeinstallprompt\", handleBeforeInstallPrompt)\n      window.removeEventListener(\"appinstalled\", handleAppInstalled)\n    }\n  }, [])\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) return\n\n    deferredPrompt.prompt()\n    const { outcome } = await deferredPrompt.userChoice\n\n    if (outcome === \"accepted\") {\n      console.log(\"User accepted the install prompt\")\n    } else {\n      console.log(\"User dismissed the install prompt\")\n    }\n\n    setDeferredPrompt(null)\n    setShowPrompt(false)\n  }\n\n  const handleDismiss = () => {\n    setShowPrompt(false)\n    localStorage.setItem(\"pwa-install-dismissed\", \"true\")\n  }\n\n  if (isInstalled || !showPrompt || !deferredPrompt) {\n    return null\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 right-4 z-50 mx-auto max-w-sm\">\n      <div className=\"rounded-lg border bg-background p-4 shadow-lg\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"flex-shrink-0\">\n            <Smartphone className=\"h-6 w-6 text-primary\" />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-sm\">Install SofaCover Pro</h3>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Get the full app experience with offline access and faster loading\n            </p>\n            <div className=\"flex gap-2 mt-3\">\n              <Button size=\"sm\" onClick={handleInstallClick} className=\"flex-1\">\n                <Download className=\"h-4 w-4 mr-1\" />\n                Install\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={handleDismiss}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/advanced/ProductComparison.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":94,"column":19,"nodeType":"JSXOpeningElement","endLine":98,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkCompareStatus'. Either include it or remove the dependency array.","line":201,"column":6,"nodeType":"ArrayExpression","endLine":201,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [checkCompareStatus, product.id]","fix":{"range":[6850,6862],"text":"[checkCompareStatus, product.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { X, Plus, Check, Minus } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport type { Product } from \"@/lib/types\"\n\ninterface ComparisonProduct extends Product {\n  features?: Record<string, string | boolean>\n}\n\nexport function ProductComparison() {\n  const [compareList, setCompareList] = useState<ComparisonProduct[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadCompareList()\n  }, [])\n\n  const loadCompareList = () => {\n    try {\n      const saved = localStorage.getItem(\"compareList\")\n      if (saved) {\n        setCompareList(JSON.parse(saved))\n      }\n    } catch (error) {\n      console.error(\"Failed to load compare list:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const removeFromCompare = (productId: string) => {\n    const updated = compareList.filter((item) => item.id !== productId)\n    setCompareList(updated)\n    localStorage.setItem(\"compareList\", JSON.stringify(updated))\n  }\n\n  const clearAll = () => {\n    setCompareList([])\n    localStorage.removeItem(\"compareList\")\n  }\n\n  if (isLoading) {\n    return <div className=\"animate-pulse h-96 bg-gray-200 rounded-lg\" />\n  }\n\n  if (compareList.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"mx-auto h-12 w-12 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n          <Plus className=\"h-6 w-6 text-gray-400\" />\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products to compare</h3>\n        <p className=\"text-gray-500 mb-4\">Add products to compare their features side by side</p>\n        <Button onClick={() => (window.location.href = \"/products\")}>Browse Products</Button>\n      </div>\n    )\n  }\n\n  const features = [\"Material\", \"Dimensions\", \"Color Options\", \"Washable\", \"Warranty\", \"Installation\", \"Price Range\"]\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Product Comparison</h2>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"secondary\">{compareList.length} products</Badge>\n          <Button variant=\"outline\" size=\"sm\" onClick={clearAll}>\n            Clear All\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <div className=\"min-w-full\">\n          {/* Product Headers */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-6\">\n            {compareList.map((product) => (\n              <Card key={product.id} className=\"relative\">\n                <button\n                  onClick={() => removeFromCompare(product.id)}\n                  className=\"absolute top-2 right-2 z-10 p-1 bg-white rounded-full shadow-md\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n\n                <div className=\"aspect-square overflow-hidden rounded-t-lg\">\n                  <img\n                    src={product.images?.[0] || \"/placeholder.svg?height=200&width=200\"}\n                    alt={product.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-medium mb-2 line-clamp-2\">{product.name}</h3>\n                  <p className=\"text-lg font-bold text-primary\">฿{product.price?.toLocaleString()}</p>\n                  {product.inStock ? (\n                    <Badge variant=\"default\" className=\"mt-2\">\n                      In Stock\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"destructive\" className=\"mt-2\">\n                      Out of Stock\n                    </Badge>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Feature Comparison Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Feature Comparison</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {features.map((feature) => (\n                  <div key={feature}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 items-center\">\n                      <div className=\"font-medium text-sm text-gray-600 mb-2 md:mb-0\">{feature}</div>\n                      {compareList.map((product) => (\n                        <div key={`${product.id}-${feature}`} className=\"text-sm\">\n                          {getFeatureValue(product, feature)}\n                        </div>\n                      ))}\n                    </div>\n                    <Separator className=\"mt-4\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mt-6\">\n            {compareList.map((product) => (\n              <div key={product.id} className=\"space-y-2\">\n                <Button className=\"w-full\" disabled={!product.inStock}>\n                  Add to Cart\n                </Button>\n                <Button variant=\"outline\" className=\"w-full bg-transparent\">\n                  View Details\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Helper function to get feature values\nfunction getFeatureValue(product: ComparisonProduct, feature: string): React.ReactNode {\n  const featureMap: Record<string, keyof ComparisonProduct | string> = {\n    Material: \"Cotton blend\",\n    Dimensions: \"Various sizes\",\n    \"Color Options\": \"Multiple colors\",\n    Washable: \"Machine washable\",\n    Warranty: \"1 year\",\n    Installation: \"Easy installation\",\n    \"Price Range\": \"price\",\n  }\n\n  const key = featureMap[feature]\n\n  if (key === \"price\") {\n    return `฿${product.price?.toLocaleString()}`\n  }\n\n  if (typeof key === \"string\" && key !== \"price\") {\n    return key\n  }\n\n  // For boolean values\n  if (typeof product.features?.[feature] === \"boolean\") {\n    return product.features[feature] ? (\n      <Check className=\"h-4 w-4 text-green-500\" />\n    ) : (\n      <Minus className=\"h-4 w-4 text-gray-400\" />\n    )\n  }\n\n  return product.features?.[feature] || \"N/A\"\n}\n\n// Compare button component for product cards\nexport function CompareButton({ product }: { product: Product }) {\n  const [isInCompare, setIsInCompare] = useState(false)\n\n  useEffect(() => {\n    checkCompareStatus()\n  }, [product.id])\n\n  const checkCompareStatus = () => {\n    try {\n      const saved = localStorage.getItem(\"compareList\")\n      if (saved) {\n        const compareList = JSON.parse(saved)\n        setIsInCompare(compareList.some((item: Product) => item.id === product.id))\n      }\n    } catch (error) {\n      console.error(\"Failed to check compare status:\", error)\n    }\n  }\n\n  const toggleCompare = () => {\n    try {\n      const saved = localStorage.getItem(\"compareList\")\n      let compareList: Product[] = saved ? JSON.parse(saved) : []\n\n      if (isInCompare) {\n        compareList = compareList.filter((item) => item.id !== product.id)\n      } else {\n        if (compareList.length >= 4) {\n          alert(\"You can compare up to 4 products at a time\")\n          return\n        }\n        compareList.push(product)\n      }\n\n      localStorage.setItem(\"compareList\", JSON.stringify(compareList))\n      setIsInCompare(!isInCompare)\n    } catch (error) {\n      console.error(\"Failed to update compare list:\", error)\n    }\n  }\n\n  return (\n    <Button variant={isInCompare ? \"default\" : \"outline\"} size=\"sm\" onClick={toggleCompare} className=\"text-xs\">\n      {isInCompare ? \"Remove\" : \"Compare\"}\n    </Button>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/advanced/SocialSharingWidget.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1272,1308],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":136,"column":15,"nodeType":"JSXOpeningElement","endLine":136,"endColumn":113},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'productImage' is defined but never used. Allowed unused args must match /^_/u.","line":213,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":213,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7622,7658],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Share2, Facebook, Twitter, MessageCircle, Mail, Copy, Check } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { useLanguage } from \"@/app/contexts/LanguageContext\"\n\ninterface SocialSharingWidgetProps {\n  url?: string\n  title?: string\n  description?: string\n  image?: string\n  hashtags?: string[]\n  className?: string\n}\n\nexport function SocialSharingWidget({\n  url = typeof window !== \"undefined\" ? window.location.href : \"\",\n  title = \"SofaCover Pro - ผ้าคลุมโซฟาคุณภาพสูง\",\n  description = \"ผ้าคลุมโซฟาสั่งทำพิเศษ คุณภาพสูง ราคาเป็นกันเอง\",\n  image = \"/placeholder.svg?height=400&width=800&text=SofaCover+Pro\",\n  hashtags = [\"SofaCover\", \"HomeDecor\", \"InteriorDesign\", \"Thailand\"],\n  className = \"\",\n}: SocialSharingWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const { language } = useLanguage()\n\n  const shareData = {\n    title,\n    text: description,\n    url,\n  }\n\n  const handleNativeShare = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData)\n      } catch (error) {\n        console.log(\"Error sharing:\", error)\n      }\n    } else {\n      setIsOpen(true)\n    }\n  }\n\n  const handleCopyLink = async () => {\n    try {\n      await navigator.clipboard.writeText(url)\n      setCopied(true)\n      setTimeout(() => setCopied(false), 2000)\n    } catch (error) {\n      console.error(\"Failed to copy:\", error)\n    }\n  }\n\n  const shareUrls = {\n    facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`,\n    twitter: `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}&hashtags=${hashtags.join(\",\")}`,\n    line: `https://social-plugins.line.me/lineit/share?url=${encodeURIComponent(url)}`,\n    whatsapp: `https://wa.me/?text=${encodeURIComponent(`${title} ${url}`)}`,\n    email: `mailto:?subject=${encodeURIComponent(title)}&body=${encodeURIComponent(`${description}\\n\\n${url}`)}`,\n  }\n\n  const socialPlatforms = [\n    {\n      name: \"Facebook\",\n      icon: <Facebook className=\"w-5 h-5\" />,\n      url: shareUrls.facebook,\n      color: \"bg-blue-600 hover:bg-blue-700\",\n    },\n    {\n      name: \"Twitter\",\n      icon: <Twitter className=\"w-5 h-5\" />,\n      url: shareUrls.twitter,\n      color: \"bg-sky-500 hover:bg-sky-600\",\n    },\n    {\n      name: \"LINE\",\n      icon: <MessageCircle className=\"w-5 h-5\" />,\n      url: shareUrls.line,\n      color: \"bg-green-500 hover:bg-green-600\",\n    },\n    {\n      name: \"WhatsApp\",\n      icon: <MessageCircle className=\"w-5 h-5\" />,\n      url: shareUrls.whatsapp,\n      color: \"bg-green-600 hover:bg-green-700\",\n    },\n    {\n      name: \"Email\",\n      icon: <Mail className=\"w-5 h-5\" />,\n      url: shareUrls.email,\n      color: \"bg-gray-600 hover:bg-gray-700\",\n    },\n  ]\n\n  const handleSocialShare = (platform: string, url: string) => {\n    if (platform === \"Email\") {\n      window.location.href = url\n    } else {\n      window.open(url, \"_blank\", \"width=600,height=400\")\n    }\n  }\n\n  if (!isOpen) {\n    return (\n      <Button\n        onClick={handleNativeShare}\n        variant=\"outline\"\n        size=\"sm\"\n        className={`flex items-center space-x-2 ${className}`}\n      >\n        <Share2 className=\"w-4 h-4\" />\n        <span>{language === \"th\" ? \"แชร์\" : \"Share\"}</span>\n      </Button>\n    )\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-bold\">{language === \"th\" ? \"แชร์เนื้อหา\" : \"Share Content\"}</h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsOpen(false)}>\n              ×\n            </Button>\n          </div>\n\n          {/* Preview */}\n          <div className=\"mb-6 p-3 border rounded-lg bg-gray-50\">\n            <div className=\"flex space-x-3\">\n              <img src={image || \"/placeholder.svg\"} alt=\"Preview\" className=\"w-16 h-16 object-cover rounded\" />\n              <div className=\"flex-1 min-w-0\">\n                <h4 className=\"font-medium text-sm truncate\">{title}</h4>\n                <p className=\"text-xs text-gray-600 line-clamp-2\">{description}</p>\n                <p className=\"text-xs text-gray-500 truncate\">{url}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Social Platforms */}\n          <div className=\"grid grid-cols-2 gap-3 mb-4\">\n            {socialPlatforms.map((platform) => (\n              <Button\n                key={platform.name}\n                onClick={() => handleSocialShare(platform.name, platform.url)}\n                className={`${platform.color} text-white flex items-center justify-center space-x-2 h-12`}\n              >\n                {platform.icon}\n                <span className=\"text-sm\">{platform.name}</span>\n              </Button>\n            ))}\n          </div>\n\n          {/* Copy Link */}\n          <div className=\"space-y-3\">\n            <p className=\"text-sm font-medium\">{language === \"th\" ? \"หรือคัดลอกลิงก์\" : \"Or copy link\"}</p>\n            <div className=\"flex space-x-2\">\n              <Input value={url} readOnly className=\"flex-1 text-sm\" />\n              <Button\n                onClick={handleCopyLink}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex items-center space-x-1 bg-transparent\"\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"w-4 h-4 text-green-600\" />\n                    <span className=\"text-green-600\">{language === \"th\" ? \"คัดลอกแล้ว\" : \"Copied\"}</span>\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"w-4 h-4\" />\n                    <span>{language === \"th\" ? \"คัดลอก\" : \"Copy\"}</span>\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Hashtags */}\n          {hashtags.length > 0 && (\n            <div className=\"mt-4 pt-4 border-t\">\n              <p className=\"text-sm font-medium mb-2\">{language === \"th\" ? \"แฮชแท็กแนะนำ\" : \"Suggested hashtags\"}</p>\n              <div className=\"flex flex-wrap gap-1\">\n                {hashtags.map((tag) => (\n                  <span\n                    key={tag}\n                    className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded cursor-pointer hover:bg-blue-200\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(`#${tag}`)\n                    }}\n                  >\n                    #{tag}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n// Quick share button for product cards\nexport function QuickShareButton({\n  productName,\n  productImage,\n  productUrl,\n}: {\n  productName: string\n  productImage: string\n  productUrl: string\n}) {\n  const { language } = useLanguage()\n\n  const handleQuickShare = async () => {\n    const shareData = {\n      title: `${productName} - SofaCover Pro`,\n      text:\n        language === \"th\"\n          ? `ดูผ้าคลุมโซฟาสวยๆ ตัวนี้สิ! ${productName}`\n          : `Check out this beautiful sofa cover: ${productName}`,\n      url: productUrl,\n    }\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData)\n      } catch (error) {\n        console.log(\"Error sharing:\", error)\n      }\n    } else {\n      // Fallback to Facebook share\n      const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(productUrl)}`\n      window.open(facebookUrl, \"_blank\", \"width=600,height=400\")\n    }\n  }\n\n  return (\n    <Button onClick={handleQuickShare} variant=\"ghost\" size=\"sm\" className=\"p-2 text-gray-400 hover:text-blue-600\">\n      <Share2 className=\"w-4 h-4\" />\n    </Button>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/advanced/WishlistManager.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":102,"column":15,"nodeType":"JSXOpeningElement","endLine":106,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkWishlistStatus'. Either include it or remove the dependency array.","line":143,"column":6,"nodeType":"ArrayExpression","endLine":143,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [checkWishlistStatus, product.id]","fix":{"range":[4812,4824],"text":"[checkWishlistStatus, product.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Heart, X, ShoppingCart } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport type { Product } from \"@/lib/types\"\n\ninterface WishlistItem extends Product {\n  addedAt: string\n}\n\nexport function WishlistManager() {\n  const [wishlist, setWishlist] = useState<WishlistItem[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    loadWishlist()\n  }, [])\n\n  const loadWishlist = async () => {\n    try {\n      // Load from localStorage for now, can be extended to use Supabase\n      const saved = localStorage.getItem(\"wishlist\")\n      if (saved) {\n        setWishlist(JSON.parse(saved))\n      }\n    } catch (error) {\n      console.error(\"Failed to load wishlist:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const removeFromWishlist = (productId: string) => {\n    const updated = wishlist.filter((item) => item.id !== productId)\n    setWishlist(updated)\n    localStorage.setItem(\"wishlist\", JSON.stringify(updated))\n\n    toast({\n      title: \"Removed from wishlist\",\n      description: \"Item has been removed from your wishlist\",\n    })\n  }\n\n  const addToCart = (product: Product) => {\n    // Add to cart logic here\n    toast({\n      title: \"Added to cart\",\n      description: `${product.name} has been added to your cart`,\n    })\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {[...Array(6)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <div className=\"h-48 bg-gray-200\" />\n            <CardContent className=\"p-4\">\n              <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n              <div className=\"h-4 bg-gray-200 rounded w-2/3\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    )\n  }\n\n  if (wishlist.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Heart className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Your wishlist is empty</h3>\n        <p className=\"text-gray-500 mb-4\">Start adding items you love to your wishlist</p>\n        <Button onClick={() => (window.location.href = \"/products\")}>Browse Products</Button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">My Wishlist</h2>\n        <Badge variant=\"secondary\">{wishlist.length} items</Badge>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {wishlist.map((item) => (\n          <Card key={item.id} className=\"group relative overflow-hidden\">\n            <button\n              onClick={() => removeFromWishlist(item.id)}\n              className=\"absolute top-2 right-2 z-10 p-1 bg-white rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n\n            <div className=\"aspect-square overflow-hidden\">\n              <img\n                src={item.images?.[0] || \"/placeholder.svg?height=300&width=300\"}\n                alt={item.name}\n                className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n              />\n            </div>\n\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-medium mb-2 line-clamp-2\">{item.name}</h3>\n              <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">{item.description}</p>\n\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-lg font-bold\">฿{item.price?.toLocaleString()}</span>\n                {item.inStock ? (\n                  <Badge variant=\"default\">In Stock</Badge>\n                ) : (\n                  <Badge variant=\"destructive\">Out of Stock</Badge>\n                )}\n              </div>\n\n              <Button onClick={() => addToCart(item)} disabled={!item.inStock} className=\"w-full\" size=\"sm\">\n                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                Add to Cart\n              </Button>\n\n              <p className=\"text-xs text-gray-500 mt-2\">Added {new Date(item.addedAt).toLocaleDateString()}</p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n\n// Wishlist button component for product cards\nexport function WishlistButton({ product }: { product: Product }) {\n  const [isInWishlist, setIsInWishlist] = useState(false)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    checkWishlistStatus()\n  }, [product.id])\n\n  const checkWishlistStatus = () => {\n    try {\n      const saved = localStorage.getItem(\"wishlist\")\n      if (saved) {\n        const wishlist = JSON.parse(saved)\n        setIsInWishlist(wishlist.some((item: WishlistItem) => item.id === product.id))\n      }\n    } catch (error) {\n      console.error(\"Failed to check wishlist status:\", error)\n    }\n  }\n\n  const toggleWishlist = () => {\n    try {\n      const saved = localStorage.getItem(\"wishlist\")\n      let wishlist: WishlistItem[] = saved ? JSON.parse(saved) : []\n\n      if (isInWishlist) {\n        wishlist = wishlist.filter((item) => item.id !== product.id)\n        toast({\n          title: \"Removed from wishlist\",\n          description: `${product.name} has been removed from your wishlist`,\n        })\n      } else {\n        wishlist.push({\n          ...product,\n          addedAt: new Date().toISOString(),\n        })\n        toast({\n          title: \"Added to wishlist\",\n          description: `${product.name} has been added to your wishlist`,\n        })\n      }\n\n      localStorage.setItem(\"wishlist\", JSON.stringify(wishlist))\n      setIsInWishlist(!isInWishlist)\n    } catch (error) {\n      console.error(\"Failed to update wishlist:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to update wishlist\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={toggleWishlist}\n      className={`p-2 ${isInWishlist ? \"text-red-500\" : \"text-gray-400\"}`}\n    >\n      <Heart className={`h-4 w-4 ${isInWishlist ? \"fill-current\" : \"\"}`} />\n    </Button>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/ai-chat/EnhancedAIChatSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sentimentFilter' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":103,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSentimentFilter' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":103,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getSentimentColor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":326,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":326,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport {\n  MessageSquare,\n  Bot,\n  Brain,\n  BarChart3,\n  Users,\n  Zap,\n  Target,\n  TrendingUp,\n  Heart,\n  Frown,\n  Meh,\n  Smile,\n  Send,\n  Mic,\n  ImageIcon,\n  Settings,\n  Filter,\n  Search,\n  RefreshCw,\n  Star,\n  ThumbsUp,\n  ThumbsDown,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Lightbulb,\n  Sparkles,\n} from \"lucide-react\"\nimport { advancedAI, type CustomerInsight, type PersonalizedRecommendation } from \"@/lib/advanced-ai-features\"\n\ninterface AIConversation {\n  id: string\n  customer_id: string\n  customer_name: string\n  channel: \"facebook\" | \"messenger\" | \"live_chat\" | \"whatsapp\"\n  status: \"active\" | \"resolved\" | \"escalated\" | \"waiting\"\n  priority: \"urgent\" | \"high\" | \"normal\" | \"low\"\n  sentiment: \"positive\" | \"negative\" | \"neutral\"\n  confidence: number\n  ai_handled: boolean\n  human_takeover: boolean\n  created_at: string\n  last_message_at: string\n  message_count: number\n  resolution_time?: number\n  satisfaction_score?: number\n  tags: string[]\n}\n\ninterface AIMessage {\n  id: string\n  conversation_id: string\n  sender: \"user\" | \"ai\" | \"human\"\n  content: string\n  intent: string\n  sentiment: \"positive\" | \"negative\" | \"neutral\"\n  confidence: number\n  ai_suggestions: string[]\n  created_at: string\n  read: boolean\n  feedback?: \"helpful\" | \"not_helpful\"\n}\n\ninterface AIAnalytics {\n  total_conversations: number\n  ai_resolution_rate: number\n  average_response_time: number\n  customer_satisfaction: number\n  sentiment_breakdown: {\n    positive: number\n    negative: number\n    neutral: number\n  }\n  top_intents: Array<{ intent: string; count: number }>\n  performance_trends: Array<{ date: string; conversations: number; satisfaction: number }>\n}\n\nexport function EnhancedAIChatSystem() {\n  const [activeTab, setActiveTab] = useState(\"conversations\")\n  const [conversations, setConversations] = useState<AIConversation[]>([])\n  const [selectedConversation, setSelectedConversation] = useState<AIConversation | null>(null)\n  const [messages, setMessages] = useState<AIMessage[]>([])\n  const [analytics, setAnalytics] = useState<AIAnalytics | null>(null)\n  const [customerInsights, setCustomerInsights] = useState<CustomerInsight[]>([])\n  const [recommendations, setRecommendations] = useState<PersonalizedRecommendation[]>([])\n  const [loading, setLoading] = useState(true)\n  const [messageInput, setMessageInput] = useState(\"\")\n  const [aiEnabled, setAiEnabled] = useState(true)\n  const [autoResponse, setAutoResponse] = useState(true)\n  const [sentimentFilter, setSentimentFilter] = useState<string>(\"all\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    loadAIChatData()\n  }, [])\n\n  useEffect(() => {\n    if (selectedConversation) {\n      loadConversationMessages(selectedConversation.id)\n    }\n  }, [selectedConversation])\n\n  const loadAIChatData = async () => {\n    try {\n      setLoading(true)\n\n      // Simulate loading AI chat data\n      const mockConversations: AIConversation[] = [\n        {\n          id: \"conv_001\",\n          customer_id: \"cust_001\",\n          customer_name: \"สมชาย ใจดี\",\n          channel: \"facebook\",\n          status: \"active\",\n          priority: \"high\",\n          sentiment: \"positive\",\n          confidence: 0.85,\n          ai_handled: true,\n          human_takeover: false,\n          created_at: new Date().toISOString(),\n          last_message_at: new Date().toISOString(),\n          message_count: 8,\n          tags: [\"product_inquiry\", \"fabric_selection\"],\n        },\n        {\n          id: \"conv_002\",\n          customer_id: \"cust_002\",\n          customer_name: \"สมหญิง รักสวย\",\n          channel: \"messenger\",\n          status: \"escalated\",\n          priority: \"urgent\",\n          sentiment: \"negative\",\n          confidence: 0.92,\n          ai_handled: false,\n          human_takeover: true,\n          created_at: new Date(Date.now() - 3600000).toISOString(),\n          last_message_at: new Date(Date.now() - 1800000).toISOString(),\n          message_count: 15,\n          resolution_time: 45,\n          satisfaction_score: 2,\n          tags: [\"complaint\", \"delivery_issue\"],\n        },\n      ]\n\n      const mockAnalytics: AIAnalytics = {\n        total_conversations: 1247,\n        ai_resolution_rate: 78.5,\n        average_response_time: 2.3,\n        customer_satisfaction: 4.2,\n        sentiment_breakdown: {\n          positive: 65,\n          negative: 15,\n          neutral: 20,\n        },\n        top_intents: [\n          { intent: \"product_inquiry\", count: 342 },\n          { intent: \"order_status\", count: 198 },\n          { intent: \"fabric_selection\", count: 156 },\n          { intent: \"pricing\", count: 134 },\n          { intent: \"complaint\", count: 89 },\n        ],\n        performance_trends: Array.from({ length: 7 }, (_, i) => ({\n          date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0],\n          conversations: 150 + Math.floor(Math.random() * 100),\n          satisfaction: 3.8 + Math.random() * 1.2,\n        })),\n      }\n\n      setConversations(mockConversations)\n      setAnalytics(mockAnalytics)\n\n      // Load customer insights\n      const insights = await Promise.all(\n        mockConversations.map((conv) => advancedAI.generateCustomerInsights(conv.customer_id)),\n      )\n      setCustomerInsights(insights)\n\n      // Load recommendations\n      const recs = await advancedAI.generatePersonalizedRecommendations(\"cust_001\")\n      setRecommendations(recs)\n\n      if (mockConversations.length > 0) {\n        setSelectedConversation(mockConversations[0])\n      }\n    } catch (error) {\n      console.error(\"Failed to load AI chat data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadConversationMessages = async (conversationId: string) => {\n    try {\n      // Simulate loading messages with AI analysis\n      const mockMessages: AIMessage[] = [\n        {\n          id: \"msg_001\",\n          conversation_id: conversationId,\n          sender: \"user\",\n          content: \"สวัสดีครับ ผมสนใจผ้าคลุมโซฟาลายดอกไม้ครับ\",\n          intent: \"product_inquiry\",\n          sentiment: \"positive\",\n          confidence: 0.88,\n          ai_suggestions: [\"แนะนำสินค้า\", \"ขอข้อมูลเพิ่มเติม\", \"ส่งแคตตาล็อก\"],\n          created_at: new Date(Date.now() - 3600000).toISOString(),\n          read: true,\n        },\n        {\n          id: \"msg_002\",\n          conversation_id: conversationId,\n          sender: \"ai\",\n          content: \"สวัสดีครับ! ยินดีที่ได้รู้จักค่ะ ผ้าคลุมโซฟาลายดอกไม้ของเรามีหลายแบบให้เลือกเลยค่ะ คุณชอบโทนสีแบบไหนครับ?\",\n          intent: \"greeting_response\",\n          sentiment: \"positive\",\n          confidence: 0.95,\n          ai_suggestions: [],\n          created_at: new Date(Date.now() - 3580000).toISOString(),\n          read: true,\n          feedback: \"helpful\",\n        },\n      ]\n\n      setMessages(mockMessages)\n    } catch (error) {\n      console.error(\"Failed to load messages:\", error)\n    }\n  }\n\n  const handleSendMessage = async () => {\n    if (!messageInput.trim() || !selectedConversation) return\n\n    try {\n      // Analyze user message with AI\n      const nlpAnalysis = await advancedAI.analyzeText(messageInput)\n\n      const userMessage: AIMessage = {\n        id: `msg_${Date.now()}`,\n        conversation_id: selectedConversation.id,\n        sender: \"user\",\n        content: messageInput,\n        intent: nlpAnalysis.intent,\n        sentiment: nlpAnalysis.sentiment,\n        confidence: nlpAnalysis.confidence,\n        ai_suggestions: [],\n        created_at: new Date().toISOString(),\n        read: true,\n      }\n\n      setMessages((prev) => [...prev, userMessage])\n      setMessageInput(\"\")\n\n      // Generate AI response if enabled\n      if (aiEnabled && autoResponse) {\n        setTimeout(\n          async () => {\n            const aiResponse = await advancedAI.generateChatbotResponse(messageInput, {\n              customer_id: selectedConversation.customer_id,\n              conversation_history: messages.map((m) => ({\n                role: m.sender === \"user\" ? \"user\" : \"assistant\",\n                content: m.content,\n              })),\n            })\n\n            const aiMessage: AIMessage = {\n              id: `msg_${Date.now() + 1}`,\n              conversation_id: selectedConversation.id,\n              sender: \"ai\",\n              content: aiResponse.response,\n              intent: \"response\",\n              sentiment: \"neutral\",\n              confidence: aiResponse.confidence,\n              ai_suggestions: aiResponse.suggested_actions,\n              created_at: new Date().toISOString(),\n              read: false,\n            }\n\n            setMessages((prev) => [...prev, aiMessage])\n\n            // Check if human takeover is needed\n            if (aiResponse.escalate_to_human) {\n              setSelectedConversation((prev) =>\n                prev\n                  ? {\n                      ...prev,\n                      status: \"escalated\",\n                      human_takeover: true,\n                    }\n                  : null,\n              )\n            }\n          },\n          1000 + Math.random() * 2000,\n        )\n      }\n    } catch (error) {\n      console.error(\"Failed to send message:\", error)\n    }\n  }\n\n  const getSentimentIcon = (sentiment: string) => {\n    switch (sentiment) {\n      case \"positive\":\n        return <Smile className=\"w-4 h-4 text-green-600\" />\n      case \"negative\":\n        return <Frown className=\"w-4 h-4 text-red-600\" />\n      default:\n        return <Meh className=\"w-4 h-4 text-gray-600\" />\n    }\n  }\n\n  const getSentimentColor = (sentiment: string) => {\n    switch (sentiment) {\n      case \"positive\":\n        return \"ai-sentiment-positive\"\n      case \"negative\":\n        return \"ai-sentiment-negative\"\n      default:\n        return \"ai-sentiment-neutral\"\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800\"\n      case \"escalated\":\n        return \"bg-red-100 text-red-800\"\n      case \"resolved\":\n        return \"bg-blue-100 text-blue-800\"\n      default:\n        return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">กำลังโหลดระบบ AI Chat...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"ai-chat-gradient p-3 rounded-xl\">\n                <Brain className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Enhanced AI Chat System</h1>\n                <p className=\"text-sm text-muted-foreground\">ระบบแชท AI ขั้นสูงที่เหนือกว่า 365 Page</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" className=\"ai-analytics-card\">\n                  <Zap className=\"w-3 h-3 mr-1\" />\n                  AI Active: {analytics?.ai_resolution_rate}%\n                </Badge>\n                <Badge variant=\"outline\" className=\"ai-analytics-card\">\n                  <Clock className=\"w-3 h-3 mr-1\" />\n                  Avg Response: {analytics?.average_response_time}s\n                </Badge>\n                <Badge variant=\"outline\" className=\"ai-analytics-card\">\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  Satisfaction: {analytics?.customer_satisfaction}/5\n                </Badge>\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                ตั้งค่า AI\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"conversations\" className=\"flex items-center gap-2\">\n              <MessageSquare className=\"w-4 h-4\" />\n              การสนทนา\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Analytics\n            </TabsTrigger>\n            <TabsTrigger value=\"insights\" className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Customer Insights\n            </TabsTrigger>\n            <TabsTrigger value=\"recommendations\" className=\"flex items-center gap-2\">\n              <Target className=\"w-4 h-4\" />\n              AI Recommendations\n            </TabsTrigger>\n            <TabsTrigger value=\"automation\" className=\"flex items-center gap-2\">\n              <Bot className=\"w-4 h-4\" />\n              Automation\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Conversations Tab */}\n          <TabsContent value=\"conversations\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[800px]\">\n              {/* Conversations List */}\n              <Card className=\"ai-analytics-card\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">การสนทนาทั้งหมด</CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Filter className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <RefreshCw className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"relative flex-1\">\n                      <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"ค้นหาการสนทนา...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <ScrollArea className=\"h-[650px]\">\n                    <div className=\"space-y-2 p-4\">\n                      {conversations.map((conversation) => (\n                        <Card\n                          key={conversation.id}\n                          className={`cursor-pointer transition-all hover:shadow-md ${\n                            selectedConversation?.id === conversation.id ? \"ring-2 ring-primary bg-primary/5\" : \"\"\n                          }`}\n                          onClick={() => setSelectedConversation(conversation)}\n                        >\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start gap-3\">\n                              <Avatar className=\"w-10 h-10\">\n                                <AvatarFallback>\n                                  {conversation.customer_name\n                                    .split(\" \")\n                                    .map((n) => n[0])\n                                    .join(\"\")}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center gap-2 mb-1\">\n                                  <h4 className=\"font-medium text-sm truncate\">{conversation.customer_name}</h4>\n                                  {getSentimentIcon(conversation.sentiment)}\n                                </div>\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <Badge className={getStatusColor(conversation.status)} variant=\"secondary\">\n                                    {conversation.status}\n                                  </Badge>\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {conversation.channel}\n                                  </Badge>\n                                  {conversation.ai_handled && (\n                                    <Badge variant=\"outline\" className=\"text-xs bg-primary/10 text-primary\">\n                                      <Bot className=\"w-3 h-3 mr-1\" />\n                                      AI\n                                    </Badge>\n                                  )}\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {conversation.message_count} ข้อความ\n                                  </span>\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {new Date(conversation.last_message_at).toLocaleTimeString(\"th-TH\", {\n                                      hour: \"2-digit\",\n                                      minute: \"2-digit\",\n                                    })}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Chat Interface */}\n              <Card className=\"lg:col-span-2 ai-analytics-card\">\n                {selectedConversation ? (\n                  <>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar className=\"w-10 h-10\">\n                            <AvatarFallback>\n                              {selectedConversation.customer_name\n                                .split(\" \")\n                                .map((n) => n[0])\n                                .join(\"\")}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <h3 className=\"font-semibold\">{selectedConversation.customer_name}</h3>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge className={getStatusColor(selectedConversation.status)} variant=\"secondary\">\n                                {selectedConversation.status}\n                              </Badge>\n                              <div className=\"flex items-center gap-1\">\n                                {getSentimentIcon(selectedConversation.sentiment)}\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {Math.round(selectedConversation.confidence * 100)}% confidence\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Lightbulb className=\"w-4 h-4 mr-2\" />\n                            AI Suggestions\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Users className=\"w-4 h-4 mr-2\" />\n                            Escalate\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"flex flex-col h-[650px]\">\n                      {/* Messages */}\n                      <ScrollArea className=\"flex-1 pr-4\">\n                        <div className=\"space-y-4\">\n                          {messages.map((message) => (\n                            <div\n                              key={message.id}\n                              className={`flex ${message.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                            >\n                              <div className=\"max-w-[80%]\">\n                                <div\n                                  className={`px-4 py-3 ${\n                                    message.sender === \"user\"\n                                      ? \"ai-chat-bubble-user\"\n                                      : message.sender === \"ai\"\n                                        ? \"ai-chat-bubble-ai border\"\n                                        : \"bg-muted text-muted-foreground rounded-lg\"\n                                  }`}\n                                >\n                                  <p className=\"text-sm\">{message.content}</p>\n                                  {message.sender === \"ai\" && message.ai_suggestions.length > 0 && (\n                                    <div className=\"mt-2 flex flex-wrap gap-1\">\n                                      {message.ai_suggestions.map((suggestion, index) => (\n                                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                          {suggestion}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                  )}\n                                </div>\n                                <div className=\"flex items-center justify-between mt-1 px-1\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <span className=\"text-xs text-muted-foreground\">\n                                      {new Date(message.created_at).toLocaleTimeString(\"th-TH\", {\n                                        hour: \"2-digit\",\n                                        minute: \"2-digit\",\n                                      })}\n                                    </span>\n                                    {message.sender === \"ai\" && (\n                                      <div className=\"flex items-center gap-1\">\n                                        {getSentimentIcon(message.sentiment)}\n                                        <span className=\"text-xs text-muted-foreground\">{message.intent}</span>\n                                      </div>\n                                    )}\n                                  </div>\n                                  {message.sender === \"ai\" && (\n                                    <div className=\"flex items-center gap-1\">\n                                      <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                                        <ThumbsUp className=\"w-3 h-3\" />\n                                      </Button>\n                                      <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                                        <ThumbsDown className=\"w-3 h-3\" />\n                                      </Button>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                        <div ref={messagesEndRef} />\n                      </ScrollArea>\n\n                      {/* Message Input */}\n                      <div className=\"border-t pt-4 mt-4\">\n                        <div className=\"flex items-end gap-2\">\n                          <div className=\"flex-1\">\n                            <Textarea\n                              placeholder=\"พิมพ์ข้อความ...\"\n                              value={messageInput}\n                              onChange={(e) => setMessageInput(e.target.value)}\n                              rows={2}\n                              onKeyDown={(e) => {\n                                if (e.key === \"Enter\" && !e.shiftKey) {\n                                  e.preventDefault()\n                                  handleSendMessage()\n                                }\n                              }}\n                            />\n                          </div>\n                          <div className=\"flex flex-col gap-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Mic className=\"w-4 h-4\" />\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <ImageIcon className=\"w-4 h-4\" />\n                            </Button>\n                            <Button onClick={handleSendMessage} disabled={!messageInput.trim()}>\n                              <Send className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </>\n                ) : (\n                  <CardContent className=\"flex items-center justify-center h-[700px]\">\n                    <div className=\"text-center text-muted-foreground\">\n                      <MessageSquare className=\"w-12 h-12 mx-auto mb-4\" />\n                      <p>เลือกการสนทนาเพื่อเริ่มต้น</p>\n                    </div>\n                  </CardContent>\n                )}\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card className=\"ai-analytics-card\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">การสนทนาทั้งหมด</p>\n                      <p className=\"text-2xl font-bold\">{analytics?.total_conversations.toLocaleString()}</p>\n                    </div>\n                    <MessageSquare className=\"w-8 h-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"ai-analytics-card\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">AI Resolution Rate</p>\n                      <p className=\"text-2xl font-bold\">{analytics?.ai_resolution_rate}%</p>\n                    </div>\n                    <Bot className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <Progress value={analytics?.ai_resolution_rate} className=\"mt-2\" />\n                </CardContent>\n              </Card>\n\n              <Card className=\"ai-analytics-card\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">เวลาตอบสนองเฉลี่ย</p>\n                      <p className=\"text-2xl font-bold\">{analytics?.average_response_time}s</p>\n                    </div>\n                    <Clock className=\"w-8 h-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"ai-analytics-card\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">ความพึงพอใจ</p>\n                      <p className=\"text-2xl font-bold\">{analytics?.customer_satisfaction}/5</p>\n                    </div>\n                    <Star className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <div className=\"flex mt-2\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star\n                        key={star}\n                        className={`w-4 h-4 ${\n                          star <= Math.floor(analytics?.customer_satisfaction || 0)\n                            ? \"text-yellow-400 fill-current\"\n                            : \"text-gray-300\"\n                        }`}\n                      />\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sentiment Analysis */}\n            <Card className=\"ai-analytics-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"w-5 h-5\" />\n                  การวิเคราะห์อารมณ์ลูกค้า\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"ai-sentiment-positive rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-2\">\n                      <Smile className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-green-600\">{analytics?.sentiment_breakdown.positive}%</p>\n                    <p className=\"text-sm text-muted-foreground\">Positive</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"ai-sentiment-neutral rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-2\">\n                      <Meh className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-gray-600\">{analytics?.sentiment_breakdown.neutral}%</p>\n                    <p className=\"text-sm text-muted-foreground\">Neutral</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"ai-sentiment-negative rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-2\">\n                      <Frown className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-red-600\">{analytics?.sentiment_breakdown.negative}%</p>\n                    <p className=\"text-sm text-muted-foreground\">Negative</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Top Intents */}\n            <Card className=\"ai-analytics-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5\" />\n                  Intent ที่พบบ่อยที่สุด\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {analytics?.top_intents.map((intent, index) => (\n                    <div key={intent.intent} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                          <span className=\"text-sm font-medium text-primary\">{index + 1}</span>\n                        </div>\n                        <span className=\"font-medium capitalize\">{intent.intent.replace(\"_\", \" \")}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm text-muted-foreground\">{intent.count}</span>\n                        <div className=\"w-20 h-2 bg-muted rounded-full overflow-hidden\">\n                          <div\n                            className=\"h-full bg-primary rounded-full\"\n                            style={{\n                              width: `${(intent.count / (analytics?.top_intents[0]?.count || 1)) * 100}%`,\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Customer Insights Tab */}\n          <TabsContent value=\"insights\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {customerInsights.map((insight) => (\n                <Card key={insight.customer_id} className=\"ai-feature-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>Customer: {insight.customer_id}</span>\n                      <Badge\n                        className={`${\n                          insight.segment === \"high_value\"\n                            ? \"bg-green-100 text-green-800\"\n                            : insight.segment === \"at_risk\"\n                              ? \"bg-red-100 text-red-800\"\n                              : \"bg-blue-100 text-blue-800\"\n                        }`}\n                      >\n                        {insight.segment}\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Lifetime Value</p>\n                        <p className=\"text-lg font-semibold\">฿{insight.lifetime_value.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Engagement Score</p>\n                        <p className=\"text-lg font-semibold\">{insight.engagement_score}/100</p>\n                      </div>\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Churn Risk</p>\n                      <Progress value={insight.churn_probability * 100} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {Math.round(insight.churn_probability * 100)}% probability\n                      </p>\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Next Purchase Prediction</p>\n                      <p className=\"text-sm\">\n                        <Clock className=\"w-4 h-4 inline mr-1\" />\n                        {insight.next_purchase_prediction.days} วัน (\n                        {Math.round(insight.next_purchase_prediction.confidence * 100)}% confidence)\n                      </p>\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Preferred Categories</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {insight.behavioral_patterns.preferred_categories.map((category) => (\n                          <Badge key={category} variant=\"outline\" className=\"text-xs\">\n                            {category}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* AI Recommendations Tab */}\n          <TabsContent value=\"recommendations\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {recommendations.map((rec) => (\n                <Card key={rec.product_id} className=\"ai-feature-card ai-recommendation-glow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">{rec.product_name}</span>\n                      <Badge variant=\"outline\">\n                        <Sparkles className=\"w-3 h-3 mr-1\" />\n                        {Math.round(rec.confidence_score * 100)}%\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-lg font-semibold\">฿{rec.price.toLocaleString()}</span>\n                      {rec.discount && <Badge className=\"bg-red-100 text-red-800\">-{rec.discount}%</Badge>}\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Personalization Factors</p>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between text-xs\">\n                          <span>Purchase History</span>\n                          <span>{Math.round(rec.personalization_factors.purchase_history * 100)}%</span>\n                        </div>\n                        <Progress value={rec.personalization_factors.purchase_history * 100} className=\"h-1\" />\n\n                        <div className=\"flex justify-between text-xs\">\n                          <span>Browsing Behavior</span>\n                          <span>{Math.round(rec.personalization_factors.browsing_behavior * 100)}%</span>\n                        </div>\n                        <Progress value={rec.personalization_factors.browsing_behavior * 100} className=\"h-1\" />\n                      </div>\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Reasoning</p>\n                      <ul className=\"text-xs space-y-1\">\n                        {rec.reasoning.map((reason, index) => (\n                          <li key={index} className=\"flex items-start gap-1\">\n                            <CheckCircle className=\"w-3 h-3 text-green-600 mt-0.5 flex-shrink-0\" />\n                            {reason}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <Button className=\"w-full\" size=\"sm\">\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      ส่งแนะนำให้ลูกค้า\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Automation Tab */}\n          <TabsContent value=\"automation\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card className=\"ai-feature-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Bot className=\"w-5 h-5\" />\n                    AI Auto-Response Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Enable AI Responses</span>\n                    <Button\n                      variant={aiEnabled ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setAiEnabled(!aiEnabled)}\n                    >\n                      {aiEnabled ? \"Enabled\" : \"Disabled\"}\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span>Auto-Response</span>\n                    <Button\n                      variant={autoResponse ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setAutoResponse(!autoResponse)}\n                    >\n                      {autoResponse ? \"On\" : \"Off\"}\n                    </Button>\n                  </div>\n\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">Response Confidence Threshold</p>\n                    <Progress value={75} className=\"h-2\" />\n                    <p className=\"text-xs text-muted-foreground mt-1\">75% - High confidence responses only</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"ai-feature-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <AlertCircle className=\"w-5 h-5\" />\n                    Escalation Rules\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between p-2 border rounded\">\n                      <span className=\"text-sm\">Negative sentiment &gt; 80%</span>\n                      <Badge variant=\"outline\">Active</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between p-2 border rounded\">\n                      <span className=\"text-sm\">AI confidence &lt; 60%</span>\n                      <Badge variant=\"outline\">Active</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between p-2 border rounded\">\n                      <span className=\"text-sm\">Complaint keywords detected</span>\n                      <Badge variant=\"outline\">Active</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between p-2 border rounded\">\n                      <span className=\"text-sm\">VIP customer priority</span>\n                      <Badge variant=\"outline\">Active</Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"ai-feature-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Performance Optimization\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"ai-chat-gradient rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-2\">\n                      <Zap className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <p className=\"text-2xl font-bold\">2.3s</p>\n                    <p className=\"text-sm text-muted-foreground\">Avg Response Time</p>\n                    <p className=\"text-xs text-green-600\">↓ 15% from last week</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"ai-chat-gradient rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-2\">\n                      <Target className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <p className=\"text-2xl font-bold\">78.5%</p>\n                    <p className=\"text-sm text-muted-foreground\">AI Resolution Rate</p>\n                    <p className=\"text-xs text-green-600\">↑ 8% from last week</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"ai-chat-gradient rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-2\">\n                      <Star className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <p className=\"text-2xl font-bold\">4.2/5</p>\n                    <p className=\"text-sm text-muted-foreground\">Customer Satisfaction</p>\n                    <p className=\"text-xs text-green-600\">↑ 0.3 from last week</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/ai-collection-naming.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onNameSelected' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Sparkles, Loader2, Copy, Eye } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface AICollectionNamingProps {\n  imageUrl?: string\n  onNameSelected?: (name: { thai: string; english: string; reason: string; description: string }) => void\n}\n\nexport function AICollectionNaming({ imageUrl, onNameSelected }: AICollectionNamingProps) {\n  const [formData, setFormData] = useState({\n    imageUrl: imageUrl || \"\",\n    fabricType: \"\",\n    style: \"\",\n    colors: \"\",\n    description: \"\",\n  })\n  const [suggestions, setSuggestions] = useState(\"\")\n  const [analysis, setAnalysis] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [analysisLoading, setAnalysisLoading] = useState(false)\n  const [analysisType, setAnalysisType] = useState(\"comprehensive\")\n  const { toast } = useToast()\n\n  const generateNames = async () => {\n    if (!formData.imageUrl) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาใส่ URL รูปภาพ\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setLoading(true)\n    try {\n      const response = await fetch(\"/api/ai/collection-naming\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      })\n\n      if (!response.ok) {\n        throw new Error(\"Failed to generate names\")\n      }\n\n      const data = await response.json()\n      setSuggestions(data.suggestions)\n\n      toast({\n        title: \"สร้างชื่อคอลเลกชันสำเร็จ\",\n        description: \"AI ได้สร้างชื่อคอลเลกชันที่เหมาะสมแล้ว\",\n      })\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถสร้างชื่อคอลเลกชันได้\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const analyzeFabric = async () => {\n    if (!formData.imageUrl) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาใส่ URL รูปภาพ\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setAnalysisLoading(true)\n    try {\n      const response = await fetch(\"/api/ai/fabric-analysis\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          imageUrl: formData.imageUrl,\n          analysisType,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(\"Failed to analyze fabric\")\n      }\n\n      const data = await response.json()\n      setAnalysis(data.analysis)\n\n      toast({\n        title: \"วิเคราะห์ผ้าสำเร็จ\",\n        description: \"AI ได้วิเคราะห์ลายผ้าเรียบร้อยแล้ว\",\n      })\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถวิเคราะห์ผ้าได้\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setAnalysisLoading(false)\n    }\n  }\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text)\n    toast({\n      title: \"คัดลอกแล้ว\",\n      description: \"คัดลอกข้อความไปยังคลิปบอร์ดแล้ว\",\n    })\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5\" />\n            AI Collection Naming System\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Image URL Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"imageUrl\">URL รูปภาพลายผ้า</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"imageUrl\"\n                value={formData.imageUrl}\n                onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                placeholder=\"https://example.com/fabric-image.jpg\"\n                className=\"flex-1\"\n              />\n              {formData.imageUrl && (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => window.open(formData.imageUrl, \"_blank\")}>\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Additional Information */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fabricType\">ประเภทผ้า</Label>\n              <Select\n                value={formData.fabricType}\n                onValueChange={(value) => setFormData({ ...formData, fabricType: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"เลือกประเภทผ้า\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cotton\">ผ้าฝ้าย</SelectItem>\n                  <SelectItem value=\"linen\">ผ้าลินิน</SelectItem>\n                  <SelectItem value=\"velvet\">ผ้ากำมะหยี่</SelectItem>\n                  <SelectItem value=\"silk\">ผ้าไหม</SelectItem>\n                  <SelectItem value=\"polyester\">ผ้าโพลีเอสเตอร์</SelectItem>\n                  <SelectItem value=\"blend\">ผ้าผสม</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"style\">สไตล์</Label>\n              <Select value={formData.style} onValueChange={(value) => setFormData({ ...formData, style: value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"เลือกสไตล์\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"modern\">โมเดิร์น</SelectItem>\n                  <SelectItem value=\"classic\">คลาสสิก</SelectItem>\n                  <SelectItem value=\"vintage\">วินเทจ</SelectItem>\n                  <SelectItem value=\"minimal\">มินิมอล</SelectItem>\n                  <SelectItem value=\"luxury\">หรูหรา</SelectItem>\n                  <SelectItem value=\"casual\">สบายๆ</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"colors\">สีหลัก</Label>\n            <Input\n              id=\"colors\"\n              value={formData.colors}\n              onChange={(e) => setFormData({ ...formData, colors: e.target.value })}\n              placeholder=\"เช่น น้ำเงิน, ขาว, ทอง\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">คำอธิบายเพิ่มเติม</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              placeholder=\"อธิบายลักษณะพิเศษของลายผ้า...\"\n              rows={3}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"naming\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"naming\">สร้างชื่อคอลเลกชัน</TabsTrigger>\n          <TabsTrigger value=\"analysis\">วิเคราะห์ผ้า</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"naming\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>สร้างชื่อคอลเลกชัน</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button onClick={generateNames} disabled={loading || !formData.imageUrl} className=\"w-full\">\n                {loading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    กำลังสร้างชื่อ...\n                  </>\n                ) : (\n                  <>\n                    <Sparkles className=\"mr-2 h-4 w-4\" />\n                    สร้างชื่อคอลเลกชัน\n                  </>\n                )}\n              </Button>\n\n              {suggestions && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">ข้อเสนอแนะชื่อคอลเลกชัน</h3>\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => copyToClipboard(suggestions)}>\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <pre className=\"whitespace-pre-wrap text-sm\">{suggestions}</pre>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analysis\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>วิเคราะห์ลายผ้า</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>ประเภทการวิเคราะห์</Label>\n                <Select value={analysisType} onValueChange={setAnalysisType}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"comprehensive\">วิเคราะห์ครอบคลุม</SelectItem>\n                    <SelectItem value=\"pattern\">วิเคราะห์ลาย</SelectItem>\n                    <SelectItem value=\"color\">วิเคราะห์สี</SelectItem>\n                    <SelectItem value=\"style\">วิเคราะห์สไตล์</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button onClick={analyzeFabric} disabled={analysisLoading || !formData.imageUrl} className=\"w-full\">\n                {analysisLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    กำลังวิเคราะห์...\n                  </>\n                ) : (\n                  <>\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    วิเคราะห์ผ้า\n                  </>\n                )}\n              </Button>\n\n              {analysis && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">ผลการวิเคราะห์</h3>\n                    <div className=\"flex gap-2\">\n                      <Badge variant=\"secondary\">{analysisType}</Badge>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => copyToClipboard(analysis)}>\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <pre className=\"whitespace-pre-wrap text-sm\">{analysis}</pre>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/ai/AICustomerInsightsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'textAnalysis' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analyzeCustomerFeedback' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  Brain,\n  User,\n  TrendingUp,\n  TrendingDown,\n  Heart,\n  AlertTriangle,\n  MessageSquare,\n  Eye,\n  Target,\n  Zap,\n} from \"lucide-react\"\nimport { advancedAI, type CustomerInsight, type NLPAnalysis } from \"@/lib/advanced-ai-features\"\n\nexport default function AICustomerInsightsDashboard() {\n  const [customerInsights, setCustomerInsights] = useState<CustomerInsight[]>([])\n  const [selectedCustomer, setSelectedCustomer] = useState<CustomerInsight | null>(null)\n  const [textAnalysis, setTextAnalysis] = useState<NLPAnalysis | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadCustomerInsights()\n  }, [])\n\n  const loadCustomerInsights = async () => {\n    try {\n      setLoading(true)\n      const customerIds = [\"cust_001\", \"cust_002\", \"cust_003\", \"cust_004\", \"cust_005\"]\n\n      const insights = await Promise.all(customerIds.map((id) => advancedAI.generateCustomerInsights(id)))\n\n      setCustomerInsights(insights)\n      if (insights.length > 0) {\n        setSelectedCustomer(insights[0])\n      }\n    } catch (error) {\n      console.error(\"Error loading customer insights:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const analyzeCustomerFeedback = async (text: string) => {\n    try {\n      const analysis = await advancedAI.analyzeText(text)\n      setTextAnalysis(analysis)\n    } catch (error) {\n      console.error(\"Error analyzing text:\", error)\n    }\n  }\n\n  const getSegmentColor = (segment: CustomerInsight[\"segment\"]) => {\n    const colors = {\n      high_value: \"bg-purple-100 text-purple-800 border-purple-200\",\n      loyal: \"bg-green-100 text-green-800 border-green-200\",\n      at_risk: \"bg-red-100 text-red-800 border-red-200\",\n      new: \"bg-blue-100 text-blue-800 border-blue-200\",\n      dormant: \"bg-gray-100 text-gray-800 border-gray-200\",\n    }\n    return colors[segment]\n  }\n\n  const getSegmentIcon = (segment: CustomerInsight[\"segment\"]) => {\n    const icons = {\n      high_value: <Target className=\"w-4 h-4\" />,\n      loyal: <Heart className=\"w-4 h-4\" />,\n      at_risk: <AlertTriangle className=\"w-4 h-4\" />,\n      new: <User className=\"w-4 h-4\" />,\n      dormant: <Eye className=\"w-4 h-4\" />,\n    }\n    return icons[segment]\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">กำลังวิเคราะห์ข้อมูลลูกค้าด้วย AI...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary flex items-center gap-3\">\n            <Brain className=\"w-8 h-8\" />\n            AI Customer Insights\n          </h1>\n          <p className=\"text-gray-600 mt-1\">ข้อมูลเชิงลึกลูกค้าด้วย Artificial Intelligence</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button variant=\"outline\">\n            <MessageSquare className=\"w-4 h-4 mr-2\" />\n            วิเคราะห์ข้อความ\n          </Button>\n          <Button>\n            <Zap className=\"w-4 h-4 mr-2\" />\n            สร้าง Insights\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Customer List */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">ลูกค้าทั้งหมด</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {customerInsights.map((customer) => (\n                <div\n                  key={customer.customer_id}\n                  className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                    selectedCustomer?.customer_id === customer.customer_id\n                      ? \"border-primary bg-primary/5\"\n                      : \"border-gray-200 hover:border-gray-300\"\n                  }`}\n                  onClick={() => setSelectedCustomer(customer)}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium\">Customer {customer.customer_id.slice(-3)}</span>\n                    <Badge className={getSegmentColor(customer.segment)}>\n                      {getSegmentIcon(customer.segment)}\n                      <span className=\"ml-1 capitalize\">{customer.segment.replace(\"_\", \" \")}</span>\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    <div>CLV: ฿{customer.lifetime_value.toLocaleString()}</div>\n                    <div>Engagement: {customer.engagement_score}%</div>\n                  </div>\n                  <div className=\"mt-2\">\n                    <Progress value={customer.engagement_score} className=\"h-1\" />\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Customer Details */}\n        <div className=\"lg:col-span-2\">\n          {selectedCustomer && (\n            <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n                <TabsTrigger value=\"behavior\">พฤติกรรม</TabsTrigger>\n                <TabsTrigger value=\"predictions\">การพยากรณ์</TabsTrigger>\n                <TabsTrigger value=\"recommendations\">คำแนะนำ</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <User className=\"w-5 h-5\" />\n                        ข้อมูลลูกค้า\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span>กลุ่มลูกค้า</span>\n                        <Badge className={getSegmentColor(selectedCustomer.segment)}>\n                          {getSegmentIcon(selectedCustomer.segment)}\n                          <span className=\"ml-1 capitalize\">{selectedCustomer.segment.replace(\"_\", \" \")}</span>\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Customer Lifetime Value</span>\n                        <span className=\"font-bold text-green-600\">\n                          ฿{selectedCustomer.lifetime_value.toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Engagement Score</span>\n                        <div className=\"flex items-center gap-2\">\n                          <Progress value={selectedCustomer.engagement_score} className=\"w-20 h-2\" />\n                          <span className=\"font-medium\">{selectedCustomer.engagement_score}%</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>ความเสี่ยงการหายไป</span>\n                        <div className=\"flex items-center gap-2\">\n                          {selectedCustomer.churn_probability > 0.5 ? (\n                            <TrendingUp className=\"w-4 h-4 text-red-500\" />\n                          ) : (\n                            <TrendingDown className=\"w-4 h-4 text-green-500\" />\n                          )}\n                          <span\n                            className={`font-medium ${\n                              selectedCustomer.churn_probability > 0.5 ? \"text-red-600\" : \"text-green-600\"\n                            }`}\n                          >\n                            {Math.round(selectedCustomer.churn_probability * 100)}%\n                          </span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Target className=\"w-5 h-5\" />\n                        การพยากรณ์การซื้อครั้งถัดไป\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {selectedCustomer.next_purchase_prediction.days} วัน\n                        </div>\n                        <div className=\"text-sm text-blue-700\">คาดว่าจะซื้อครั้งถัดไป</div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm\">ความมั่นใจ</span>\n                          <span className=\"text-sm font-medium\">\n                            {Math.round(selectedCustomer.next_purchase_prediction.confidence * 100)}%\n                          </span>\n                        </div>\n                        <Progress value={selectedCustomer.next_purchase_prediction.confidence * 100} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium mb-2\">สินค้าที่น่าจะสนใจ</div>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {selectedCustomer.next_purchase_prediction.likely_products.map((product, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                              {product}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"behavior\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>รูปแบบพฤติกรรม</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <h4 className=\"font-medium mb-3\">หมวดหมู่ที่ชื่นชอบ</h4>\n                        <div className=\"space-y-2\">\n                          {selectedCustomer.behavioral_patterns.preferred_categories.map((category, index) => (\n                            <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                              <span className=\"capitalize\">{category}</span>\n                              <Badge variant=\"outline\">{Math.round((1 - index * 0.2) * 100)}%</Badge>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium mb-3\">ลักษณะการซื้อ</h4>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between\">\n                            <span>ความถี่ในการซื้อ</span>\n                            <Badge\n                              className={\n                                selectedCustomer.behavioral_patterns.shopping_frequency === \"high\"\n                                  ? \"bg-green-100 text-green-800\"\n                                  : selectedCustomer.behavioral_patterns.shopping_frequency === \"medium\"\n                                    ? \"bg-yellow-100 text-yellow-800\"\n                                    : \"bg-red-100 text-red-800\"\n                              }\n                            >\n                              {selectedCustomer.behavioral_patterns.shopping_frequency}\n                            </Badge>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>ความไวต่อราคา</span>\n                            <Badge\n                              className={\n                                selectedCustomer.behavioral_patterns.price_sensitivity === \"low\"\n                                  ? \"bg-green-100 text-green-800\"\n                                  : selectedCustomer.behavioral_patterns.price_sensitivity === \"medium\"\n                                    ? \"bg-yellow-100 text-yellow-800\"\n                                    : \"bg-red-100 text-red-800\"\n                              }\n                            >\n                              {selectedCustomer.behavioral_patterns.price_sensitivity}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"predictions\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>การพยากรณ์ด้วย AI</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Brain className=\"w-12 h-12 mx-auto mb-4\" />\n                      <p>การพยากรณ์ขั้นสูงจะแสดงที่นี่</p>\n                      <p className=\"text-sm\">รวมถึงการวิเคราะห์แนวโน้มและความเสี่ยง</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"recommendations\" className=\"space-y-6\">\n                <div className=\"grid gap-4\">\n                  {selectedCustomer.recommendations.map((rec, index) => (\n                    <Card key={index}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"font-medium\">{rec.product_name}</h4>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge className=\"bg-blue-100 text-blue-800\">\n                              {Math.round(rec.confidence_score * 100)}% มั่นใจ\n                            </Badge>\n                            <span className=\"font-bold text-green-600\">฿{rec.price.toLocaleString()}</span>\n                          </div>\n                        </div>\n                        <div className=\"text-sm text-gray-600 mb-3\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {rec.reasoning.map((reason, idx) => (\n                              <span key={idx} className=\"inline-block bg-gray-100 px-2 py-1 rounded text-xs\">\n                                {reason}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-5 gap-2 text-xs\">\n                          <div className=\"text-center\">\n                            <div className=\"font-medium\">ประวัติ</div>\n                            <div>{Math.round(rec.personalization_factors.purchase_history * 100)}%</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"font-medium\">พฤติกรรม</div>\n                            <div>{Math.round(rec.personalization_factors.browsing_behavior * 100)}%</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"font-medium\">กลุ่ม</div>\n                            <div>{Math.round(rec.personalization_factors.demographic * 100)}%</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"font-medium\">ฤดูกาล</div>\n                            <div>{Math.round(rec.personalization_factors.seasonal * 100)}%</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"font-medium\">ยอดนิยม</div>\n                            <div>{Math.round(rec.personalization_factors.trending * 100)}%</div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n            </Tabs>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/analytics/AdvancedAnalyticsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'COLORS' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport {\n  Line,\n  Bar,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\"\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Users,\n  ShoppingCart,\n  Package,\n  AlertTriangle,\n  Target,\n  Brain,\n  Download,\n  RefreshCw,\n  Eye,\n  BarChart3,\n  Activity,\n  Zap,\n} from \"lucide-react\"\nimport { advancedAnalytics, type AdvancedMetrics, type BusinessIntelligence } from \"@/lib/advanced-analytics-service\"\n\nconst COLORS = [\"#ec4899\", \"#f43f5e\", \"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"]\n\nexport default function AdvancedAnalyticsDashboard() {\n  const [activeTab, setActiveTab] = useState(\"overview\")\n  const [metrics, setMetrics] = useState<AdvancedMetrics | null>(null)\n  const [intelligence, setIntelligence] = useState<BusinessIntelligence | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [lastUpdated, setLastUpdated] = useState(new Date())\n\n  useEffect(() => {\n    loadDashboardData()\n  }, [])\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true)\n      const dashboardData = await advancedAnalytics.getRealTimeDashboard()\n      setMetrics(dashboardData.metrics)\n      setIntelligence(dashboardData.intelligence)\n      setLastUpdated(new Date(dashboardData.last_updated))\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleRefresh = async () => {\n    await loadDashboardData()\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"th-TH\", {\n      style: \"currency\",\n      currency: \"THB\",\n    }).format(amount)\n  }\n\n  const formatPercent = (value: number) => `${value > 0 ? \"+\" : \"\"}${value.toFixed(1)}%`\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case \"opportunity\":\n        return <TrendingUp className=\"w-5 h-5 text-green-600\" />\n      case \"warning\":\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n      case \"trend\":\n        return <Activity className=\"w-5 h-5 text-blue-600\" />\n      case \"anomaly\":\n        return <Zap className=\"w-5 h-5 text-purple-600\" />\n      default:\n        return <Brain className=\"w-5 h-5 text-gray-600\" />\n    }\n  }\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800\"\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800\"\n      case \"low\":\n        return \"bg-green-100 text-green-800\"\n      default:\n        return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Advanced Analytics Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">ระบบวิเคราะห์ข้อมูลขั้นสูงและ Business Intelligence</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <div className=\"text-sm text-gray-500\">อัปเดตล่าสุด: {lastUpdated.toLocaleTimeString(\"th-TH\")}</div>\n          <Button onClick={handleRefresh} variant=\"outline\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            รีเฟรช\n          </Button>\n          <Button>\n            <Download className=\"w-4 h-4 mr-2\" />\n            ส่งออกรายงาน\n          </Button>\n        </div>\n      </div>\n\n      {/* Critical Alerts */}\n      {intelligence?.kpi_alerts.filter((alert) => alert.status === \"critical\").length > 0 && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            <strong>แจ้งเตือนเร่งด่วน:</strong>{\" \"}\n            {intelligence.kpi_alerts.find((alert) => alert.status === \"critical\")?.message}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Key Metrics */}\n      {metrics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">รายได้</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(metrics.revenue.current)}</p>\n                  <div className=\"flex items-center mt-1\">\n                    {metrics.revenue.growth > 0 ? (\n                      <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"w-4 h-4 text-red-600 mr-1\" />\n                    )}\n                    <span\n                      className={`text-sm font-medium ${\n                        metrics.revenue.growth > 0 ? \"text-green-600\" : \"text-red-600\"\n                      }`}\n                    >\n                      {formatPercent(metrics.revenue.growth)}\n                    </span>\n                  </div>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <div className=\"mt-4\">\n                <Progress value={(metrics.revenue.current / metrics.revenue.forecast) * 100} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">เป้าหมาย: {formatCurrency(metrics.revenue.forecast)}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">ลูกค้าทั้งหมด</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{metrics.customers.total}</p>\n                  <div className=\"flex items-center mt-1\">\n                    <TrendingUp className=\"w-4 h-4 text-blue-600 mr-1\" />\n                    <span className=\"text-sm font-medium text-blue-600\">+{metrics.customers.new} ใหม่</span>\n                  </div>\n                </div>\n                <Users className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <div className=\"mt-4\">\n                <div className=\"text-xs text-gray-500\">\n                  <div>CLV: {formatCurrency(metrics.customers.lifetime_value)}</div>\n                  <div>Churn Rate: {metrics.customers.churn_rate}%</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">สินค้าขายได้</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{metrics.products.total_sold}</p>\n                  <div className=\"flex items-center mt-1\">\n                    <Package className=\"w-4 h-4 text-purple-600 mr-1\" />\n                    <span className=\"text-sm font-medium text-purple-600\">\n                      {metrics.products.low_stock_alerts.length} แจ้งเตือน\n                    </span>\n                  </div>\n                </div>\n                <ShoppingCart className=\"w-8 h-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">อัตราแปลง</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{metrics.operations.conversion_rate}%</p>\n                  <div className=\"flex items-center mt-1\">\n                    <BarChart3 className=\"w-4 h-4 text-orange-600 mr-1\" />\n                    <span className=\"text-sm font-medium text-orange-600\">\n                      AOV: {formatCurrency(metrics.operations.average_order_value)}\n                    </span>\n                  </div>\n                </div>\n                <Target className=\"w-8 h-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n          <TabsTrigger value=\"predictions\">การพยากรณ์</TabsTrigger>\n          <TabsTrigger value=\"cohorts\">Cohort Analysis</TabsTrigger>\n          <TabsTrigger value=\"abtests\">A/B Testing</TabsTrigger>\n          <TabsTrigger value=\"reports\">รายงาน</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Revenue & Performance Charts */}\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  แนวโน้มรายได้และกำไร\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ComposedChart\n                    data={[\n                      { month: \"ม.ค.\", revenue: 125000, profit: 50000, orders: 89 },\n                      { month: \"ก.พ.\", revenue: 142000, profit: 56800, orders: 95 },\n                      { month: \"มี.ค.\", revenue: 138000, profit: 55200, orders: 92 },\n                      { month: \"เม.ย.\", revenue: 156000, profit: 62400, orders: 104 },\n                      { month: \"พ.ค.\", revenue: 148000, profit: 59200, orders: 98 },\n                      { month: \"มิ.ย.\", revenue: 167000, profit: 66800, orders: 112 },\n                    ]}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip formatter={(value: any, name: string) => [formatCurrency(value), name]} />\n                    <Legend />\n                    <Bar dataKey=\"revenue\" fill=\"#ec4899\" name=\"รายได้\" />\n                    <Bar dataKey=\"profit\" fill=\"#f43f5e\" name=\"กำไร\" />\n                    <Line type=\"monotone\" dataKey=\"orders\" stroke=\"#3b82f6\" strokeWidth={2} name=\"คำสั่งซื้อ\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  การกระจายลูกค้า\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={[\n                        { name: \"ลูกค้าใหม่\", value: 45, color: \"#ec4899\" },\n                        { name: \"ลูกค้าเก่า\", value: 189, color: \"#3b82f6\" },\n                        { name: \"VIP\", value: 28, color: \"#10b981\" },\n                        { name: \"ไม่ใช้งาน\", value: 15, color: \"#6b7280\" },\n                      ]}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {[\n                        { name: \"ลูกค้าใหม่\", value: 45, color: \"#ec4899\" },\n                        { name: \"ลูกค้าเก่า\", value: 189, color: \"#3b82f6\" },\n                        { name: \"VIP\", value: 28, color: \"#10b981\" },\n                        { name: \"ไม่ใช้งาน\", value: 15, color: \"#6b7280\" },\n                      ].map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Top Products Performance */}\n          {metrics && (\n            <Card>\n              <CardHeader>\n                <CardTitle>สินค้าขายดี</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {metrics.products.top_performers.map((product, index) => (\n                    <div key={product.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-8 h-8 bg-pink-100 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-bold text-pink-600\">#{index + 1}</span>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{product.name}</h4>\n                          <p className=\"text-sm text-gray-600\">{product.sales} ชิ้น</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-pink-600\">{formatCurrency(product.revenue)}</div>\n                        <div className=\"flex items-center text-sm\">\n                          {product.growth > 0 ? (\n                            <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                          ) : (\n                            <TrendingDown className=\"w-3 h-3 text-red-600 mr-1\" />\n                          )}\n                          <span className={product.growth > 0 ? \"text-green-600\" : \"text-red-600\"}>\n                            {formatPercent(product.growth)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          {intelligence && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"w-5 h-5\" />\n                  AI-Powered Business Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {intelligence.insights.map((insight) => (\n                    <div key={insight.id} className=\"p-4 border rounded-lg\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-3\">\n                          {getInsightIcon(insight.type)}\n                          <div>\n                            <h4 className=\"font-semibold\">{insight.title}</h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">{insight.description}</p>\n                          </div>\n                        </div>\n                        <Badge className={getPriorityColor(insight.priority)}>\n                          {insight.priority === \"high\" ? \"สูง\" : insight.priority === \"medium\" ? \"กลาง\" : \"ต่ำ\"}\n                        </Badge>\n                      </div>\n                      <div className=\"grid md:grid-cols-3 gap-4 mb-4\">\n                        <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                          <div className=\"text-lg font-bold text-blue-600\">{insight.impact_score}/10</div>\n                          <div className=\"text-sm text-blue-700\">Impact Score</div>\n                        </div>\n                        <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                          <div className=\"text-lg font-bold text-green-600\">{insight.confidence}%</div>\n                          <div className=\"text-sm text-green-700\">ความมั่นใจ</div>\n                        </div>\n                        <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                          <div className=\"text-lg font-bold text-purple-600\">\n                            {new Date(insight.created_at).toLocaleDateString(\"th-TH\")}\n                          </div>\n                          <div className=\"text-sm text-purple-700\">วันที่ตรวจพบ</div>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <h5 className=\"font-medium\">การดำเนินการที่แนะนำ:</h5>\n                        <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-600\">\n                          {insight.recommended_actions.map((action, index) => (\n                            <li key={index}>{action}</li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div className=\"mt-4 pt-4 border-t\">\n                        <Button size=\"sm\" className=\"mr-2\">\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          ดูรายละเอียด\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\">\n                          ดำเนินการ\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"predictions\" className=\"space-y-4\">\n          {intelligence && (\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    การพยากรณ์รายได้\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg mb-4\">\n                    <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                      {formatCurrency(intelligence.predictions.next_month_revenue.amount)}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">รายได้เดือนหน้า (คาดการณ์)</div>\n                    <div className=\"text-sm text-green-600 mt-1\">\n                      ความมั่นใจ {intelligence.predictions.next_month_revenue.confidence}%\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-semibold\">ปัจจัยที่มีผลต่อการพยากรณ์:</h4>\n                    <ul className=\"space-y-1 text-sm text-gray-600\">\n                      {intelligence.predictions.next_month_revenue.factors.map((factor, index) => (\n                        <li key={index}>• {factor}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5\" />\n                    ความเสี่ยงลูกค้าหาย\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div className=\"text-center p-3 bg-red-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-red-600\">\n                        {intelligence.predictions.customer_churn.high_risk_count}\n                      </div>\n                      <div className=\"text-sm text-red-700\">เสี่ยงสูง</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-yellow-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">\n                        {intelligence.predictions.customer_churn.medium_risk_count}\n                      </div>\n                      <div className=\"text-sm text-yellow-700\">เสี่ยงกลาง</div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-semibold\">กลยุทธ์ป้องกัน:</h4>\n                    <ul className=\"space-y-1 text-sm text-gray-600\">\n                      {intelligence.predictions.customer_churn.prevention_strategies.map((strategy, index) => (\n                        <li key={index}>• {strategy}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  <Button className=\"w-full mt-4\">\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    สร้างแคมเปญ Win-back\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {intelligence && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"w-5 h-5\" />\n                  การพยากรณ์สต็อก\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {intelligence.predictions.inventory_needs.map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-semibold\">{item.product_name}</h4>\n                        <p className=\"text-sm text-gray-600\">จะหมดภายใน {item.days_until_stockout} วัน</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-orange-600\">แนะนำสั่ง: {item.recommended_order_quantity} ชิ้น</div>\n                        <Button size=\"sm\" className=\"mt-2\">\n                          สั่งซื้อเลย\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"cohorts\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Cohort Analysis - การวิเคราะห์กลุ่มลูกค้า</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <BarChart3 className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Cohort Analysis</h3>\n                <p className=\"text-gray-600\">การวิเคราะห์พฤติกรรมลูกค้าตามช่วงเวลาที่สมัครสมาชิก</p>\n                <Button className=\"mt-4\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  ดูรายละเอียด\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"abtests\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>A/B Testing Results</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <Activity className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">A/B Testing</h3>\n                <p className=\"text-gray-600\">ผลการทดสอบและเปรียบเทียบประสิทธิภาพ</p>\n                <Button className=\"mt-4\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  ดูผลการทดสอบ\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reports\" className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[\n              { title: \"รายงานยอดขายรายวัน\", icon: BarChart3, color: \"blue\", period: \"รายวัน\" },\n              { title: \"รายงานลูกค้า\", icon: Users, color: \"green\", period: \"รายเดือน\" },\n              { title: \"รายงานสินค้า\", icon: Package, color: \"purple\", period: \"รายเดือน\" },\n              { title: \"รายงานการเงิน\", icon: DollarSign, color: \"orange\", period: \"รายไตรมาส\" },\n              { title: \"รายงานประจำปี\", icon: Target, color: \"red\", period: \"รายปี\" },\n              { title: \"รายงานกำหนดเอง\", icon: Activity, color: \"gray\", period: \"ตามต้องการ\" },\n            ].map((report, index) => (\n              <Card key={index} className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <report.icon className={`w-8 h-8 text-${report.color}-600`} />\n                    <Badge className={`bg-${report.color}-100 text-${report.color}-800`}>{report.period}</Badge>\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">{report.title}</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">สรุปข้อมูลและการวิเคราะห์</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full bg-transparent\">\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    ดาวน์โหลด\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/analytics/CustomReportBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setGroupBy' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":31,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Plus,\n  Trash2,\n  Play,\n  Save,\n  Download,\n  BarChart3,\n  PieChart,\n  Table,\n  Calendar,\n  Filter,\n  Settings,\n} from \"lucide-react\"\nimport { customReportBuilder, type ReportFilter } from \"@/lib/custom-report-builder\"\n\nexport default function CustomReportBuilder() {\n  const [reportName, setReportName] = useState(\"\")\n  const [selectedMetrics, setSelectedMetrics] = useState<string[]>([])\n  const [filters, setFilters] = useState<ReportFilter[]>([])\n  const [groupBy, setGroupBy] = useState<string[]>([])\n  const [visualizationType, setVisualizationType] = useState<\"table\" | \"chart\" | \"dashboard\">(\"table\")\n  const [dateRange, setDateRange] = useState({ start: \"\", end: \"\" })\n  const [reportData, setReportData] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n\n  const availableMetrics = customReportBuilder.getAvailableMetrics()\n  const availableFilters = customReportBuilder.getAvailableFilters()\n  const reportTemplates = customReportBuilder.getReportTemplates()\n\n  const handleAddFilter = () => {\n    setFilters([\n      ...filters,\n      {\n        field: \"\",\n        operator: \"equals\",\n        value: \"\",\n        label: \"\",\n      },\n    ])\n  }\n\n  const handleUpdateFilter = (index: number, updates: Partial<ReportFilter>) => {\n    const newFilters = [...filters]\n    newFilters[index] = { ...newFilters[index], ...updates }\n    setFilters(newFilters)\n  }\n\n  const handleRemoveFilter = (index: number) => {\n    setFilters(filters.filter((_, i) => i !== index))\n  }\n\n  const handleMetricToggle = (metricId: string) => {\n    setSelectedMetrics((prev) => (prev.includes(metricId) ? prev.filter((id) => id !== metricId) : [...prev, metricId]))\n  }\n\n  const handleRunReport = async () => {\n    if (selectedMetrics.length === 0) {\n      alert(\"กรุณาเลือกตัวชี้วัดอย่างน้อย 1 รายการ\")\n      return\n    }\n\n    setLoading(true)\n    try {\n      const data = await customReportBuilder.buildReportQuery({\n        metrics: selectedMetrics,\n        filters,\n        groupBy,\n        dateRange: dateRange.start && dateRange.end ? dateRange : undefined,\n      })\n      setReportData(data)\n    } catch (error) {\n      console.error(\"Error running report:\", error)\n      alert(\"เกิดข้อผิดพลาดในการสร้างรายงาน\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSaveReport = async () => {\n    if (!reportName.trim()) {\n      alert(\"กรุณาใส่ชื่อรายงาน\")\n      return\n    }\n\n    try {\n      await customReportBuilder.saveReport({\n        name: reportName,\n        type: \"custom\",\n        filters: filters.reduce((acc, filter) => {\n          acc[filter.field] = { operator: filter.operator, value: filter.value }\n          return acc\n        }, {} as any),\n        metrics: selectedMetrics,\n        visualization: visualizationType,\n      })\n      alert(\"บันทึกรายงานเรียบร้อยแล้ว\")\n    } catch (error) {\n      console.error(\"Error saving report:\", error)\n      alert(\"เกิดข้อผิดพลาดในการบันทึกรายงาน\")\n    }\n  }\n\n  const handleLoadTemplate = (templateId: string) => {\n    const template = reportTemplates.find((t) => t.id === templateId)\n    if (template && template.config) {\n      setReportName(template.name)\n      setSelectedMetrics(template.config.metrics || [])\n      setVisualizationType(template.config.visualization || \"table\")\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Custom Report Builder</h1>\n          <p className=\"text-gray-600 mt-1\">สร้างรายงานแบบกำหนดเองตามความต้องการ</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button onClick={handleRunReport} disabled={loading}>\n            <Play className=\"w-4 h-4 mr-2\" />\n            {loading ? \"กำลังสร้าง...\" : \"รันรายงาน\"}\n          </Button>\n          <Button onClick={handleSaveReport} variant=\"outline\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            บันทึก\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Report Configuration */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"w-5 h-5\" />\n                การตั้งค่ารายงาน\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Report Name */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reportName\">ชื่อรายงาน</Label>\n                <Input\n                  id=\"reportName\"\n                  value={reportName}\n                  onChange={(e) => setReportName(e.target.value)}\n                  placeholder=\"ใส่ชื่อรายงาน\"\n                />\n              </div>\n\n              {/* Templates */}\n              <div className=\"space-y-2\">\n                <Label>เทมเพลตรายงาน</Label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {reportTemplates.map((template) => (\n                    <Button\n                      key={template.id}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleLoadTemplate(template.id)}\n                      className=\"justify-start text-left h-auto p-3\"\n                    >\n                      <div>\n                        <div className=\"font-medium\">{template.name}</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">{template.description}</div>\n                      </div>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Metrics Selection */}\n              <div className=\"space-y-3\">\n                <Label>ตัวชี้วัด (Metrics)</Label>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {availableMetrics.map((metric) => (\n                    <div key={metric.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={metric.id}\n                        checked={selectedMetrics.includes(metric.id)}\n                        onCheckedChange={() => handleMetricToggle(metric.id)}\n                      />\n                      <Label htmlFor={metric.id} className=\"text-sm font-normal\">\n                        {metric.name}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                {selectedMetrics.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {selectedMetrics.map((metricId) => {\n                      const metric = availableMetrics.find((m) => m.id === metricId)\n                      return (\n                        <Badge key={metricId} variant=\"secondary\">\n                          {metric?.name}\n                        </Badge>\n                      )\n                    })}\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Date Range */}\n              <div className=\"space-y-3\">\n                <Label className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4\" />\n                  ช่วงเวลา\n                </Label>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"startDate\" className=\"text-sm\">\n                      วันที่เริ่มต้น\n                    </Label>\n                    <Input\n                      id=\"startDate\"\n                      type=\"date\"\n                      value={dateRange.start}\n                      onChange={(e) => setDateRange((prev) => ({ ...prev, start: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"endDate\" className=\"text-sm\">\n                      วันที่สิ้นสุด\n                    </Label>\n                    <Input\n                      id=\"endDate\"\n                      type=\"date\"\n                      value={dateRange.end}\n                      onChange={(e) => setDateRange((prev) => ({ ...prev, end: e.target.value }))}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Filters */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Filter className=\"w-4 h-4\" />\n                    ตัวกรอง (Filters)\n                  </Label>\n                  <Button size=\"sm\" variant=\"outline\" onClick={handleAddFilter}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    เพิ่มตัวกรอง\n                  </Button>\n                </div>\n\n                {filters.map((filter, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">ตัวกรองที่ {index + 1}</span>\n                      <Button size=\"sm\" variant=\"ghost\" onClick={() => handleRemoveFilter(index)}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-3\">\n                      <Select\n                        value={filter.field}\n                        onValueChange={(value) => handleUpdateFilter(index, { field: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"เลือกฟิลด์\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {availableFilters.map((field) => (\n                            <SelectItem key={field.field} value={field.field}>\n                              {field.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n\n                      <Select\n                        value={filter.operator}\n                        onValueChange={(value) => handleUpdateFilter(index, { operator: value as any })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"เงื่อนไข\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"equals\">เท่ากับ</SelectItem>\n                          <SelectItem value=\"not_equals\">ไม่เท่ากับ</SelectItem>\n                          <SelectItem value=\"greater_than\">มากกว่า</SelectItem>\n                          <SelectItem value=\"less_than\">น้อยกว่า</SelectItem>\n                          <SelectItem value=\"contains\">ประกอบด้วย</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Input\n                        value={filter.value}\n                        onChange={(e) => handleUpdateFilter(index, { value: e.target.value })}\n                        placeholder=\"ค่าที่ต้องการ\"\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <Separator />\n\n              {/* Visualization Type */}\n              <div className=\"space-y-3\">\n                <Label>รูปแบบการแสดงผล</Label>\n                <div className=\"grid grid-cols-3 gap-3\">\n                  <Button\n                    variant={visualizationType === \"table\" ? \"default\" : \"outline\"}\n                    onClick={() => setVisualizationType(\"table\")}\n                    className=\"flex flex-col items-center p-4 h-auto\"\n                  >\n                    <Table className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm\">ตาราง</span>\n                  </Button>\n                  <Button\n                    variant={visualizationType === \"chart\" ? \"default\" : \"outline\"}\n                    onClick={() => setVisualizationType(\"chart\")}\n                    className=\"flex flex-col items-center p-4 h-auto\"\n                  >\n                    <BarChart3 className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm\">กราф</span>\n                  </Button>\n                  <Button\n                    variant={visualizationType === \"dashboard\" ? \"default\" : \"outline\"}\n                    onClick={() => setVisualizationType(\"dashboard\")}\n                    className=\"flex flex-col items-center p-4 h-auto\"\n                  >\n                    <PieChart className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm\">แดชบอร์ด</span>\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Report Preview */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>ตัวอย่างรายงาน</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {reportData ? (\n                <div className=\"space-y-4\">\n                  <div className=\"text-sm text-gray-600\">พบข้อมูล {reportData.summary?.total_records || 0} รายการ</div>\n\n                  {reportData.metrics && (\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium\">ตัวชี้วัด</h4>\n                      {Object.entries(reportData.metrics).map(([key, value]) => {\n                        const metric = availableMetrics.find((m) => m.id === key)\n                        return (\n                          <div key={key} className=\"flex justify-between text-sm\">\n                            <span>{metric?.name}</span>\n                            <span className=\"font-medium\">\n                              {metric?.format === \"currency\"\n                                ? new Intl.NumberFormat(\"th-TH\", { style: \"currency\", currency: \"THB\" }).format(\n                                    value as number,\n                                  )\n                                : metric?.format === \"percentage\"\n                                  ? `${(value as number).toFixed(1)}%`\n                                  : (value as number).toLocaleString(\"th-TH\")}\n                            </span>\n                          </div>\n                        )\n                      })}\n                    </div>\n                  )}\n\n                  <div className=\"pt-4 border-t\">\n                    <Button size=\"sm\" className=\"w-full\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      ส่งออกรายงาน\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <BarChart3 className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>กรุณารันรายงานเพื่อดูผลลัพธ์</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/analytics/RealTimePredictionDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":74,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from \"recharts\"\nimport { TrendingUp, TrendingDown, AlertTriangle, Brain, Target, Zap } from \"lucide-react\"\nimport {\n  enhancedPredictiveAnalytics,\n  type PredictionResult,\n  type AnomalyDetection,\n  type MarketTrend,\n} from \"@/lib/enhanced-predictive-analytics\"\n\nexport function RealTimePredictionDashboard() {\n  const [predictions, setPredictions] = useState<PredictionResult[]>([])\n  const [anomalies, setAnomalies] = useState<AnomalyDetection[]>([])\n  const [marketTrends, setMarketTrends] = useState<MarketTrend[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadData()\n    const interval = setInterval(loadData, 30000) // Update every 30 seconds\n    return () => clearInterval(interval)\n  }, [])\n\n  const loadData = async () => {\n    try {\n      const [recentPredictions, recentAnomalies, trends] = await Promise.all([\n        Promise.resolve(enhancedPredictiveAnalytics.getRecentPredictions(20)),\n        Promise.resolve(enhancedPredictiveAnalytics.getRecentAnomalies(10)),\n        Promise.resolve(enhancedPredictiveAnalytics.getMarketTrends()),\n      ])\n\n      setPredictions(recentPredictions)\n      setAnomalies(recentAnomalies)\n      setMarketTrends(trends)\n      setIsLoading(false)\n    } catch (error) {\n      console.error(\"Error loading prediction data:\", error)\n      setIsLoading(false)\n    }\n  }\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"destructive\"\n      case \"high\":\n        return \"destructive\"\n      case \"medium\":\n        return \"secondary\"\n      case \"low\":\n        return \"outline\"\n      default:\n        return \"outline\"\n    }\n  }\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case \"increasing\":\n        return <TrendingUp className=\"h-4 w-4 text-green-500\" />\n      case \"decreasing\":\n        return <TrendingDown className=\"h-4 w-4 text-red-500\" />\n      default:\n        return <div className=\"h-4 w-4 bg-gray-400 rounded-full\" />\n    }\n  }\n\n  const predictionChartData = predictions.slice(-10).map((pred, index) => ({\n    time: new Date(pred.timestamp).toLocaleTimeString(),\n    value: typeof pred.prediction === \"number\" ? pred.prediction : 0,\n    confidence: pred.confidence * 100,\n  }))\n\n  const confidenceData = predictions.slice(-5).map((pred) => ({\n    model: pred.modelId.replace(\"_\", \" \"),\n    confidence: pred.confidence * 100,\n  }))\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Models</CardTitle>\n            <Brain className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{enhancedPredictiveAnalytics.getModels().length}</div>\n            <p className=\"text-xs text-muted-foreground\">ML models running</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Predictions Today</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{predictions.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Real-time predictions</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Anomalies Detected</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{anomalies.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Requiring attention</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Confidence</CardTitle>\n            <Zap className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {predictions.length > 0\n                ? Math.round((predictions.reduce((sum, p) => sum + p.confidence, 0) / predictions.length) * 100)\n                : 0}\n              %\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Model accuracy</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"predictions\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"predictions\">Real-time Predictions</TabsTrigger>\n          <TabsTrigger value=\"anomalies\">Anomaly Detection</TabsTrigger>\n          <TabsTrigger value=\"trends\">Market Trends</TabsTrigger>\n          <TabsTrigger value=\"models\">Model Performance</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"predictions\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Prediction Timeline</CardTitle>\n                <CardDescription>Latest predictions from all models</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={predictionChartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" strokeWidth={2} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Model Confidence</CardTitle>\n                <CardDescription>Confidence levels by model</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={confidenceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"model\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"confidence\" fill=\"#82ca9d\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Predictions</CardTitle>\n              <CardDescription>Latest predictions from all active models</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {predictions.slice(-5).map((prediction) => (\n                  <div key={prediction.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"space-y-1\">\n                      <p className=\"font-medium\">{prediction.modelId.replace(\"_\", \" \")}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Prediction:{\" \"}\n                        {typeof prediction.prediction === \"number\"\n                          ? prediction.prediction.toFixed(2)\n                          : String(prediction.prediction)}\n                      </p>\n                    </div>\n                    <div className=\"text-right space-y-1\">\n                      <Progress value={prediction.confidence * 100} className=\"w-20\" />\n                      <p className=\"text-xs text-muted-foreground\">\n                        {Math.round(prediction.confidence * 100)}% confidence\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"anomalies\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Anomaly Detection</CardTitle>\n              <CardDescription>System anomalies and alerts</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {anomalies.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\">No anomalies detected</p>\n                ) : (\n                  anomalies.map((anomaly) => (\n                    <div key={anomaly.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={getSeverityColor(anomaly.severity) as any}>{anomaly.severity}</Badge>\n                          <p className=\"font-medium\">{anomaly.metric}</p>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{anomaly.description}</p>\n                      </div>\n                      <div className=\"text-right space-y-1\">\n                        <p className=\"text-sm font-medium\">{anomaly.value.toFixed(2)}</p>\n                        <p className=\"text-xs text-muted-foreground\">Threshold: {anomaly.threshold}</p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {marketTrends.map((trend) => (\n              <Card key={trend.category}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {getTrendIcon(trend.trend)}\n                    {trend.category.replace(\"_\", \" \")}\n                  </CardTitle>\n                  <CardDescription>\n                    {trend.trend} trend with {Math.round(trend.confidence * 100)}% confidence\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <p className=\"text-2xl font-bold\">{Math.round(trend.prediction.nextMonth)}%</p>\n                        <p className=\"text-xs text-muted-foreground\">Next Month</p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold\">{Math.round(trend.prediction.nextQuarter)}%</p>\n                        <p className=\"text-xs text-muted-foreground\">Next Quarter</p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold\">{Math.round(trend.prediction.nextYear)}%</p>\n                        <p className=\"text-xs text-muted-foreground\">Next Year</p>\n                      </div>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium mb-2\">Key Factors:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {trend.factors.map((factor) => (\n                          <Badge key={factor} variant=\"outline\" className=\"text-xs\">\n                            {factor.replace(\"_\", \" \")}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"models\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Model Performance</CardTitle>\n              <CardDescription>Active ML models and their performance metrics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {enhancedPredictiveAnalytics.getModels().map((model) => (\n                  <div key={model.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"space-y-1\">\n                      <p className=\"font-medium\">{model.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Type: {model.type} | Features: {model.features.length}\n                      </p>\n                    </div>\n                    <div className=\"text-right space-y-1\">\n                      <Progress value={model.accuracy * 100} className=\"w-20\" />\n                      <p className=\"text-xs text-muted-foreground\">{Math.round(model.accuracy * 100)}% accuracy</p>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => enhancedPredictiveAnalytics.retrainModel(model.id)}\n                      >\n                        Retrain\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/ar-vr/ARProductPreview.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3997,4047],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Slider } from \"@/components/ui/slider\"\nimport {\n  Camera,\n  RotateCcw,\n  Move3D,\n  Maximize,\n  Target,\n  Eye,\n  Settings,\n  Download,\n  Share,\n  AlertTriangle,\n  CheckCircle,\n  Zap,\n} from \"lucide-react\"\nimport { arvrEngine, type ARSession, type ARPlacementResult } from \"@/lib/ar-vr-engine\"\n\ninterface ARProductPreviewProps {\n  productId: string\n  productName: string\n  onPlacementComplete?: (result: ARPlacementResult) => void\n}\n\nexport default function ARProductPreview({ productId, productName, onPlacementComplete }: ARProductPreviewProps) {\n  const [arSession, setArSession] = useState<ARSession | null>(null)\n  const [isARActive, setIsARActive] = useState(false)\n  const [placementResult, setPlacementResult] = useState<ARPlacementResult | null>(null)\n  const [isSupported, setIsSupported] = useState(true)\n  const [loading, setLoading] = useState(false)\n  const [trackingStatus, setTrackingStatus] = useState<\"initializing\" | \"tracking\" | \"lost\">(\"initializing\")\n  const [productPosition, setProductPosition] = useState({ x: 0, y: 0, z: -2 })\n  const [productRotation, setProductRotation] = useState({ x: 0, y: 0, z: 0 })\n  const [productScale, setProductScale] = useState({ x: 1, y: 1, z: 1 })\n\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    checkARSupport()\n  }, [])\n\n  useEffect(() => {\n    if (arSession) {\n      // Simulate tracking updates\n      const interval = setInterval(() => {\n        const session = arvrEngine.getARSession(arSession.id)\n        if (session) {\n          setTrackingStatus(session.tracking_data.surface_detected ? \"tracking\" : \"initializing\")\n        }\n      }, 1000)\n\n      return () => clearInterval(interval)\n    }\n  }, [arSession])\n\n  const checkARSupport = () => {\n    const hasWebRTC = \"mediaDevices\" in navigator && \"getUserMedia\" in navigator.mediaDevices\n    const hasWebGL = !!document.createElement(\"canvas\").getContext(\"webgl\")\n    const hasDeviceOrientation = \"DeviceOrientationEvent\" in window\n\n    setIsSupported(hasWebRTC && hasWebGL && hasDeviceOrientation)\n  }\n\n  const startARSession = async () => {\n    try {\n      setLoading(true)\n      const sessionId = await arvrEngine.startARSession(productId, \"user_123\", \"living_room\", \"furniture_placement\")\n      const session = arvrEngine.getARSession(sessionId)\n\n      if (session && session.camera_stream) {\n        setArSession(session)\n        setIsARActive(true)\n\n        // Set up video stream\n        if (videoRef.current) {\n          videoRef.current.srcObject = session.camera_stream\n          videoRef.current.play()\n        }\n      }\n    } catch (error) {\n      console.error(\"Error starting AR session:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const stopARSession = () => {\n    if (arSession) {\n      arvrEngine.endARSession(arSession.id)\n      setArSession(null)\n      setIsARActive(false)\n      setTrackingStatus(\"initializing\")\n      setPlacementResult(null)\n    }\n  }\n\n  const placeProduct = async () => {\n    if (!arSession) return\n\n    try {\n      const result = await arvrEngine.placeProductInAR(arSession.id, productPosition, productRotation, productScale)\n      setPlacementResult(result)\n      onPlacementComplete?.(result)\n    } catch (error) {\n      console.error(\"Error placing product:\", error)\n    }\n  }\n\n  const captureScreenshot = async () => {\n    if (!arSession) return\n\n    try {\n      const screenshotUrl = await arvrEngine.captureARScreenshot(arSession.id)\n      // Handle screenshot (e.g., show download link)\n      console.log(\"Screenshot captured:\", screenshotUrl)\n    } catch (error) {\n      console.error(\"Error capturing screenshot:\", error)\n    }\n  }\n\n  const resetProductPosition = () => {\n    setProductPosition({ x: 0, y: 0, z: -2 })\n    setProductRotation({ x: 0, y: 0, z: 0 })\n    setProductScale({ x: 1, y: 1, z: 1 })\n  }\n\n  const getTrackingStatusColor = () => {\n    switch (trackingStatus) {\n      case \"tracking\":\n        return \"text-green-600 bg-green-50 border-green-200\"\n      case \"initializing\":\n        return \"text-yellow-600 bg-yellow-50 border-yellow-200\"\n      case \"lost\":\n        return \"text-red-600 bg-red-50 border-red-200\"\n      default:\n        return \"text-gray-600 bg-gray-50 border-gray-200\"\n    }\n  }\n\n  const getPlacementQualityColor = (quality: ARPlacementResult[\"placement_quality\"]) => {\n    switch (quality) {\n      case \"excellent\":\n        return \"text-green-600 bg-green-50 border-green-200\"\n      case \"good\":\n        return \"text-blue-600 bg-blue-50 border-blue-200\"\n      case \"fair\":\n        return \"text-yellow-600 bg-yellow-50 border-yellow-200\"\n      case \"poor\":\n        return \"text-red-600 bg-red-50 border-red-200\"\n      default:\n        return \"text-gray-600 bg-gray-50 border-gray-200\"\n    }\n  }\n\n  if (!isSupported) {\n    return (\n      <Alert className=\"border-red-200 bg-red-50\">\n        <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n        <AlertDescription className=\"text-red-800\">\n          <strong>ไม่รองรับ AR</strong> อุปกรณ์ของคุณไม่รองรับฟีเจอร์ Augmented Reality กรุณาใช้อุปกรณ์ที่รองรับ WebRTC และ WebGL\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-primary flex items-center justify-center gap-3\">\n          <Eye className=\"w-6 h-6\" />\n          AR Product Preview\n        </h2>\n        <p className=\"text-gray-600 mt-1\">ลองใส่ {productName} ในห้องของคุณแบบ Virtual</p>\n      </div>\n\n      {!isARActive ? (\n        /* AR Start Screen */\n        <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"space-y-6\">\n              <div className=\"w-20 h-20 bg-purple-100 rounded-full flex items-center justify-center mx-auto\">\n                <Camera className=\"w-10 h-10 text-purple-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">เริ่มต้นประสบการณ์ AR</h3>\n                <p className=\"text-gray-600 mb-4\">ดูว่า {productName} จะเข้ากับห้องของคุณได้อย่างไร</p>\n                <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-600 mb-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                    <span>วางสินค้าในห้องจริง</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                    <span>ปรับขนาดและมุมมอง</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                    <span>ลองสีและลวดลายต่างๆ</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                    <span>ถ่ายภาพและแชร์</span>\n                  </div>\n                </div>\n              </div>\n              <Button size=\"lg\" onClick={startARSession} disabled={loading} className=\"w-full max-w-xs\">\n                {loading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>กำลังเริ่มต้น...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Camera className=\"w-5 h-5\" />\n                    <span>เริ่ม AR Experience</span>\n                  </div>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        /* AR Active Interface */\n        <div className=\"space-y-4\">\n          {/* AR Viewport */}\n          <Card className=\"overflow-hidden\">\n            <div className=\"relative aspect-video bg-black\">\n              <video ref={videoRef} className=\"w-full h-full object-cover\" autoPlay playsInline muted />\n              <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full pointer-events-none\" />\n\n              {/* AR Overlay UI */}\n              <div className=\"absolute inset-0 pointer-events-none\">\n                {/* Tracking Status */}\n                <div className=\"absolute top-4 left-4\">\n                  <Badge className={getTrackingStatusColor()}>\n                    <Target className=\"w-3 h-3 mr-1\" />\n                    {trackingStatus === \"tracking\" && \"กำลังติดตาม\"}\n                    {trackingStatus === \"initializing\" && \"กำลังเริ่มต้น\"}\n                    {trackingStatus === \"lost\" && \"สูญเสียการติดตาม\"}\n                  </Badge>\n                </div>\n\n                {/* Instructions */}\n                <div className=\"absolute top-4 right-4 max-w-xs\">\n                  <div className=\"bg-black/70 text-white p-3 rounded-lg text-sm\">\n                    {trackingStatus === \"initializing\" && \"เลื่อนกล้องไปรอบๆ เพื่อสแกนพื้นผิว\"}\n                    {trackingStatus === \"tracking\" && \"แตะเพื่อวางสินค้า หรือใช้ปุ่มควบคุมด้านล่าง\"}\n                    {trackingStatus === \"lost\" && \"เลื่อนกล้องกลับไปยังพื้นผิวที่สแกนไว้\"}\n                  </div>\n                </div>\n\n                {/* Crosshair */}\n                {trackingStatus === \"tracking\" && (\n                  <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                    <div className=\"w-8 h-8 border-2 border-white rounded-full flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Control Buttons */}\n              <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2 pointer-events-auto\">\n                <Button\n                  size=\"sm\"\n                  onClick={placeProduct}\n                  disabled={trackingStatus !== \"tracking\"}\n                  className=\"bg-blue-500 hover:bg-blue-600\"\n                >\n                  <Target className=\"w-4 h-4 mr-1\" />\n                  วางสินค้า\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" onClick={captureScreenshot} className=\"bg-white/90\">\n                  <Camera className=\"w-4 h-4 mr-1\" />\n                  ถ่ายภาพ\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" onClick={resetProductPosition} className=\"bg-white/90\">\n                  <RotateCcw className=\"w-4 h-4 mr-1\" />\n                  รีเซ็ต\n                </Button>\n                <Button size=\"sm\" variant=\"destructive\" onClick={stopARSession}>\n                  ออก\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* AR Controls */}\n          <Tabs defaultValue=\"position\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"position\">ตำแหน่ง</TabsTrigger>\n              <TabsTrigger value=\"rotation\">การหมุน</TabsTrigger>\n              <TabsTrigger value=\"scale\">ขนาด</TabsTrigger>\n              <TabsTrigger value=\"settings\">ตั้งค่า</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"position\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Move3D className=\"w-5 h-5\" />\n                    ปรับตำแหน่ง\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">X (ซ้าย-ขวา)</label>\n                    <Slider\n                      value={[productPosition.x]}\n                      onValueChange={([value]) => setProductPosition((prev) => ({ ...prev, x: value }))}\n                      min={-3}\n                      max={3}\n                      step={0.1}\n                      className=\"mt-2\"\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">{productPosition.x.toFixed(1)}m</div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Y (ขึ้น-ลง)</label>\n                    <Slider\n                      value={[productPosition.y]}\n                      onValueChange={([value]) => setProductPosition((prev) => ({ ...prev, y: value }))}\n                      min={-2}\n                      max={2}\n                      step={0.1}\n                      className=\"mt-2\"\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">{productPosition.y.toFixed(1)}m</div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Z (หน้า-หลัง)</label>\n                    <Slider\n                      value={[productPosition.z]}\n                      onValueChange={([value]) => setProductPosition((prev) => ({ ...prev, z: value }))}\n                      min={-5}\n                      max={-0.5}\n                      step={0.1}\n                      className=\"mt-2\"\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">{Math.abs(productPosition.z).toFixed(1)}m</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"rotation\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <RotateCcw className=\"w-5 h-5\" />\n                    ปรับการหมุน\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">หมุนซ้าย-ขวา</label>\n                    <Slider\n                      value={[productRotation.y]}\n                      onValueChange={([value]) => setProductRotation((prev) => ({ ...prev, y: value }))}\n                      min={0}\n                      max={360}\n                      step={5}\n                      className=\"mt-2\"\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">{productRotation.y}°</div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">เอียงขึ้น-ลง</label>\n                    <Slider\n                      value={[productRotation.x]}\n                      onValueChange={([value]) => setProductRotation((prev) => ({ ...prev, x: value }))}\n                      min={-30}\n                      max={30}\n                      step={5}\n                      className=\"mt-2\"\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">{productRotation.x}°</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"scale\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Maximize className=\"w-5 h-5\" />\n                    ปรับขนาด\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">ขนาดโดยรวม</label>\n                    <Slider\n                      value={[productScale.x]}\n                      onValueChange={([value]) => setProductScale({ x: value, y: value, z: value })}\n                      min={0.5}\n                      max={2}\n                      step={0.1}\n                      className=\"mt-2\"\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">{Math.round(productScale.x * 100)}%</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"settings\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Settings className=\"w-5 h-5\" />\n                    ตั้งค่า AR\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      บันทึกการตั้งค่า\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Share className=\"w-4 h-4 mr-2\" />\n                      แชร์ AR View\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          {/* Placement Result */}\n          {placementResult && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5\" />\n                  ผลการวางสินค้า\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span>คุณภาพการวาง</span>\n                  <Badge className={getPlacementQualityColor(placementResult.placement_quality)}>\n                    {placementResult.placement_quality === \"excellent\" && \"ยอดเยี่ยม\"}\n                    {placementResult.placement_quality === \"good\" && \"ดี\"}\n                    {placementResult.placement_quality === \"fair\" && \"พอใช้\"}\n                    {placementResult.placement_quality === \"poor\" && \"ควรปรับปรุง\"}\n                  </Badge>\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>ความมั่นใจ</span>\n                    <span>{Math.round(placementResult.confidence * 100)}%</span>\n                  </div>\n                  <Progress value={placementResult.confidence * 100} className=\"h-2\" />\n                </div>\n                {placementResult.recommendations.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">คำแนะนำ:</h4>\n                    <ul className=\"space-y-1\">\n                      {placementResult.recommendations.map((rec, index) => (\n                        <li key={index} className=\"text-sm text-gray-600 flex items-start gap-2\">\n                          <span className=\"w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></span>\n                          {rec}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/ar-vr/VRShowroomViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'productId' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":53},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeVRShowroom'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeVRShowroom]","fix":{"range":[1377,1379],"text":"[initializeVRShowroom]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  HeadsetIcon as VrHeadset,\n  Camera,\n  RotateCcw,\n  Maximize,\n  Palette,\n  Home,\n  Bed,\n  Briefcase,\n  Sun,\n  Moon,\n  Lightbulb,\n  Eye,\n  Settings,\n} from \"lucide-react\"\nimport { arvrEngine, type VREnvironment } from \"@/lib/ar-vr-engine\"\n\ninterface VRShowroomViewerProps {\n  productId: string\n  productName: string\n  onEnvironmentChange?: (environmentId: string) => void\n}\n\nexport default function VRShowroomViewer({ productId, productName, onEnvironmentChange }: VRShowroomViewerProps) {\n  const [currentEnvironment, setCurrentEnvironment] = useState<VREnvironment | null>(null)\n  const [availableEnvironments, setAvailableEnvironments] = useState<VREnvironment[]>([])\n  const [selectedCameraPosition, setSelectedCameraPosition] = useState(0)\n  const [isVRMode, setIsVRMode] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  const viewerRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    initializeVRShowroom()\n  }, [])\n\n  const initializeVRShowroom = async () => {\n    try {\n      setLoading(true)\n\n      // Create default environments\n      const livingRoomId = await arvrEngine.createVRShowroom(\"living_room\")\n      const bedroomId = await arvrEngine.createVRShowroom(\"bedroom\")\n      const officeId = await arvrEngine.createVRShowroom(\"office\")\n\n      const environments = await Promise.all([\n        arvrEngine.getVREnvironment(livingRoomId),\n        arvrEngine.getVREnvironment(bedroomId),\n        arvrEngine.getVREnvironment(officeId),\n      ])\n\n      const validEnvironments = environments.filter((env): env is VREnvironment => env !== null)\n      setAvailableEnvironments(validEnvironments)\n\n      if (validEnvironments.length > 0) {\n        setCurrentEnvironment(validEnvironments[0])\n        onEnvironmentChange?.(validEnvironments[0].id)\n      }\n    } catch (error) {\n      console.error(\"Error initializing VR showroom:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const switchEnvironment = async (environmentId: string) => {\n    const environment = availableEnvironments.find((env) => env.id === environmentId)\n    if (environment) {\n      setCurrentEnvironment(environment)\n      setSelectedCameraPosition(0)\n      onEnvironmentChange?.(environmentId)\n    }\n  }\n\n  const changeLighting = async (lighting: VREnvironment[\"lighting\"]) => {\n    if (!currentEnvironment) return\n\n    await arvrEngine.updateVREnvironmentLighting(currentEnvironment.id, lighting)\n    setCurrentEnvironment((prev) => (prev ? { ...prev, lighting } : null))\n  }\n\n  const switchCameraPosition = (index: number) => {\n    if (currentEnvironment && index < currentEnvironment.camera_positions.length) {\n      setSelectedCameraPosition(index)\n    }\n  }\n\n  const enterVRMode = () => {\n    if (viewerRef.current && \"requestFullscreen\" in viewerRef.current) {\n      viewerRef.current.requestFullscreen()\n      setIsVRMode(true)\n    }\n  }\n\n  const exitVRMode = () => {\n    if (document.fullscreenElement) {\n      document.exitFullscreen()\n    }\n    setIsVRMode(false)\n  }\n\n  const getEnvironmentIcon = (type: VREnvironment[\"type\"]) => {\n    switch (type) {\n      case \"living_room\":\n        return <Home className=\"w-4 h-4\" />\n      case \"bedroom\":\n        return <Bed className=\"w-4 h-4\" />\n      case \"office\":\n        return <Briefcase className=\"w-4 h-4\" />\n      default:\n        return <Home className=\"w-4 h-4\" />\n    }\n  }\n\n  const getLightingIcon = (lighting: VREnvironment[\"lighting\"]) => {\n    switch (lighting) {\n      case \"natural\":\n        return <Sun className=\"w-4 h-4\" />\n      case \"warm\":\n        return <Lightbulb className=\"w-4 h-4\" />\n      case \"cool\":\n        return <Moon className=\"w-4 h-4\" />\n      default:\n        return <Sun className=\"w-4 h-4\" />\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">กำลังโหลด VR Showroom...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-primary flex items-center gap-3\">\n            <VrHeadset className=\"w-6 h-6\" />\n            VR Showroom\n          </h2>\n          <p className=\"text-gray-600 mt-1\">ดู {productName} ในห้องจำลองแบบ 3 มิติ</p>\n        </div>\n        <div className=\"flex items-center gap-2 mt-4 md:mt-0\">\n          <Select value={currentEnvironment?.id} onValueChange={switchEnvironment}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"เลือกห้อง\" />\n            </SelectTrigger>\n            <SelectContent>\n              {availableEnvironments.map((env) => (\n                <SelectItem key={env.id} value={env.id}>\n                  <div className=\"flex items-center gap-2\">\n                    {getEnvironmentIcon(env.type)}\n                    <span>{env.name}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" onClick={isVRMode ? exitVRMode : enterVRMode}>\n            <VrHeadset className=\"w-4 h-4 mr-2\" />\n            {isVRMode ? \"ออกจาก VR\" : \"โหมด VR\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* VR Viewer */}\n      <Card className=\"overflow-hidden\">\n        <div\n          ref={viewerRef}\n          className={`relative ${isVRMode ? \"h-screen\" : \"aspect-video\"} bg-gradient-to-b from-sky-200 to-sky-100`}\n        >\n          {/* 3D Scene Placeholder */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"w-32 h-32 bg-white/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <VrHeadset className=\"w-16 h-16 text-white/60\" />\n              </div>\n              <p className=\"text-white/80 text-lg font-medium\">\n                {currentEnvironment?.name} - {productName}\n              </p>\n              <p className=\"text-white/60 text-sm mt-1\">\n                มุมมอง: {currentEnvironment?.camera_positions[selectedCameraPosition]?.name}\n              </p>\n            </div>\n          </div>\n\n          {/* VR Controls Overlay */}\n          <div className=\"absolute inset-0 pointer-events-none\">\n            {/* Environment Info */}\n            <div className=\"absolute top-4 left-4\">\n              <Badge className=\"bg-black/50 text-white border-white/20\">\n                {getEnvironmentIcon(currentEnvironment?.type || \"living_room\")}\n                <span className=\"ml-1\">{currentEnvironment?.name}</span>\n              </Badge>\n            </div>\n\n            {/* Lighting Info */}\n            <div className=\"absolute top-4 right-4\">\n              <Badge className=\"bg-black/50 text-white border-white/20\">\n                {getLightingIcon(currentEnvironment?.lighting || \"natural\")}\n                <span className=\"ml-1 capitalize\">{currentEnvironment?.lighting}</span>\n              </Badge>\n            </div>\n\n            {/* Camera Controls */}\n            <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2 pointer-events-auto\">\n              {currentEnvironment?.camera_positions.map((position, index) => (\n                <Button\n                  key={index}\n                  size=\"sm\"\n                  variant={selectedCameraPosition === index ? \"default\" : \"outline\"}\n                  onClick={() => switchCameraPosition(index)}\n                  className={selectedCameraPosition === index ? \"bg-blue-500\" : \"bg-white/90\"}\n                >\n                  <Camera className=\"w-4 h-4 mr-1\" />\n                  {position.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* VR Controls */}\n      <Tabs defaultValue=\"environment\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"environment\">สภาพแวดล้อม</TabsTrigger>\n          <TabsTrigger value=\"lighting\">แสงสว่าง</TabsTrigger>\n          <TabsTrigger value=\"camera\">มุมมอง</TabsTrigger>\n          <TabsTrigger value=\"settings\">ตั้งค่า</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"environment\" className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            {availableEnvironments.map((env) => (\n              <Card\n                key={env.id}\n                className={`cursor-pointer transition-colors ${\n                  currentEnvironment?.id === env.id ? \"border-primary bg-primary/5\" : \"hover:border-gray-300\"\n                }`}\n                onClick={() => switchEnvironment(env.id)}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    {getEnvironmentIcon(env.type)}\n                    <h3 className=\"font-medium\">{env.name}</h3>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    <div>เฟอร์นิเจอร์: {env.furniture.length} ชิ้น</div>\n                    <div>มุมมอง: {env.camera_positions.length} มุม</div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"lighting\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {([\"natural\", \"warm\", \"cool\", \"dramatic\"] as const).map((lighting) => (\n              <Button\n                key={lighting}\n                variant={currentEnvironment?.lighting === lighting ? \"default\" : \"outline\"}\n                onClick={() => changeLighting(lighting)}\n                className=\"h-20 flex-col\"\n              >\n                {getLightingIcon(lighting)}\n                <span className=\"mt-2 capitalize\">{lighting}</span>\n              </Button>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"camera\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {currentEnvironment?.camera_positions.map((position, index) => (\n              <Button\n                key={index}\n                variant={selectedCameraPosition === index ? \"default\" : \"outline\"}\n                onClick={() => switchCameraPosition(index)}\n                className=\"h-20 flex-col\"\n              >\n                <Camera className=\"w-6 h-6\" />\n                <span className=\"mt-2\">{position.name}</span>\n              </Button>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"w-5 h-5\" />\n                ตั้งค่า VR\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button variant=\"outline\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  ดูแบบ 360°\n                </Button>\n                <Button variant=\"outline\">\n                  <Maximize className=\"w-4 h-4 mr-2\" />\n                  เต็มจอ\n                </Button>\n                <Button variant=\"outline\">\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  รีเซ็ตมุมมอง\n                </Button>\n                <Button variant=\"outline\">\n                  <Palette className=\"w-4 h-4 mr-2\" />\n                  เปลี่ยนสี\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Environment Details */}\n      {currentEnvironment && (\n        <Card>\n          <CardHeader>\n            <CardTitle>รายละเอียดห้อง</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-medium mb-2\">เฟอร์นิเจอร์ในห้อง</h4>\n                <div className=\"space-y-1\">\n                  {currentEnvironment.furniture.map((item, index) => (\n                    <div key={index} className=\"text-sm text-gray-600 flex items-center gap-2\">\n                      <span className=\"w-2 h-2 bg-blue-500 rounded-full\"></span>\n                      <span className=\"capitalize\">{item.type.replace(\"_\", \" \")}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-medium mb-2\">วัสดุและพื้นผิว</h4>\n                <div className=\"space-y-1 text-sm text-gray-600\">\n                  <div>พื้น: Hardwood</div>\n                  <div>ผนัง: Modern Paint</div>\n                  <div>เพดาน: White Finish</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/auth/AuthGuard.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":114,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3400,3446],"text":"You don&apos;t have permission to access this area."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3400,3446],"text":"You don&lsquo;t have permission to access this area."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3400,3446],"text":"You don&#39;t have permission to access this area."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3400,3446],"text":"You don&rsquo;t have permission to access this area."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Authentication Guard Component\n// Provides client-side route protection and role-based access control\n\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useEffect, useState } from \"react\"\nimport { useRouter, usePathname } from \"next/navigation\"\nimport { useAuthEnhanced } from \"@/hooks/use-auth-enhanced\"\nimport { Loader2, Shield, AlertTriangle } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\n\ninterface AuthGuardProps {\n  children: React.ReactNode\n  requireAuth?: boolean\n  requireRole?: \"admin\" | \"staff\" | \"customer\"\n  fallback?: React.ReactNode\n  redirectTo?: string\n}\n\nexport function AuthGuard({\n  children,\n  requireAuth = false,\n  requireRole,\n  fallback,\n  redirectTo = \"/login\",\n}: AuthGuardProps) {\n  const router = useRouter()\n  const pathname = usePathname()\n  const { user, isLoading, isAuthenticated, isAdmin, isStaff, error } = useAuthEnhanced()\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    if (isLoading) return\n\n    // If authentication is not required, render children\n    if (!requireAuth && !requireRole) {\n      setShouldRender(true)\n      return\n    }\n\n    // Check authentication requirement\n    if (requireAuth && !isAuthenticated) {\n      const loginUrl = `${redirectTo}?redirect=${encodeURIComponent(pathname)}`\n      router.push(loginUrl)\n      return\n    }\n\n    // Check role requirement\n    if (requireRole && user) {\n      let hasRequiredRole = false\n\n      switch (requireRole) {\n        case \"admin\":\n          hasRequiredRole = isAdmin\n          break\n        case \"staff\":\n          hasRequiredRole = isStaff\n          break\n        case \"customer\":\n          hasRequiredRole = isAuthenticated\n          break\n      }\n\n      if (!hasRequiredRole) {\n        router.push(\"/\")\n        return\n      }\n    }\n\n    setShouldRender(true)\n  }, [isLoading, isAuthenticated, user, requireAuth, requireRole, router, pathname, redirectTo, isAdmin, isStaff])\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      fallback || (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n          <div className=\"text-center\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-primary mx-auto mb-4\" />\n            <p className=\"text-gray-600\">Loading...</p>\n          </div>\n        </div>\n      )\n    )\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"max-w-md w-full mx-4\">\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>Authentication Error: {error.message}</AlertDescription>\n          </Alert>\n          <div className=\"mt-4 text-center\">\n            <Button onClick={() => router.push(\"/login\")}>Go to Login</Button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Show access denied for role-based restrictions\n  if (requireRole && user && !shouldRender) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center max-w-md mx-4\">\n          <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-4\">You don't have permission to access this area.</p>\n          <Button onClick={() => router.push(\"/\")} variant=\"outline\">\n            Go Home\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  // Show authentication required\n  if (requireAuth && !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center max-w-md mx-4\">\n          <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Authentication Required</h2>\n          <p className=\"text-gray-600 mb-4\">Please log in to access this area.</p>\n          <Button onClick={() => router.push(redirectTo)}>Go to Login</Button>\n        </div>\n      </div>\n    )\n  }\n\n  // Render children if all checks pass\n  return shouldRender ? <>{children}</> : null\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/communication/CustomerSupportDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [dateRange, loadDashboardData]","fix":{"range":[1013,1024],"text":"[dateRange, loadDashboardData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  MessageSquare,\n  Clock,\n  CheckCircle,\n  Users,\n  TrendingUp,\n  TrendingDown,\n  Phone,\n  Mail,\n  Facebook,\n  BarChart3,\n  Activity,\n} from \"lucide-react\"\nimport { communicationHub, type Agent } from \"@/lib/unified-communication-hub\"\n\nexport function CustomerSupportDashboard() {\n  const [analytics, setAnalytics] = useState<any>(null)\n  const [agents, setAgents] = useState<Agent[]>([])\n  const [loading, setLoading] = useState(true)\n  const [dateRange, setDateRange] = useState(\"7d\")\n\n  useEffect(() => {\n    loadDashboardData()\n  }, [dateRange])\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true)\n\n      const endDate = new Date()\n      const startDate = new Date()\n\n      switch (dateRange) {\n        case \"1d\":\n          startDate.setDate(endDate.getDate() - 1)\n          break\n        case \"7d\":\n          startDate.setDate(endDate.getDate() - 7)\n          break\n        case \"30d\":\n          startDate.setDate(endDate.getDate() - 30)\n          break\n        case \"90d\":\n          startDate.setDate(endDate.getDate() - 90)\n          break\n      }\n\n      const [analyticsData, agentsData] = await Promise.all([\n        communicationHub.getCommunicationAnalytics({\n          start: startDate.toISOString(),\n          end: endDate.toISOString(),\n        }),\n        communicationHub.getAvailableAgents(),\n      ])\n\n      setAnalytics(analyticsData)\n      setAgents(agentsData.agents)\n    } catch (error) {\n      console.error(\"Failed to load dashboard data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case \"email\":\n        return <Mail className=\"w-4 h-4\" />\n      case \"sms\":\n        return <Phone className=\"w-4 h-4\" />\n      case \"facebook\":\n        return <Facebook className=\"w-4 h-4\" />\n      case \"live_chat\":\n        return <MessageSquare className=\"w-4 h-4\" />\n      default:\n        return <MessageSquare className=\"w-4 h-4\" />\n    }\n  }\n\n  const formatTime = (seconds: number) => {\n    if (seconds < 60) return `${seconds} วินาที`\n    if (seconds < 3600) return `${Math.floor(seconds / 60)} นาที`\n    return `${Math.floor(seconds / 3600)} ชั่วโมง ${Math.floor((seconds % 3600) / 60)} นาที`\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"online\":\n        return \"bg-green-100 text-green-800\"\n      case \"away\":\n        return \"bg-yellow-100 text-yellow-800\"\n      case \"busy\":\n        return \"bg-red-100 text-red-800\"\n      case \"offline\":\n        return \"bg-gray-100 text-gray-800\"\n      default:\n        return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">กำลังโหลดข้อมูล Dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary flex items-center gap-3\">\n            <Activity className=\"w-8 h-8\" />\n            Customer Support Dashboard\n          </h1>\n          <p className=\"text-gray-600 mt-1\">ภาพรวมการให้บริการลูกค้าและประสิทธิภาพทีม</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Select value={dateRange} onValueChange={setDateRange}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"1d\">วันนี้</SelectItem>\n              <SelectItem value=\"7d\">7 วันที่แล้ว</SelectItem>\n              <SelectItem value=\"30d\">30 วันที่แล้ว</SelectItem>\n              <SelectItem value=\"90d\">90 วันที่แล้ว</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\">\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            ส่งออกรายงาน\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      {analytics && (\n        <div className=\"grid gap-6 md:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">ข้อความทั้งหมด</CardTitle>\n              <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {analytics.message_volume.reduce((sum: number, item: any) => sum + item.count, 0).toLocaleString()}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                <TrendingUp className=\"w-3 h-3 inline mr-1\" />\n                +12% จากเมื่อวาน\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">เวลาตอบสนองเฉลี่ย</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatTime(analytics.response_times.avg)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                <TrendingDown className=\"w-3 h-3 inline mr-1 text-green-600\" />\n                -8% จากเมื่อวาน\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">อัตราการแก้ไข</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(analytics.resolution_rates.rate * 100).toFixed(1)}%</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {analytics.resolution_rates.resolved}/{analytics.resolution_rates.total} เคส\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">เจ้าหน้าที่ออนไลน์</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{agents.filter((a) => a.status === \"online\").length}</div>\n              <p className=\"text-xs text-muted-foreground\">จากทั้งหมด {agents.length} คน</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n          <TabsTrigger value=\"channels\">ช่องทางการสื่อสาร</TabsTrigger>\n          <TabsTrigger value=\"agents\">ทีมงาน</TabsTrigger>\n          <TabsTrigger value=\"performance\">ประสิทธิภาพ</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {analytics && (\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              {/* Message Volume Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    ปริมาณข้อความตามช่องทาง\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {analytics.channel_performance.map((channel: any) => (\n                      <div key={channel.channel} className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            {getChannelIcon(channel.channel)}\n                            <span className=\"capitalize\">{channel.channel}</span>\n                          </div>\n                          <span className=\"font-medium\">{channel.messages.toLocaleString()}</span>\n                        </div>\n                        <Progress\n                          value={\n                            (channel.messages /\n                              Math.max(...analytics.channel_performance.map((c: any) => c.messages))) *\n                            100\n                          }\n                          className=\"h-2\"\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Response Time Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"w-5 h-5\" />\n                    การวิเคราะห์เวลาตอบสนอง\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {formatTime(analytics.response_times.avg)}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">เฉลี่ย</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {formatTime(analytics.response_times.median)}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">มัธยฐาน</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-orange-600\">\n                          {formatTime(analytics.response_times.p95)}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">95th Percentile</div>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>เป้าหมาย: 30 นาที</span>\n                        <span className=\"text-green-600\">✓ บรรลุเป้าหมาย</span>\n                      </div>\n                      <Progress value={75} className=\"h-2\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"channels\" className=\"space-y-6\">\n          {analytics && (\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n              {analytics.channel_performance.map((channel: any) => (\n                <Card key={channel.channel}>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      {getChannelIcon(channel.channel)}\n                      <span className=\"capitalize\">{channel.channel}</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-primary\">{channel.messages.toLocaleString()}</div>\n                        <div className=\"text-sm text-gray-600\">ข้อความ</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{formatTime(channel.avg_response_time)}</div>\n                        <div className=\"text-sm text-gray-600\">เวลาตอบสนอง</div>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>ประสิทธิภาพ</span>\n                        <span>{((1 - channel.avg_response_time / 3600) * 100).toFixed(1)}%</span>\n                      </div>\n                      <Progress value={(1 - channel.avg_response_time / 3600) * 100} className=\"h-2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"agents\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            {/* Agent Status Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  สถานะทีมงาน\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                  {[\"online\", \"away\", \"busy\", \"offline\"].map((status) => (\n                    <div key={status} className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold\">\n                        {agents.filter((agent) => agent.status === status).length}\n                      </div>\n                      <Badge className={getStatusColor(status)} variant=\"secondary\">\n                        {status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Agent Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle>ประสิทธิภาพเจ้าหน้าที่</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {analytics?.agent_performance.map((agent: any) => (\n                    <div key={agent.agent_id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"font-semibold text-primary\">\n                            {agent.name\n                              .split(\" \")\n                              .map((n: string) => n[0])\n                              .join(\"\")}\n                          </span>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{agent.name}</h4>\n                          <p className=\"text-sm text-gray-600\">{agent.conversations} การสนทนา</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-2xl font-bold text-yellow-600\">{agent.avg_rating.toFixed(1)}</span>\n                          <span className=\"text-sm text-gray-600\">/ 5.0</span>\n                        </div>\n                        <div className=\"flex items-center gap-1 mt-1\">\n                          {[1, 2, 3, 4, 5].map((star) => (\n                            <div\n                              key={star}\n                              className={`w-3 h-3 rounded-full ${\n                                star <= agent.avg_rating ? \"bg-yellow-400\" : \"bg-gray-200\"\n                              }`}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Performance Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  เมตริกประสิทธิภาพ\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">First Response Time</span>\n                    <span className=\"font-medium\">&lt; 5 นาที</span>\n                  </div>\n                  <Progress value={85} className=\"h-2\" />\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Resolution Rate</span>\n                    <span className=\"font-medium\">92%</span>\n                  </div>\n                  <Progress value={92} className=\"h-2\" />\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Customer Satisfaction</span>\n                    <span className=\"font-medium\">4.6/5.0</span>\n                  </div>\n                  <Progress value={92} className=\"h-2\" />\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Agent Utilization</span>\n                    <span className=\"font-medium\">78%</span>\n                  </div>\n                  <Progress value={78} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* SLA Compliance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5\" />\n                  SLA Compliance\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div className=\"p-4 border rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">94%</div>\n                    <div className=\"text-sm text-gray-600\">Response SLA</div>\n                  </div>\n                  <div className=\"p-4 border rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">89%</div>\n                    <div className=\"text-sm text-gray-600\">Resolution SLA</div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold\">SLA Targets</h4>\n                  <ul className=\"text-sm space-y-1\">\n                    <li className=\"flex justify-between\">\n                      <span>Email Response:</span>\n                      <span className=\"text-green-600\">&lt; 2 ชั่วโมง ✓</span>\n                    </li>\n                    <li className=\"flex justify-between\">\n                      <span>Live Chat Response:</span>\n                      <span className=\"text-green-600\">&lt; 2 นาที ✓</span>\n                    </li>\n                    <li className=\"flex justify-between\">\n                      <span>Issue Resolution:</span>\n                      <span className=\"text-yellow-600\">&lt; 24 ชั่วโมง ⚠</span>\n                    </li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/communication/UnifiedInbox.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInboxData'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [statusFilter, channelFilter, searchQuery, loadInboxData]","fix":{"range":[1661,1703],"text":"[statusFilter, channelFilter, searchQuery, loadInboxData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport {\n  MessageSquare,\n  Mail,\n  Phone,\n  Facebook,\n  Send,\n  Paperclip,\n  Search,\n  MoreVertical,\n  Star,\n  Archive,\n} from \"lucide-react\"\nimport {\n  communicationHub,\n  type Conversation,\n  type Message,\n  type Agent,\n  type Template,\n} from \"@/lib/unified-communication-hub\"\n\nexport function UnifiedInbox() {\n  const [conversations, setConversations] = useState<Conversation[]>([])\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null)\n  const [messages, setMessages] = useState<Message[]>([])\n  const [agents, setAgents] = useState<Agent[]>([])\n  const [templates, setTemplates] = useState<Template[]>([])\n  const [loading, setLoading] = useState(true)\n  const [sending, setSending] = useState(false)\n\n  // Form states\n  const [messageInput, setMessageInput] = useState(\"\")\n  const [selectedTemplate, setSelectedTemplate] = useState(\"\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [channelFilter, setChannelFilter] = useState<string>(\"all\")\n\n  useEffect(() => {\n    loadInboxData()\n  }, [statusFilter, channelFilter, searchQuery])\n\n  useEffect(() => {\n    if (selectedConversation) {\n      loadConversationMessages(selectedConversation.id)\n    }\n  }, [selectedConversation])\n\n  const loadInboxData = async () => {\n    try {\n      setLoading(true)\n\n      const filters: any = {}\n      if (statusFilter !== \"all\") {\n        filters.status = [statusFilter]\n      }\n      if (channelFilter !== \"all\") {\n        filters.channel = [channelFilter]\n      }\n\n      const [conversationsData, agentsData, templatesData] = await Promise.all([\n        communicationHub.getConversations(filters),\n        communicationHub.getAvailableAgents(),\n        communicationHub.getTemplates(),\n      ])\n\n      setConversations(conversationsData.conversations)\n      setAgents(agentsData.agents)\n      setTemplates(templatesData.templates)\n\n      // Auto-select first conversation if none selected\n      if (!selectedConversation && conversationsData.conversations.length > 0) {\n        setSelectedConversation(conversationsData.conversations[0])\n      }\n    } catch (error) {\n      console.error(\"Failed to load inbox data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadConversationMessages = async (conversationId: string) => {\n    try {\n      const messagesData = await communicationHub.getConversationMessages(conversationId)\n      setMessages(messagesData.messages)\n    } catch (error) {\n      console.error(\"Failed to load messages:\", error)\n    }\n  }\n\n  const handleSendMessage = async () => {\n    if (!messageInput.trim() || !selectedConversation) return\n\n    setSending(true)\n    try {\n      const result = await communicationHub.sendMessage(\n        selectedConversation.id,\n        messageInput,\n        selectedConversation.channel,\n        {\n          sender_id: \"current_agent\", // This would be the current logged-in agent\n          template_id: selectedTemplate || undefined,\n        },\n      )\n\n      if (result.success) {\n        setMessageInput(\"\")\n        setSelectedTemplate(\"\")\n        // Reload messages\n        await loadConversationMessages(selectedConversation.id)\n      }\n    } catch (error) {\n      console.error(\"Failed to send message:\", error)\n    } finally {\n      setSending(false)\n    }\n  }\n\n  const handleAssignConversation = async (agentId: string) => {\n    if (!selectedConversation) return\n\n    try {\n      const result = await communicationHub.assignConversation(selectedConversation.id, agentId, \"current_user\")\n\n      if (result.success) {\n        // Reload conversations\n        await loadInboxData()\n      }\n    } catch (error) {\n      console.error(\"Failed to assign conversation:\", error)\n    }\n  }\n\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case \"email\":\n        return <Mail className=\"w-4 h-4\" />\n      case \"sms\":\n        return <Phone className=\"w-4 h-4\" />\n      case \"facebook\":\n        return <Facebook className=\"w-4 h-4\" />\n      case \"live_chat\":\n        return <MessageSquare className=\"w-4 h-4\" />\n      default:\n        return <MessageSquare className=\"w-4 h-4\" />\n    }\n  }\n\n  const getChannelColor = (channel: string) => {\n    switch (channel) {\n      case \"email\":\n        return \"bg-blue-100 text-blue-800\"\n      case \"sms\":\n        return \"bg-green-100 text-green-800\"\n      case \"facebook\":\n        return \"bg-blue-100 text-blue-800\"\n      case \"live_chat\":\n        return \"bg-purple-100 text-purple-800\"\n      default:\n        return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return \"bg-red-100 text-red-800 border-red-200\"\n      case \"high\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\"\n      case \"normal\":\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n      case \"low\":\n        return \"bg-green-100 text-green-800 border-green-200\"\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n    }\n  }\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString)\n    const now = new Date()\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60)\n\n    if (diffInHours < 1) {\n      return `${Math.floor(diffInHours * 60)} นาทีที่แล้ว`\n    } else if (diffInHours < 24) {\n      return `${Math.floor(diffInHours)} ชั่วโมงที่แล้ว`\n    } else {\n      return date.toLocaleDateString(\"th-TH\")\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">กำลังโหลด Unified Inbox...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      {/* Header */}\n      <div className=\"border-b bg-white p-4\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold text-primary flex items-center gap-3\">\n            <MessageSquare className=\"w-6 h-6\" />\n            Unified Inbox\n          </h1>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Search className=\"w-4 h-4 text-gray-400\" />\n              <Input\n                placeholder=\"ค้นหาการสนทนา...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">ทั้งหมด</SelectItem>\n                <SelectItem value=\"open\">เปิด</SelectItem>\n                <SelectItem value=\"pending\">รอดำเนินการ</SelectItem>\n                <SelectItem value=\"resolved\">แก้ไขแล้ว</SelectItem>\n                <SelectItem value=\"closed\">ปิด</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={channelFilter} onValueChange={setChannelFilter}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">ทุกช่องทาง</SelectItem>\n                <SelectItem value=\"email\">Email</SelectItem>\n                <SelectItem value=\"sms\">SMS</SelectItem>\n                <SelectItem value=\"facebook\">Facebook</SelectItem>\n                <SelectItem value=\"live_chat\">Live Chat</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Conversations List */}\n        <div className=\"w-1/3 border-r bg-gray-50\">\n          <ScrollArea className=\"h-full\">\n            <div className=\"p-4 space-y-2\">\n              {conversations.map((conversation) => (\n                <Card\n                  key={conversation.id}\n                  className={`cursor-pointer transition-colors hover:bg-gray-100 ${\n                    selectedConversation?.id === conversation.id ? \"ring-2 ring-primary bg-blue-50\" : \"\"\n                  }`}\n                  onClick={() => setSelectedConversation(conversation)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-3 flex-1\">\n                        <Avatar className=\"w-10 h-10\">\n                          <AvatarImage src={`/generic-placeholder-graphic.png?height=40&width=40`} />\n                          <AvatarFallback>\n                            {conversation.customer_name\n                              .split(\" \")\n                              .map((n) => n[0])\n                              .join(\"\")}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h4 className=\"font-medium text-sm truncate\">{conversation.customer_name}</h4>\n                            <Badge className={`${getChannelColor(conversation.channel)} text-xs`}>\n                              {getChannelIcon(conversation.channel)}\n                            </Badge>\n                          </div>\n                          <p className=\"text-xs text-gray-600 truncate\">{conversation.subject || \"ไม่มีหัวข้อ\"}</p>\n                          <div className=\"flex items-center gap-2 mt-2\">\n                            <Badge className={getPriorityColor(conversation.priority)} variant=\"outline\">\n                              {conversation.priority}\n                            </Badge>\n                            <Badge\n                              variant={conversation.status === \"open\" ? \"default\" : \"secondary\"}\n                              className=\"text-xs\"\n                            >\n                              {conversation.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-xs text-gray-500\">{formatTime(conversation.last_message_at)}</p>\n                        {conversation.message_count > 0 && (\n                          <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                            {conversation.message_count}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Chat Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedConversation ? (\n            <>\n              {/* Chat Header */}\n              <div className=\"border-b bg-white p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarImage src={`/generic-placeholder-graphic.png?height=40&width=40`} />\n                      <AvatarFallback>\n                        {selectedConversation.customer_name\n                          .split(\" \")\n                          .map((n) => n[0])\n                          .join(\"\")}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-semibold\">{selectedConversation.customer_name}</h3>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className={getChannelColor(selectedConversation.channel)}>\n                          {getChannelIcon(selectedConversation.channel)}\n                          <span className=\"ml-1 capitalize\">{selectedConversation.channel}</span>\n                        </Badge>\n                        <Badge className={getPriorityColor(selectedConversation.priority)} variant=\"outline\">\n                          {selectedConversation.priority}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Select onValueChange={handleAssignConversation}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"มอบหมายให้เจ้าหน้าที่\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {agents.map((agent) => (\n                          <SelectItem key={agent.id} value={agent.id}>\n                            {agent.name} ({agent.current_conversations}/{agent.max_conversations})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Star className=\"w-4 h-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Archive className=\"w-4 h-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <MoreVertical className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Messages */}\n              <ScrollArea className=\"flex-1 p-4\">\n                <div className=\"space-y-4\">\n                  {messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${message.sender_id === \"current_agent\" ? \"justify-end\" : \"justify-start\"}`}\n                    >\n                      <div\n                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                          message.sender_id === \"current_agent\"\n                            ? \"bg-primary text-primary-foreground\"\n                            : \"bg-gray-100 text-gray-900\"\n                        }`}\n                      >\n                        <p className=\"text-sm\">{message.content}</p>\n                        <div className=\"flex items-center justify-between mt-2\">\n                          <span className=\"text-xs opacity-70\">{formatTime(message.created_at)}</span>\n                          {message.status === \"read\" && message.sender_id === \"current_agent\" && (\n                            <span className=\"text-xs opacity-70\">อ่านแล้ว</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n\n              {/* Message Input */}\n              <div className=\"border-t bg-white p-4\">\n                <div className=\"space-y-3\">\n                  {/* Template Selector */}\n                  <div className=\"flex items-center gap-2\">\n                    <Select value={selectedTemplate} onValueChange={setSelectedTemplate}>\n                      <SelectTrigger className=\"w-64\">\n                        <SelectValue placeholder=\"เลือกเทมเพลต (ไม่บังคับ)\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {templates.map((template) => (\n                          <SelectItem key={template.id} value={template.id}>\n                            {template.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {selectedTemplate && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          const template = templates.find((t) => t.id === selectedTemplate)\n                          if (template) {\n                            setMessageInput(template.content)\n                          }\n                        }}\n                      >\n                        ใช้เทมเพลต\n                      </Button>\n                    )}\n                  </div>\n\n                  {/* Message Input */}\n                  <div className=\"flex items-end gap-2\">\n                    <div className=\"flex-1\">\n                      <Textarea\n                        placeholder=\"พิมพ์ข้อความ...\"\n                        value={messageInput}\n                        onChange={(e) => setMessageInput(e.target.value)}\n                        rows={3}\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\" && !e.shiftKey) {\n                            e.preventDefault()\n                            handleSendMessage()\n                          }\n                        }}\n                      />\n                    </div>\n                    <div className=\"flex flex-col gap-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Paperclip className=\"w-4 h-4\" />\n                      </Button>\n                      <Button onClick={handleSendMessage} disabled={sending || !messageInput.trim()}>\n                        <Send className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center bg-gray-50\">\n              <div className=\"text-center text-gray-500\">\n                <MessageSquare className=\"w-12 h-12 mx-auto mb-4\" />\n                <p>เลือกการสนทนาเพื่อเริ่มต้น</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/fabric-upload-system.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":204,"column":25,"nodeType":"JSXOpeningElement","endLine":208,"endColumn":27},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":272,"column":21,"nodeType":"JSXOpeningElement","endLine":276,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useCallback } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Upload, X, ImageIcon, Loader2 } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface UploadedFile {\n  url: string\n  filename: string\n  path: string\n  collection: string\n  category: string\n  size: number\n  type: string\n  uploadedAt: string\n}\n\ninterface FabricUploadSystemProps {\n  onUploadComplete?: (files: UploadedFile[]) => void\n  maxFiles?: number\n  collections?: string[]\n  categories?: string[]\n}\n\nexport function FabricUploadSystem({\n  onUploadComplete,\n  maxFiles = 10,\n  collections = [\"premium\", \"standard\", \"luxury\", \"custom\"],\n  categories = [\"fabric\", \"pattern\", \"texture\", \"sample\"],\n}: FabricUploadSystemProps) {\n  const [files, setFiles] = useState<File[]>([])\n  const [uploading, setUploading] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([])\n  const [selectedCollection, setSelectedCollection] = useState(\"\")\n  const [selectedCategory, setSelectedCategory] = useState(\"\")\n  const { toast } = useToast()\n\n  const handleFileSelect = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const selectedFiles = Array.from(event.target.files || [])\n\n      if (selectedFiles.length + files.length > maxFiles) {\n        toast({\n          title: \"ไฟล์เกินจำนวนที่กำหนด\",\n          description: `สามารถอัปโหลดได้สูงสุด ${maxFiles} ไฟล์`,\n          variant: \"destructive\",\n        })\n        return\n      }\n\n      setFiles((prev) => [...prev, ...selectedFiles])\n    },\n    [files.length, maxFiles, toast],\n  )\n\n  const removeFile = useCallback((index: number) => {\n    setFiles((prev) => prev.filter((_, i) => i !== index))\n  }, [])\n\n  const uploadFiles = async () => {\n    if (files.length === 0) {\n      toast({\n        title: \"ไม่มีไฟล์ที่จะอัปโหลด\",\n        description: \"กรุณาเลือกไฟล์ก่อนทำการอัปโหลด\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    if (!selectedCollection || !selectedCategory) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาเลือกคอลเลกชันและหมวดหมู่\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setUploading(true)\n    setProgress(0)\n    const uploaded: UploadedFile[] = []\n\n    try {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i]\n        const formData = new FormData()\n        formData.append(\"file\", file)\n        formData.append(\"collection\", selectedCollection)\n        formData.append(\"category\", selectedCategory)\n\n        const response = await fetch(\"/api/fabric/upload\", {\n          method: \"POST\",\n          body: formData,\n        })\n\n        if (!response.ok) {\n          const error = await response.json()\n          throw new Error(error.error || \"การอัปโหลดล้มเหลว\")\n        }\n\n        const result = await response.json()\n        uploaded.push(result)\n        setProgress(((i + 1) / files.length) * 100)\n      }\n\n      setUploadedFiles((prev) => [...prev, ...uploaded])\n      setFiles([])\n      onUploadComplete?.(uploaded)\n\n      toast({\n        title: \"อัปโหลดสำเร็จ\",\n        description: `อัปโหลดลายผ้า ${uploaded.length} ไฟล์เรียบร้อยแล้ว`,\n      })\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error instanceof Error ? error.message : \"การอัปโหลดล้มเหลว\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setUploading(false)\n      setProgress(0)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Upload className=\"h-5 w-5\" />\n            ระบบอัปโหลดลายผ้า\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Collection and Category Selection */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"collection\">คอลเลกชัน</Label>\n              <Select value={selectedCollection} onValueChange={setSelectedCollection}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"เลือกคอลเลกชัน\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {collections.map((collection) => (\n                    <SelectItem key={collection} value={collection}>\n                      {collection.charAt(0).toUpperCase() + collection.slice(1)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">หมวดหมู่</Label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"เลือกหมวดหมู่\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category.charAt(0).toUpperCase() + category.slice(1)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* File Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"files\">เลือกไฟล์ลายผ้า</Label>\n            <Input\n              id=\"files\"\n              type=\"file\"\n              multiple\n              accept=\"image/jpeg,image/jpg,image/png,image/webp\"\n              onChange={handleFileSelect}\n              disabled={uploading}\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              รองรับไฟล์ JPEG, PNG, WebP ขนาดไม่เกิน 10MB ต่อไฟล์ (สูงสุด {maxFiles} ไฟล์)\n            </p>\n          </div>\n\n          {/* Selected Files Preview */}\n          {files.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label>ไฟล์ที่เลือก ({files.length})</Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                {files.map((file, index) => (\n                  <div key={index} className=\"relative group\">\n                    <div className=\"aspect-square bg-muted rounded-lg flex items-center justify-center overflow-hidden\">\n                      {file.type.startsWith(\"image/\") ? (\n                        <img\n                          src={URL.createObjectURL(file) || \"/placeholder.svg\"}\n                          alt={file.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <ImageIcon className=\"h-8 w-8 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                      onClick={() => removeFile(index)}\n                      disabled={uploading}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                    <p className=\"text-xs text-center mt-1 truncate\">{file.name}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Upload Progress */}\n          {uploading && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <Label>กำลังอัปโหลด...</Label>\n                <span className=\"text-sm text-muted-foreground\">{Math.round(progress)}%</span>\n              </div>\n              <Progress value={progress} />\n            </div>\n          )}\n\n          {/* Upload Button */}\n          <Button\n            onClick={uploadFiles}\n            disabled={uploading || files.length === 0 || !selectedCollection || !selectedCategory}\n            className=\"w-full\"\n          >\n            {uploading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                กำลังอัปโหลด...\n              </>\n            ) : (\n              <>\n                <Upload className=\"mr-2 h-4 w-4\" />\n                อัปโหลดลายผ้า ({files.length} ไฟล์)\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Uploaded Files Display */}\n      {uploadedFiles.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>ไฟล์ที่อัปโหลดแล้ว ({uploadedFiles.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {uploadedFiles.map((file, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <div className=\"aspect-square bg-muted rounded-lg overflow-hidden\">\n                    <img\n                      src={file.url || \"/placeholder.svg\"}\n                      alt={file.filename}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium truncate\">{file.filename}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {file.collection} • {file.category}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">{(file.size / 1024 / 1024).toFixed(2)} MB</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/favorites-system.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkFavoriteStatus'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [user, productId, checkFavoriteStatus]","fix":{"range":[690,707],"text":"[user, productId, checkFavoriteStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Heart } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useAuth } from \"@/app/contexts/AuthContext\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { toast } from \"sonner\"\n\ninterface FavoritesSystemProps {\n  productId: string\n  className?: string\n}\n\nexport function FavoritesSystem({ productId, className = \"\" }: FavoritesSystemProps) {\n  const [isFavorite, setIsFavorite] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const { user } = useAuth()\n  const supabase = createClient()\n\n  useEffect(() => {\n    if (user) {\n      checkFavoriteStatus()\n    }\n  }, [user, productId])\n\n  const checkFavoriteStatus = async () => {\n    if (!user) return\n\n    try {\n      const { data, error } = await supabase\n        .from(\"wishlists\")\n        .select(\"id\")\n        .eq(\"user_id\", user.id)\n        .eq(\"product_id\", productId)\n        .single()\n\n      if (!error && data) {\n        setIsFavorite(true)\n      }\n    } catch (error) {\n      // Item not in favorites\n      setIsFavorite(false)\n    }\n  }\n\n  const toggleFavorite = async () => {\n    if (!user) {\n      toast.error(\"กรุณาเข้าสู่ระบบเพื่อเพิ่มสินค้าในรายการโปรด\")\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      if (isFavorite) {\n        // Remove from favorites\n        const { error } = await supabase.from(\"wishlists\").delete().eq(\"user_id\", user.id).eq(\"product_id\", productId)\n\n        if (error) throw error\n\n        setIsFavorite(false)\n        toast.success(\"ลบออกจากรายการโปรดแล้ว\")\n      } else {\n        // Add to favorites\n        const { error } = await supabase.from(\"wishlists\").insert({\n          user_id: user.id,\n          product_id: productId,\n        })\n\n        if (error) throw error\n\n        setIsFavorite(true)\n        toast.success(\"เพิ่มในรายการโปรดแล้ว\")\n      }\n    } catch (error) {\n      console.error(\"Error toggling favorite:\", error)\n      toast.error(\"เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Button variant=\"ghost\" size=\"sm\" onClick={toggleFavorite} disabled={isLoading} className={`p-2 ${className}`}>\n      <Heart className={`h-5 w-5 ${isFavorite ? \"fill-red-500 text-red-500\" : \"text-gray-400 hover:text-red-500\"}`} />\n    </Button>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/integrated-fabric-management.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":304,"column":25,"nodeType":"JSXOpeningElement","endLine":309,"endColumn":27},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":397,"column":19,"nodeType":"JSXOpeningElement","endLine":401,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useCallback } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Upload, Sparkles, Eye, Download, Trash2 } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { FabricUploadSystem } from \"./fabric-upload-system\"\nimport { AICollectionNaming } from \"./ai-collection-naming\"\n\ninterface FabricItem {\n  id: string\n  url: string\n  filename: string\n  path: string\n  collection: string\n  category: string\n  size: number\n  type: string\n  uploadedAt: string\n  aiAnalysis?: {\n    suggestions: string\n    analysis: string\n    generatedAt: string\n  }\n  collectionName?: {\n    thai: string\n    english: string\n    reason: string\n    description: string\n  }\n}\n\ninterface IntegratedFabricManagementProps {\n  onFabricProcessed?: (fabric: FabricItem) => void\n  autoAnalyze?: boolean\n  autoName?: boolean\n}\n\nexport function IntegratedFabricManagement({\n  onFabricProcessed,\n  autoAnalyze = true,\n  autoName = true,\n}: IntegratedFabricManagementProps) {\n  const [fabricItems, setFabricItems] = useState<FabricItem[]>([])\n  const [selectedFabric, setSelectedFabric] = useState<FabricItem | null>(null)\n  const [processing, setProcessing] = useState(false)\n  const [processingStep, setProcessingStep] = useState(\"\")\n  const [processingProgress, setProcessingProgress] = useState(0)\n  const { toast } = useToast()\n\n  const handleUploadComplete = useCallback(\n    async (uploadedFiles: any[]) => {\n      setProcessing(true)\n      setProcessingStep(\"กำลังประมวลผลไฟล์...\")\n      setProcessingProgress(0)\n\n      const newFabricItems: FabricItem[] = []\n\n      for (let i = 0; i < uploadedFiles.length; i++) {\n        const file = uploadedFiles[i]\n        setProcessingStep(`กำลังประมวลผลไฟล์ ${i + 1}/${uploadedFiles.length}: ${file.filename}`)\n        setProcessingProgress((i / uploadedFiles.length) * 100)\n\n        const fabricItem: FabricItem = {\n          id: `fabric-${Date.now()}-${i}`,\n          ...file,\n        }\n\n        // Auto-analyze if enabled\n        if (autoAnalyze) {\n          setProcessingStep(`กำลังวิเคราะห์ลายผ้า: ${file.filename}`)\n          try {\n            const analysisResponse = await fetch(\"/api/ai/fabric-analysis\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                imageUrl: file.url,\n                analysisType: \"comprehensive\",\n              }),\n            })\n\n            if (analysisResponse.ok) {\n              const analysisData = await analysisResponse.json()\n              fabricItem.aiAnalysis = analysisData\n            }\n          } catch (error) {\n            console.error(\"Analysis failed:\", error)\n          }\n        }\n\n        // Auto-generate collection name if enabled\n        if (autoName) {\n          setProcessingStep(`กำลังสร้างชื่อคอลเลกชัน: ${file.filename}`)\n          try {\n            const namingResponse = await fetch(\"/api/ai/collection-naming\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                imageUrl: file.url,\n                fabricType: file.category,\n                style: file.collection,\n                colors: \"\",\n                description: fabricItem.aiAnalysis?.analysis || \"\",\n              }),\n            })\n\n            if (namingResponse.ok) {\n              const namingData = await namingResponse.json()\n              // Parse the first suggestion from AI response\n              const suggestions = namingData.suggestions\n              const firstSuggestion = suggestions.split(\"\\n\").find((line: string) => line.includes(\"**ชื่อไทย**\"))\n              if (firstSuggestion) {\n                const thaiMatch = firstSuggestion.match(/\\*\\*ชื่อไทย\\*\\*:\\s*\"([^\"]+)\"/)\n                const englishMatch = firstSuggestion.match(/\\*\\*ชื่ออังกฤษ\\*\\*:\\s*\"([^\"]+)\"/)\n                if (thaiMatch && englishMatch) {\n                  fabricItem.collectionName = {\n                    thai: thaiMatch[1],\n                    english: englishMatch[1],\n                    reason: \"AI Generated\",\n                    description: \"สร้างโดย AI จากการวิเคราะห์ลายผ้า\",\n                  }\n                }\n              }\n            }\n          } catch (error) {\n            console.error(\"Naming failed:\", error)\n          }\n        }\n\n        newFabricItems.push(fabricItem)\n        onFabricProcessed?.(fabricItem)\n      }\n\n      setFabricItems((prev) => [...prev, ...newFabricItems])\n      setProcessingProgress(100)\n      setProcessingStep(\"เสร็จสิ้น\")\n\n      toast({\n        title: \"ประมวลผลเสร็จสิ้น\",\n        description: `ประมวลผลลายผ้า ${newFabricItems.length} ไฟล์เรียบร้อยแล้ว`,\n      })\n\n      setTimeout(() => {\n        setProcessing(false)\n        setProcessingStep(\"\")\n        setProcessingProgress(0)\n      }, 1000)\n    },\n    [autoAnalyze, autoName, onFabricProcessed, toast],\n  )\n\n  const processWithAI = async (fabric: FabricItem) => {\n    setProcessing(true)\n    setProcessingStep(`กำลังประมวลผล: ${fabric.filename}`)\n\n    try {\n      // Get AI analysis\n      const analysisResponse = await fetch(\"/api/ai/fabric-analysis\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          imageUrl: fabric.url,\n          analysisType: \"comprehensive\",\n        }),\n      })\n\n      let analysisData = null\n      if (analysisResponse.ok) {\n        analysisData = await analysisResponse.json()\n      }\n\n      // Generate collection names\n      const namingResponse = await fetch(\"/api/ai/collection-naming\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          imageUrl: fabric.url,\n          fabricType: fabric.category,\n          style: fabric.collection,\n          colors: \"\",\n          description: analysisData?.analysis || \"\",\n        }),\n      })\n\n      let namingData = null\n      if (namingResponse.ok) {\n        namingData = await namingResponse.json()\n      }\n\n      // Update fabric item\n      setFabricItems((prev) =>\n        prev.map((item) =>\n          item.id === fabric.id\n            ? {\n                ...item,\n                aiAnalysis: analysisData,\n                collectionName: namingData\n                  ? {\n                      thai: \"AI Generated Name\",\n                      english: \"AI Generated Name\",\n                      reason: \"AI Generated\",\n                      description: namingData.suggestions.substring(0, 100) + \"...\",\n                    }\n                  : undefined,\n              }\n            : item,\n        ),\n      )\n\n      toast({\n        title: \"ประมวลผลสำเร็จ\",\n        description: \"วิเคราะห์ลายผ้าและสร้างชื่อคอลเลกชันเรียบร้อยแล้ว\",\n      })\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถประมวลผลด้วย AI ได้\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setProcessing(false)\n      setProcessingStep(\"\")\n    }\n  }\n\n  const deleteFabric = async (fabric: FabricItem) => {\n    try {\n      // Delete from blob storage\n      await fetch(\"/api/fabric/delete\", {\n        method: \"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ url: fabric.url }),\n      })\n\n      setFabricItems((prev) => prev.filter((item) => item.id !== fabric.id))\n\n      toast({\n        title: \"ลบเรียบร้อย\",\n        description: \"ลบลายผ้าออกจากระบบแล้ว\",\n      })\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถลบไฟล์ได้\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Processing Status */}\n      {processing && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">{processingStep}</span>\n                <span className=\"text-sm text-muted-foreground\">{Math.round(processingProgress)}%</span>\n              </div>\n              <Progress value={processingProgress} />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Tabs defaultValue=\"upload\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"upload\">อัปโหลดลายผ้า</TabsTrigger>\n          <TabsTrigger value=\"gallery\">แกลเลอรี่ลายผ้า</TabsTrigger>\n          <TabsTrigger value=\"ai-tools\">เครื่องมือ AI</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"upload\" className=\"space-y-4\">\n          <FabricUploadSystem\n            onUploadComplete={handleUploadComplete}\n            maxFiles={20}\n            collections={[\"premium\", \"standard\", \"luxury\", \"custom\", \"seasonal\"]}\n            categories={[\"fabric\", \"pattern\", \"texture\", \"sample\", \"inspiration\"]}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"gallery\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>แกลเลอรี่ลายผ้า ({fabricItems.length} ไฟล์)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {fabricItems.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Upload className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>ยังไม่มีลายผ้าในแกลเลอรี่</p>\n                  <p className=\"text-sm\">อัปโหลดลายผ้าเพื่อเริ่มต้นใช้งาน</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {fabricItems.map((fabric) => (\n                    <Card key={fabric.id} className=\"overflow-hidden\">\n                      <div className=\"aspect-square bg-muted overflow-hidden\">\n                        <img\n                          src={fabric.url || \"/placeholder.svg\"}\n                          alt={fabric.filename}\n                          className=\"w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform\"\n                          onClick={() => setSelectedFabric(fabric)}\n                        />\n                      </div>\n                      <CardContent className=\"p-4 space-y-3\">\n                        <div>\n                          <h3 className=\"font-medium truncate\">{fabric.filename}</h3>\n                          <div className=\"flex gap-1 mt-1\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {fabric.collection}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {fabric.category}\n                            </Badge>\n                          </div>\n                        </div>\n\n                        {fabric.collectionName && (\n                          <div className=\"space-y-1\">\n                            <p className=\"text-sm font-medium text-primary\">{fabric.collectionName.thai}</p>\n                            <p className=\"text-xs text-muted-foreground\">{fabric.collectionName.english}</p>\n                          </div>\n                        )}\n\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => processWithAI(fabric)}\n                            disabled={processing}\n                          >\n                            <Sparkles className=\"h-3 w-3\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setSelectedFabric(fabric)}>\n                            <Eye className=\"h-3 w-3\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => window.open(fabric.url, \"_blank\")}>\n                            <Download className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteFabric(fabric)}\n                            className=\"text-destructive hover:text-destructive\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"ai-tools\" className=\"space-y-4\">\n          <AICollectionNaming\n            imageUrl={selectedFabric?.url}\n            onNameSelected={(name) => {\n              if (selectedFabric) {\n                setFabricItems((prev) =>\n                  prev.map((item) => (item.id === selectedFabric.id ? { ...item, collectionName: name } : item)),\n                )\n                toast({\n                  title: \"บันทึกชื่อคอลเลกชัน\",\n                  description: \"บันทึกชื่อคอลเลกชันที่เลือกเรียบร้อยแล้ว\",\n                })\n              }\n            }}\n          />\n        </TabsContent>\n      </Tabs>\n\n      {/* Fabric Detail Modal */}\n      {selectedFabric && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>{selectedFabric.filename}</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedFabric(null)}>\n                  ✕\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <img\n                    src={selectedFabric.url || \"/placeholder.svg\"}\n                    alt={selectedFabric.filename}\n                    className=\"w-full rounded-lg\"\n                  />\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-medium mb-2\">ข้อมูลไฟล์</h3>\n                    <div className=\"space-y-1 text-sm\">\n                      <p>\n                        <strong>คอลเลกชัน:</strong> {selectedFabric.collection}\n                      </p>\n                      <p>\n                        <strong>หมวดหมู่:</strong> {selectedFabric.category}\n                      </p>\n                      <p>\n                        <strong>ขนาด:</strong> {(selectedFabric.size / 1024 / 1024).toFixed(2)} MB\n                      </p>\n                      <p>\n                        <strong>อัปโหลดเมื่อ:</strong> {new Date(selectedFabric.uploadedAt).toLocaleString(\"th-TH\")}\n                      </p>\n                    </div>\n                  </div>\n\n                  {selectedFabric.collectionName && (\n                    <div>\n                      <h3 className=\"font-medium mb-2\">ชื่อคอลเลกชัน</h3>\n                      <div className=\"space-y-1 text-sm\">\n                        <p>\n                          <strong>ไทย:</strong> {selectedFabric.collectionName.thai}\n                        </p>\n                        <p>\n                          <strong>อังกฤษ:</strong> {selectedFabric.collectionName.english}\n                        </p>\n                        <p>\n                          <strong>คำอธิบาย:</strong> {selectedFabric.collectionName.description}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {selectedFabric.aiAnalysis && (\n                    <div>\n                      <h3 className=\"font-medium mb-2\">การวิเคราะห์ AI</h3>\n                      <div className=\"bg-muted p-3 rounded text-sm\">\n                        <pre className=\"whitespace-pre-wrap\">{selectedFabric.aiAnalysis.analysis}</pre>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/inventory/AIForecastingDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setForecastHorizon' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":45},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAIForecasts'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [selectedModel, forecastHorizon, loadAIForecasts]","fix":{"range":[1366,1398],"text":"[selectedModel, forecastHorizon, loadAIForecasts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  Brain,\n  TrendingUp,\n  TrendingDown,\n  Target,\n  AlertTriangle,\n  BarChart3,\n  Zap,\n  Settings,\n  RefreshCw,\n  Activity,\n} from \"lucide-react\"\nimport { aiInventoryPrediction, type DemandPrediction, type InventoryOptimization } from \"@/lib/ai-inventory-prediction\"\n\nexport default function AIForecastingDashboard() {\n  const [predictions, setPredictions] = useState<DemandPrediction[]>([])\n  const [optimizations, setOptimizations] = useState<InventoryOptimization[]>([])\n  const [abcAnalysis, setAbcAnalysis] = useState<any>(null)\n  const [selectedModel, setSelectedModel] = useState<\"linear_regression\" | \"arima\" | \"neural_network\" | \"ensemble\">(\n    \"ensemble\",\n  )\n  const [forecastHorizon, setForecastHorizon] = useState(30)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadAIForecasts()\n  }, [selectedModel, forecastHorizon])\n\n  const loadAIForecasts = async () => {\n    try {\n      setLoading(true)\n      const productIds = [\"1\", \"2\", \"3\", \"4\", \"5\"] // Mock product IDs\n\n      const [predictionsData, optimizationsData, abcData] = await Promise.all([\n        aiInventoryPrediction.predictDemand(productIds, forecastHorizon, selectedModel),\n        aiInventoryPrediction.optimizeInventoryLevels(productIds),\n        aiInventoryPrediction.performAdvancedABCAnalysis(),\n      ])\n\n      setPredictions(predictionsData)\n      setOptimizations(optimizationsData)\n      setAbcAnalysis(abcData)\n    } catch (error) {\n      console.error(\"Error loading AI forecasts:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getModelAccuracy = (modelType: string) => {\n    const accuracies = {\n      linear_regression: 78,\n      arima: 82,\n      neural_network: 89,\n      ensemble: 94,\n    }\n    return accuracies[modelType as keyof typeof accuracies] || 85\n  }\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 0.8) return \"text-green-600 bg-green-50 border-green-200\"\n    if (confidence >= 0.6) return \"text-yellow-600 bg-yellow-50 border-yellow-200\"\n    return \"text-red-600 bg-red-50 border-red-200\"\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">กำลังประมวลผล AI Forecasting...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary flex items-center gap-3\">\n            <Brain className=\"w-8 h-8\" />\n            AI Inventory Forecasting\n          </h1>\n          <p className=\"text-gray-600 mt-1\">ระบบพยากรณ์คลังสินค้าด้วย Machine Learning ขั้นสูง</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Select value={selectedModel} onValueChange={(value: any) => setSelectedModel(value)}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"ensemble\">Ensemble Model (แนะนำ)</SelectItem>\n              <SelectItem value=\"neural_network\">Neural Network</SelectItem>\n              <SelectItem value=\"arima\">ARIMA</SelectItem>\n              <SelectItem value=\"linear_regression\">Linear Regression</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\">\n            <Settings className=\"w-4 h-4 mr-2\" />\n            ตั้งค่า AI\n          </Button>\n          <Button>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            อัปเดตโมเดล\n          </Button>\n        </div>\n      </div>\n\n      {/* Model Performance */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">ประสิทธิภาพโมเดล AI</h3>\n              <p className=\"text-gray-600\">โมเดลปัจจุบัน: {selectedModel.replace(\"_\", \" \").toUpperCase()}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-3xl font-bold text-primary\">{getModelAccuracy(selectedModel)}%</div>\n              <div className=\"text-sm text-gray-600\">ความแม่นยำ</div>\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <Progress value={getModelAccuracy(selectedModel)} className=\"h-2\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"predictions\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"predictions\">การพยากรณ์</TabsTrigger>\n          <TabsTrigger value=\"optimization\">การปรับปรุง</TabsTrigger>\n          <TabsTrigger value=\"abc-analysis\">ABC Analysis</TabsTrigger>\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"predictions\" className=\"space-y-6\">\n          {/* High Priority Alerts */}\n          {predictions.some((p) => p.confidence_score < 0.6) && (\n            <Alert className=\"border-yellow-200 bg-yellow-50\">\n              <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n              <AlertDescription className=\"text-yellow-800\">\n                <strong>คำเตือน:</strong> มีการพยากรณ์ {predictions.filter((p) => p.confidence_score < 0.6).length}{\" \"}\n                รายการที่มีความมั่นใจต่ำ ควรตรวจสอบข้อมูลเพิ่มเติม\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Prediction Cards */}\n          <div className=\"grid gap-6\">\n            {predictions.map((prediction) => (\n              <Card key={prediction.product_id} className=\"overflow-hidden\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{prediction.product_name}</CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={getConfidenceColor(prediction.confidence_score)}>\n                        <Brain className=\"w-3 h-3 mr-1\" />\n                        {Math.round(prediction.confidence_score * 100)}% มั่นใจ\n                      </Badge>\n                      <Badge variant=\"outline\">{prediction.model_used.replace(\"_\", \" \").toUpperCase()}</Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-4 gap-6\">\n                    {/* Prediction Results */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold text-gray-700 flex items-center gap-2\">\n                        <Target className=\"w-4 h-4\" />\n                        การพยากรณ์\n                      </h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-blue-600\">{prediction.predicted_demand}</div>\n                          <div className=\"text-sm text-blue-700\">ความต้องการคาด</div>\n                        </div>\n                        <div className=\"text-xs text-gray-600 text-center\">\n                          ช่วง: {prediction.confidence_interval.lower} - {prediction.confidence_interval.upper}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Contributing Factors */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold text-gray-700 flex items-center gap-2\">\n                        <Activity className=\"w-4 h-4\" />\n                        ปัจจัยที่มีผล\n                      </h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">ฤดูกาล</span>\n                          <div className=\"flex items-center\">\n                            {prediction.contributing_factors.seasonal > 0 ? (\n                              <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                            ) : (\n                              <TrendingDown className=\"w-3 h-3 text-red-600 mr-1\" />\n                            )}\n                            <span className=\"text-sm font-medium\">\n                              {(prediction.contributing_factors.seasonal * 100).toFixed(1)}%\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">แนวโน้ม</span>\n                          <div className=\"flex items-center\">\n                            {prediction.contributing_factors.trend > 0 ? (\n                              <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                            ) : (\n                              <TrendingDown className=\"w-3 h-3 text-red-600 mr-1\" />\n                            )}\n                            <span className=\"text-sm font-medium\">\n                              {(prediction.contributing_factors.trend * 100).toFixed(1)}%\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">โปรโมชั่น</span>\n                          <span className=\"text-sm font-medium\">\n                            +{(prediction.contributing_factors.promotional * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Model Insights */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold text-gray-700 flex items-center gap-2\">\n                        <Zap className=\"w-4 h-4\" />\n                        AI Insights\n                      </h4>\n                      <div className=\"space-y-2 text-sm\">\n                        {prediction.confidence_score > 0.8 && (\n                          <div className=\"p-2 bg-green-50 text-green-800 rounded\">\n                            ความมั่นใจสูง - แนะนำให้ดำเนินการตามการพยากรณ์\n                          </div>\n                        )}\n                        {prediction.contributing_factors.seasonal > 0.1 && (\n                          <div className=\"p-2 bg-blue-50 text-blue-800 rounded\">มีผลกระทบจากฤดูกาลสูง - เตรียมสต็อกเพิ่ม</div>\n                        )}\n                        {prediction.contributing_factors.promotional > 0.05 && (\n                          <div className=\"p-2 bg-purple-50 text-purple-800 rounded\">โปรโมชั่นมีผลต่อความต้องการ</div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold text-gray-700\">การดำเนินการ</h4>\n                      <div className=\"space-y-2\">\n                        <Button size=\"sm\" className=\"w-full\">\n                          <Target className=\"w-4 h-4 mr-2\" />\n                          ปรับแผนสต็อก\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"w-full bg-transparent\">\n                          <BarChart3 className=\"w-4 h-4 mr-2\" />\n                          ดูรายละเอียด\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"optimization\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            {optimizations.map((opt) => (\n              <Card key={opt.product_id}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"w-5 h-5\" />\n                    การปรับปรุงสต็อก - Product {opt.product_id}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-5 gap-4\">\n                    <div className=\"text-center p-3 border rounded-lg\">\n                      <div className=\"text-lg font-bold text-gray-900\">{opt.current_stock}</div>\n                      <div className=\"text-sm text-gray-600\">สต็อกปัจจุบัน</div>\n                    </div>\n                    <div className=\"text-center p-3 border rounded-lg bg-blue-50\">\n                      <div className=\"text-lg font-bold text-blue-600\">{opt.optimal_stock_level}</div>\n                      <div className=\"text-sm text-blue-700\">สต็อกที่เหมาะสม</div>\n                    </div>\n                    <div className=\"text-center p-3 border rounded-lg bg-orange-50\">\n                      <div className=\"text-lg font-bold text-orange-600\">{opt.reorder_point}</div>\n                      <div className=\"text-sm text-orange-700\">จุดสั่งซื้อ</div>\n                    </div>\n                    <div className=\"text-center p-3 border rounded-lg bg-green-50\">\n                      <div className=\"text-lg font-bold text-green-600\">{opt.safety_stock}</div>\n                      <div className=\"text-sm text-green-700\">สต็อกสำรอง</div>\n                    </div>\n                    <div className=\"text-center p-3 border rounded-lg bg-purple-50\">\n                      <div className=\"text-lg font-bold text-purple-600\">\n                        ฿{opt.carrying_cost_reduction.toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-purple-700\">ประหยัดได้</div>\n                    </div>\n                  </div>\n                  <div className=\"mt-4\">\n                    <Progress\n                      value={Math.min((opt.current_stock / opt.optimal_stock_level) * 100, 100)}\n                      className=\"h-2\"\n                    />\n                    <div className=\"text-xs text-gray-600 mt-1 text-center\">ระดับสต็อกปัจจุบันเทียบกับที่เหมาะสม</div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"abc-analysis\" className=\"space-y-6\">\n          {abcAnalysis && (\n            <>\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <Card className=\"border-red-200\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-red-700 flex items-center gap-2\">\n                      <span className=\"w-3 h-3 bg-red-500 rounded-full\"></span>\n                      กลุ่ม A (สำคัญมาก)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-2xl font-bold text-red-600\">\n                        {abcAnalysis.categories.A.products.length} รายการ\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        สร้างรายได้ {abcAnalysis.categories.A.revenue_contribution.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-gray-500 p-2 bg-gray-50 rounded\">\n                        {abcAnalysis.categories.A.management_strategy}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-yellow-200\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-yellow-700 flex items-center gap-2\">\n                      <span className=\"w-3 h-3 bg-yellow-500 rounded-full\"></span>\n                      กลุ่ม B (สำคัญปานกลาง)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">\n                        {abcAnalysis.categories.B.products.length} รายการ\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        สร้างรายได้ {abcAnalysis.categories.B.revenue_contribution.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-gray-500 p-2 bg-gray-50 rounded\">\n                        {abcAnalysis.categories.B.management_strategy}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-green-200\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-green-700 flex items-center gap-2\">\n                      <span className=\"w-3 h-3 bg-green-500 rounded-full\"></span>\n                      กลุ่ม C (สำคัญน้อย)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {abcAnalysis.categories.C.products.length} รายการ\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        สร้างรายได้ {abcAnalysis.categories.C.revenue_contribution.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-gray-500 p-2 bg-gray-50 rounded\">\n                        {abcAnalysis.categories.C.management_strategy}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>ข้อเสนอแนะจาก AI</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">ข้อมูลเชิงลึก</h4>\n                      <ul className=\"space-y-1\">\n                        {abcAnalysis.insights.map((insight: string, index: number) => (\n                          <li key={index} className=\"text-sm text-gray-700 flex items-start gap-2\">\n                            <span className=\"w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></span>\n                            {insight}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">คำแนะนำ</h4>\n                      <ul className=\"space-y-1\">\n                        {abcAnalysis.recommendations.map((rec: string, index: number) => (\n                          <li key={index} className=\"text-sm text-gray-700 flex items-start gap-2\">\n                            <span className=\"w-1 h-1 bg-green-500 rounded-full mt-2 flex-shrink-0\"></span>\n                            {rec}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"w-5 h-5\" />\n                AI Insights Dashboard\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-gray-500\">\n                <Brain className=\"w-12 h-12 mx-auto mb-4\" />\n                <p>AI Insights จะแสดงที่นี่</p>\n                <p className=\"text-sm\">ข้อมูลเชิงลึกและคำแนะนำจาก Machine Learning</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/inventory/InventoryForecastDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'forecastError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport {\n  TrendingUp,\n  TrendingDown,\n  Package,\n  AlertTriangle,\n  Calendar,\n  Target,\n  BarChart3,\n  RefreshCw,\n  Download,\n  Settings,\n} from \"lucide-react\"\nimport { useInventoryForecast, useInventoryInsights } from \"@/hooks/use-advanced-inventory\"\nimport { formatCurrency } from \"@/lib/money\"\n\nexport default function InventoryForecastDashboard() {\n  const [timeframe, setTimeframe] = useState<\"weekly\" | \"monthly\" | \"quarterly\">(\"monthly\")\n  const { forecasts, loading: forecastLoading, error: forecastError } = useInventoryForecast(timeframe)\n  const { insights, loading: insightsLoading } = useInventoryInsights()\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 0.8) return \"text-green-600 bg-green-50\"\n    if (confidence >= 0.6) return \"text-yellow-600 bg-yellow-50\"\n    return \"text-red-600 bg-red-50\"\n  }\n\n  const getUrgencyBadge = (days: number) => {\n    if (days <= 3) return <Badge variant=\"destructive\">เร่งด่วน</Badge>\n    if (days <= 7) return <Badge variant=\"default\">สำคัญ</Badge>\n    return <Badge variant=\"secondary\">ปกติ</Badge>\n  }\n\n  if (forecastLoading || insightsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Inventory Forecasting Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">การพยากรณ์และวิเคราะห์คลังสินค้าขั้นสูง</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button variant=\"outline\">\n            <Settings className=\"w-4 h-4 mr-2\" />\n            ตั้งค่า\n          </Button>\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            ส่งออกรายงาน\n          </Button>\n          <Button>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            อัปเดต\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      {insights && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">มูลค่าคลังสินค้า</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(insights.total_value)}</p>\n                </div>\n                <Package className=\"w-8 h-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">อัตราการหมุนเวียน</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{insights.turnover_rate}x</p>\n                </div>\n                <BarChart3 className=\"w-8 h-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">เสี่ยงสต็อกหมด</p>\n                  <p className=\"text-2xl font-bold text-red-600\">{insights.stockout_risk_items}</p>\n                </div>\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">ประหยัดได้</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {formatCurrency(insights.cost_optimization_potential)}\n                  </p>\n                </div>\n                <Target className=\"w-8 h-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Forecast Alerts */}\n      {forecasts.some((f) => new Date(f.optimal_reorder_date).getTime() - Date.now() <= 3 * 24 * 60 * 60 * 1000) && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            <strong>แจ้งเตือนเร่งด่วน:</strong> มีสินค้า{\" \"}\n            {\n              forecasts.filter(\n                (f) => new Date(f.optimal_reorder_date).getTime() - Date.now() <= 3 * 24 * 60 * 60 * 1000,\n              ).length\n            }{\" \"}\n            รายการที่ต้องสั่งซื้อภายใน 3 วัน\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Main Content */}\n      <Tabs value={timeframe} onValueChange={(value) => setTimeframe(value as any)} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"weekly\">รายสัปดาห์</TabsTrigger>\n          <TabsTrigger value=\"monthly\">รายเดือน</TabsTrigger>\n          <TabsTrigger value=\"quarterly\">รายไตรมาส</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={timeframe} className=\"space-y-6\">\n          {/* Forecast Cards */}\n          <div className=\"grid gap-6\">\n            {forecasts.map((forecast) => {\n              const daysUntilReorder = Math.ceil(\n                (new Date(forecast.optimal_reorder_date).getTime() - Date.now()) / (1000 * 60 * 60 * 24),\n              )\n\n              return (\n                <Card key={forecast.product_id} className=\"overflow-hidden\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">{forecast.product_name}</CardTitle>\n                      <div className=\"flex items-center gap-2\">\n                        {getUrgencyBadge(daysUntilReorder)}\n                        <Badge className={getConfidenceColor(forecast.confidence_score)}>\n                          ความมั่นใจ {Math.round(forecast.confidence_score * 100)}%\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid md:grid-cols-4 gap-6\">\n                      {/* Current Status */}\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold text-gray-700\">สถานะปัจจุบัน</h4>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>สต็อกปัจจุบัน:</span>\n                            <span className=\"font-medium\">{forecast.current_stock} ชิ้น</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>ความต้องการคาด:</span>\n                            <span className=\"font-medium\">{forecast.predicted_demand} ชิ้น</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Recommendations */}\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold text-gray-700\">คำแนะนำ</h4>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>ควรสั่งซื้อ:</span>\n                            <span className=\"font-medium text-blue-600\">{forecast.recommended_order_quantity} ชิ้น</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>วันที่ควรสั่ง:</span>\n                            <span className=\"font-medium text-orange-600\">\n                              {new Date(forecast.optimal_reorder_date).toLocaleDateString(\"th-TH\")}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Trend Factors */}\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold text-gray-700\">ปัจจัยแนวโน้ม</h4>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span>ฤดูกาล:</span>\n                            <div className=\"flex items-center\">\n                              {forecast.seasonal_factor > 1 ? (\n                                <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                              ) : (\n                                <TrendingDown className=\"w-3 h-3 text-red-600 mr-1\" />\n                              )}\n                              <span className=\"font-medium\">{(forecast.seasonal_factor * 100).toFixed(0)}%</span>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span>แนวโน้ม:</span>\n                            <div className=\"flex items-center\">\n                              {forecast.trend_factor > 1 ? (\n                                <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                              ) : (\n                                <TrendingDown className=\"w-3 h-3 text-red-600 mr-1\" />\n                              )}\n                              <span className=\"font-medium\">{(forecast.trend_factor * 100).toFixed(0)}%</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Actions */}\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold text-gray-700\">การดำเนินการ</h4>\n                        <div className=\"space-y-2\">\n                          <Button size=\"sm\" className=\"w-full\">\n                            <Package className=\"w-4 h-4 mr-2\" />\n                            สั่งซื้อเลย\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"w-full bg-transparent\">\n                            <Calendar className=\"w-4 h-4 mr-2\" />\n                            ตั้งเตือน\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar */}\n                    <div className=\"mt-6\">\n                      <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                        <span>ความต้องการเทียบกับสต็อก</span>\n                        <span>\n                          {Math.round((forecast.predicted_demand / forecast.current_stock) * 100)}% ของสต็อกปัจจุบัน\n                        </span>\n                      </div>\n                      <Progress\n                        value={Math.min((forecast.predicted_demand / forecast.current_stock) * 100, 100)}\n                        className=\"h-2\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              )\n            })}\n          </div>\n\n          {forecasts.length === 0 && !forecastLoading && (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">ไม่มีข้อมูลการพยากรณ์</h3>\n                <p className=\"text-gray-600\">ยังไม่มีข้อมูลเพียงพอสำหรับการพยากรณ์คลังสินค้า</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/inventory/SupplierPerformanceTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedSupplier' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedSupplier' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  Star,\n  TrendingUp,\n  TrendingDown,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  RefreshCw,\n  Eye,\n  Award,\n  Target,\n} from \"lucide-react\"\nimport { useSupplierPerformance } from \"@/hooks/use-advanced-inventory\"\n\nexport default function SupplierPerformanceTracker() {\n  const { performance, loading, error, refreshPerformance } = useSupplierPerformance()\n  const [selectedSupplier, setSelectedSupplier] = useState<string | null>(null)\n\n  const getRatingColor = (rating: number) => {\n    if (rating >= 0.9) return \"text-green-600\"\n    if (rating >= 0.8) return \"text-blue-600\"\n    if (rating >= 0.7) return \"text-yellow-600\"\n    return \"text-red-600\"\n  }\n\n  const getRatingBadge = (rating: number) => {\n    if (rating >= 0.9) return <Badge className=\"bg-green-100 text-green-800\">ยอดเยี่ยม</Badge>\n    if (rating >= 0.8) return <Badge className=\"bg-blue-100 text-blue-800\">ดี</Badge>\n    if (rating >= 0.7) return <Badge className=\"bg-yellow-100 text-yellow-800\">ปานกลาง</Badge>\n    return <Badge className=\"bg-red-100 text-red-800\">ต้องปรับปรุง</Badge>\n  }\n\n  const getPerformanceIcon = (value: number, threshold = 0.8) => {\n    return value >= threshold ? (\n      <TrendingUp className=\"w-4 h-4 text-green-600\" />\n    ) : (\n      <TrendingDown className=\"w-4 h-4 text-red-600\" />\n    )\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-12 text-center\">\n          <AlertTriangle className=\"w-12 h-12 text-red-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">เกิดข้อผิดพลาด</h3>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <Button onClick={refreshPerformance}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            ลองใหม่\n          </Button>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Supplier Performance Tracker</h1>\n          <p className=\"text-gray-600 mt-1\">ติดตามและประเมินประสิทธิภาพซัพพลายเออร์</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button onClick={refreshPerformance} variant=\"outline\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            อัปเดตข้อมูล\n          </Button>\n          <Button>\n            <Award className=\"w-4 h-4 mr-2\" />\n            สร้างรายงาน\n          </Button>\n        </div>\n      </div>\n\n      {/* Performance Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">ซัพพลายเออร์ทั้งหมด</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{performance.length}</p>\n              </div>\n              <Target className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">คะแนนเฉลี่ย</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {performance.length > 0\n                    ? ((performance.reduce((sum, p) => sum + p.overall_rating, 0) / performance.length) * 100).toFixed(\n                        1,\n                      )\n                    : 0}\n                  %\n                </p>\n              </div>\n              <Star className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">ส่งตรงเวลา</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {performance.length > 0\n                    ? (\n                        (performance.reduce((sum, p) => sum + p.on_time_delivery_rate, 0) / performance.length) *\n                        100\n                      ).toFixed(1)\n                    : 0}\n                  %\n                </p>\n              </div>\n              <Clock className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">คุณภาพเฉลี่ย</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {performance.length > 0\n                    ? ((performance.reduce((sum, p) => sum + p.quality_score, 0) / performance.length) * 100).toFixed(1)\n                    : 0}\n                  %\n                </p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Supplier Performance Cards */}\n      <div className=\"grid gap-6\">\n        {performance.map((supplier) => (\n          <Card key={supplier.supplier_id} className=\"overflow-hidden\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-xl\">{supplier.supplier_name}</CardTitle>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    ประเมินล่าสุด: {new Date(supplier.last_evaluation_date).toLocaleDateString(\"th-TH\")}\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  {getRatingBadge(supplier.overall_rating)}\n                  <div className=\"text-right\">\n                    <div className={`text-2xl font-bold ${getRatingColor(supplier.overall_rating)}`}>\n                      {(supplier.overall_rating * 100).toFixed(1)}%\n                    </div>\n                    <div className=\"text-sm text-gray-500\">คะแนนรวม</div>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"metrics\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"metrics\">ตัวชี้วัด</TabsTrigger>\n                  <TabsTrigger value=\"details\">รายละเอียด</TabsTrigger>\n                  <TabsTrigger value=\"recommendations\">คำแนะนำ</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"metrics\" className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium\">การส่งมอบตรงเวลา</span>\n                          <div className=\"flex items-center gap-1\">\n                            {getPerformanceIcon(supplier.on_time_delivery_rate)}\n                            <span className=\"font-semibold\">{(supplier.on_time_delivery_rate * 100).toFixed(1)}%</span>\n                          </div>\n                        </div>\n                        <Progress value={supplier.on_time_delivery_rate * 100} className=\"h-2\" />\n                      </div>\n\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium\">คุณภาพสินค้า</span>\n                          <div className=\"flex items-center gap-1\">\n                            {getPerformanceIcon(supplier.quality_score)}\n                            <span className=\"font-semibold\">{(supplier.quality_score * 100).toFixed(1)}%</span>\n                          </div>\n                        </div>\n                        <Progress value={supplier.quality_score * 100} className=\"h-2\" />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium\">ความสามารถในการแข่งขันด้านราคา</span>\n                          <div className=\"flex items-center gap-1\">\n                            {getPerformanceIcon(supplier.cost_competitiveness)}\n                            <span className=\"font-semibold\">{(supplier.cost_competitiveness * 100).toFixed(1)}%</span>\n                          </div>\n                        </div>\n                        <Progress value={supplier.cost_competitiveness * 100} className=\"h-2\" />\n                      </div>\n\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium\">ความแม่นยำของ Lead Time</span>\n                          <div className=\"flex items-center gap-1\">\n                            {getPerformanceIcon(supplier.lead_time_accuracy)}\n                            <span className=\"font-semibold\">{(supplier.lead_time_accuracy * 100).toFixed(1)}%</span>\n                          </div>\n                        </div>\n                        <Progress value={supplier.lead_time_accuracy * 100} className=\"h-2\" />\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"details\" className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <div className=\"p-4 bg-blue-50 rounded-lg text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{supplier.total_orders}</div>\n                      <div className=\"text-sm text-blue-700\">คำสั่งซื้อทั้งหมด</div>\n                    </div>\n                    <div className=\"p-4 bg-green-50 rounded-lg text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {Math.round(supplier.on_time_delivery_rate * supplier.total_orders)}\n                      </div>\n                      <div className=\"text-sm text-green-700\">ส่งตรงเวลา</div>\n                    </div>\n                    <div className=\"p-4 bg-purple-50 rounded-lg text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        {Math.round(supplier.quality_score * supplier.total_orders)}\n                      </div>\n                      <div className=\"text-sm text-purple-700\">คุณภาพดี</div>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"recommendations\" className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    {supplier.recommendations.map((recommendation, index) => (\n                      <div key={index} className=\"flex items-start gap-3 p-3 bg-yellow-50 rounded-lg\">\n                        <AlertTriangle className=\"w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm text-yellow-800\">{recommendation}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"pt-4 border-t\">\n                    <Button size=\"sm\" className=\"mr-2\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      ดูรายละเอียดเพิ่มเติม\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\">\n                      ติดต่อซัพพลายเออร์\n                    </Button>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {performance.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">ไม่มีข้อมูลซัพพลายเออร์</h3>\n            <p className=\"text-gray-600\">ยังไม่มีข้อมูลประสิทธิภาพของซัพพลายเออร์</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/marketing/AdvancedFacebookAdvertisingDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedCampaign' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":78,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  Target,\n  TrendingUp,\n  Users,\n  DollarSign,\n  MousePointer,\n  Brain,\n  BarChart3,\n  Play,\n  Pause,\n  Download,\n  Zap,\n  Plus,\n  Edit,\n  Star,\n} from \"lucide-react\"\n\ninterface Campaign {\n  id: string\n  name: string\n  status: \"active\" | \"paused\" | \"completed\"\n  budget: number\n  spent: number\n  reach: number\n  impressions: number\n  clicks: number\n  conversions: number\n  ctr: number\n  cpc: number\n  roas: number\n  startDate: string\n  endDate: string\n  targetAudience: string[]\n  adSets: number\n  performance: \"high\" | \"medium\" | \"low\"\n}\n\ninterface AudienceInsight {\n  id: string\n  name: string\n  size: number\n  demographics: {\n    ageGroups: { range: string; percentage: number }[]\n    gender: { male: number; female: number }\n    locations: { country: string; percentage: number }[]\n    interests: string[]\n  }\n  engagement: {\n    avgTimeSpent: number\n    interactionRate: number\n    conversionProbability: number\n  }\n  aiRecommendations: string[]\n}\n\ninterface AIRecommendation {\n  id: string\n  type: \"audience\" | \"budget\" | \"creative\" | \"timing\"\n  title: string\n  description: string\n  impact: \"high\" | \"medium\" | \"low\"\n  confidence: number\n  estimatedImprovement: string\n}\n\nexport default function AdvancedFacebookAdvertisingDashboard() {\n  const [campaigns, setCampaigns] = useState<Campaign[]>([])\n  const [audienceInsights, setAudienceInsights] = useState<AudienceInsight[]>([])\n  const [aiRecommendations, setAIRecommendations] = useState<AIRecommendation[]>([])\n  const [selectedCampaign, setSelectedCampaign] = useState<Campaign | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState(\"overview\")\n\n  useEffect(() => {\n    loadDashboardData()\n  }, [])\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true)\n      // Mock data - in real app, this would fetch from Facebook Graph API\n      const mockCampaigns: Campaign[] = [\n        {\n          id: \"camp_001\",\n          name: \"ผ้าคลุมโซฟาคอลเลกชันใหม่\",\n          status: \"active\",\n          budget: 50000,\n          spent: 32500,\n          reach: 125000,\n          impressions: 450000,\n          clicks: 8900,\n          conversions: 234,\n          ctr: 1.98,\n          cpc: 3.65,\n          roas: 4.2,\n          startDate: \"2025-01-01\",\n          endDate: \"2025-01-31\",\n          targetAudience: [\"homeowners\", \"interior-design\", \"furniture\"],\n          adSets: 3,\n          performance: \"high\",\n        },\n        {\n          id: \"camp_002\",\n          name: \"ส่วนลดพิเศษ 30%\",\n          status: \"active\",\n          budget: 30000,\n          spent: 28900,\n          reach: 89000,\n          impressions: 320000,\n          clicks: 5600,\n          conversions: 156,\n          ctr: 1.75,\n          cpc: 5.16,\n          roas: 2.8,\n          startDate: \"2025-01-10\",\n          endDate: \"2025-01-25\",\n          targetAudience: [\"bargain-hunters\", \"home-decor\"],\n          adSets: 2,\n          performance: \"medium\",\n        },\n      ]\n\n      const mockAudienceInsights: AudienceInsight[] = [\n        {\n          id: \"aud_001\",\n          name: \"เจ้าของบ้านที่รักการตัดแต่ง\",\n          size: 2500000,\n          demographics: {\n            ageGroups: [\n              { range: \"25-34\", percentage: 35 },\n              { range: \"35-44\", percentage: 40 },\n              { range: \"45-54\", percentage: 25 },\n            ],\n            gender: { male: 35, female: 65 },\n            locations: [\n              { country: \"กรุงเทพฯ\", percentage: 45 },\n              { country: \"เชียงใหม่\", percentage: 15 },\n              { country: \"ภูเก็ต\", percentage: 12 },\n            ],\n            interests: [\"การตัดแต่งบ้าน\", \"เฟอร์นิเจอร์\", \"ไลฟ์สไตล์\"],\n          },\n          engagement: {\n            avgTimeSpent: 4.2,\n            interactionRate: 3.8,\n            conversionProbability: 12.5,\n          },\n          aiRecommendations: [\"เพิ่มงบโฆษณาในช่วงสุดสัปดาห์\", \"ใช้ภาพก่อน-หลังการใช้งาน\", \"เน้นข้อความเกี่ยวกับความทนทาน\"],\n        },\n      ]\n\n      const mockAIRecommendations: AIRecommendation[] = [\n        {\n          id: \"rec_001\",\n          type: \"audience\",\n          title: \"ขยายกลุ่มเป้าหมายไปยัง Lookalike Audience\",\n          description: \"สร้าง Lookalike Audience จากลูกค้าที่มีมูลค่าสูงเพื่อเพิ่มการเข้าถึง\",\n          impact: \"high\",\n          confidence: 87,\n          estimatedImprovement: \"+25% conversions\",\n        },\n        {\n          id: \"rec_002\",\n          type: \"budget\",\n          title: \"เพิ่มงบโฆษณาในช่วง 18:00-22:00\",\n          description: \"ข้อมูลแสดงว่าผู้ใช้มีการ engage สูงสุดในช่วงเวลานี้\",\n          impact: \"medium\",\n          confidence: 92,\n          estimatedImprovement: \"+15% CTR\",\n        },\n        {\n          id: \"rec_003\",\n          type: \"creative\",\n          title: \"ทดสอบวิดีโอโฆษณาแทนรูปภาพ\",\n          description: \"วิดีโอมีอัตราการมีส่วนร่วมสูงกว่ารูปภาพ 3.2 เท่า\",\n          impact: \"high\",\n          confidence: 78,\n          estimatedImprovement: \"+40% engagement\",\n        },\n      ]\n\n      setCampaigns(mockCampaigns)\n      setAudienceInsights(mockAudienceInsights)\n      setAIRecommendations(mockAIRecommendations)\n      setSelectedCampaign(mockCampaigns[0])\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"th-TH\", {\n      style: \"currency\",\n      currency: \"THB\",\n    }).format(amount)\n  }\n\n  const formatNumber = (num: number) => {\n    return new Intl.NumberFormat(\"th-TH\").format(num)\n  }\n\n  const getPerformanceBadge = (performance: string) => {\n    const colors = {\n      high: \"campaign-performance-high text-white\",\n      medium: \"campaign-performance-medium text-white\",\n      low: \"campaign-performance-low text-white\",\n    }\n    return colors[performance as keyof typeof colors] || colors.medium\n  }\n\n  const getImpactColor = (impact: string) => {\n    const colors = {\n      high: \"text-green-600 bg-green-50\",\n      medium: \"text-yellow-600 bg-yellow-50\",\n      low: \"text-gray-600 bg-gray-50\",\n    }\n    return colors[impact as keyof typeof colors] || colors.medium\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary\">Facebook Advertising</h1>\n          <p className=\"text-gray-600 mt-1\">ระบบจัดการโฆษณา Facebook ขั้นสูงด้วย AI</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            ส่งออกรายงาน\n          </Button>\n          <Button>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            สร้างแคมเปญใหม่\n          </Button>\n        </div>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"fb-ads-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">งบรวมทั้งหมด</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {formatCurrency(campaigns.reduce((sum, c) => sum + c.budget, 0))}\n                </p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"fb-ads-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">การเข้าถึงรวม</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {formatNumber(campaigns.reduce((sum, c) => sum + c.reach, 0))}\n                </p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"fb-ads-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">คลิกรวม</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {formatNumber(campaigns.reduce((sum, c) => sum + c.clicks, 0))}\n                </p>\n              </div>\n              <MousePointer className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"fb-ads-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">ROAS เฉลี่ย</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {(campaigns.reduce((sum, c) => sum + c.roas, 0) / campaigns.length).toFixed(1)}x\n                </p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-emerald-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n          <TabsTrigger value=\"campaigns\">แคมเปญ</TabsTrigger>\n          <TabsTrigger value=\"audiences\">กลุ่มเป้าหมาย</TabsTrigger>\n          <TabsTrigger value=\"ai-insights\">AI Insights</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* Campaign Performance */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>ประสิทธิภาพแคมเปญ</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {campaigns.map((campaign) => (\n                      <div key={campaign.id} className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <h3 className=\"font-semibold\">{campaign.name}</h3>\n                            <Badge className={getPerformanceBadge(campaign.performance)}>\n                              {campaign.performance === \"high\"\n                                ? \"สูง\"\n                                : campaign.performance === \"medium\"\n                                  ? \"ปานกลาง\"\n                                  : \"ต่ำ\"}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\">\n                              {campaign.status === \"active\" ? (\n                                <Pause className=\"w-4 h-4\" />\n                              ) : (\n                                <Play className=\"w-4 h-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <p className=\"text-gray-600\">งบประมาณ</p>\n                            <p className=\"font-medium\">{formatCurrency(campaign.budget)}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">การเข้าถึง</p>\n                            <p className=\"font-medium\">{formatNumber(campaign.reach)}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">CTR</p>\n                            <p className=\"font-medium\">{campaign.ctr}%</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">ROAS</p>\n                            <p className=\"font-medium text-green-600\">{campaign.roas}x</p>\n                          </div>\n                        </div>\n\n                        <div className=\"mt-3\">\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span>งบที่ใช้ไป</span>\n                            <span>{((campaign.spent / campaign.budget) * 100).toFixed(1)}%</span>\n                          </div>\n                          <Progress value={(campaign.spent / campaign.budget) * 100} className=\"h-2\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* AI Recommendations */}\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"w-5 h-5 text-primary\" />\n                    คำแนะนำจาก AI\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {aiRecommendations.slice(0, 3).map((rec) => (\n                      <div key={rec.id} className=\"p-3 border rounded-lg audience-targeting-glow\">\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <Badge className={getImpactColor(rec.impact)}>\n                            {rec.impact === \"high\" ? \"ผลกระทบสูง\" : rec.impact === \"medium\" ? \"ปานกลาง\" : \"ต่ำ\"}\n                          </Badge>\n                          <div className=\"flex items-center gap-1\">\n                            <Star className=\"w-3 h-3 text-yellow-500\" />\n                            <span className=\"text-xs text-gray-600\">{rec.confidence}%</span>\n                          </div>\n                        </div>\n                        <h4 className=\"font-medium text-sm mb-1\">{rec.title}</h4>\n                        <p className=\"text-xs text-gray-600 mb-2\">{rec.description}</p>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-xs text-green-600 font-medium\">{rec.estimatedImprovement}</span>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-xs h-6 bg-transparent\">\n                            ใช้งาน\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"campaigns\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>จัดการแคมเปญ</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-gray-500\">\n                <Target className=\"w-12 h-12 mx-auto mb-4\" />\n                <p>รายละเอียดการจัดการแคมเปญจะแสดงที่นี่</p>\n                <p className=\"text-sm\">สร้าง แก้ไข และติดตามแคมเปญโฆษณา Facebook</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"audiences\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>การวิเคราะห์กลุ่มเป้าหมาย</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {audienceInsights.map((audience) => (\n                <div key={audience.id} className=\"audience-insight-card p-6 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold\">{audience.name}</h3>\n                    <Badge variant=\"outline\">{formatNumber(audience.size)} คน</Badge>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-3 gap-6\">\n                    <div>\n                      <h4 className=\"font-medium mb-3\">กลุ่มอายุ</h4>\n                      <div className=\"space-y-2\">\n                        {audience.demographics.ageGroups.map((group, index) => (\n                          <div key={index} className=\"flex justify-between items-center\">\n                            <span className=\"text-sm\">{group.range} ปี</span>\n                            <div className=\"flex items-center gap-2\">\n                              <Progress value={group.percentage} className=\"w-16 h-2\" />\n                              <span className=\"text-sm text-gray-600\">{group.percentage}%</span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium mb-3\">เพศ</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">หญิง</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={audience.demographics.gender.female} className=\"w-16 h-2\" />\n                            <span className=\"text-sm text-gray-600\">{audience.demographics.gender.female}%</span>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">ชาย</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={audience.demographics.gender.male} className=\"w-16 h-2\" />\n                            <span className=\"text-sm text-gray-600\">{audience.demographics.gender.male}%</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium mb-3\">ความสนใจ</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {audience.demographics.interests.map((interest, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {interest}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-6 pt-4 border-t\">\n                    <h4 className=\"font-medium mb-3\">คำแนะนำจาก AI</h4>\n                    <div className=\"grid md:grid-cols-3 gap-3\">\n                      {audience.aiRecommendations.map((rec, index) => (\n                        <div key={index} className=\"p-3 bg-primary/5 rounded-lg border border-primary/20\">\n                          <p className=\"text-sm text-primary\">{rec}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"ai-insights\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-primary\" />\n                AI Insights & Recommendations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {aiRecommendations.map((rec) => (\n                  <div key={rec.id} className=\"audience-insight-card p-6 rounded-lg\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className={getImpactColor(rec.impact)}>\n                          {rec.impact === \"high\" ? \"ผลกระทบสูง\" : rec.impact === \"medium\" ? \"ปานกลาง\" : \"ต่ำ\"}\n                        </Badge>\n                        <Badge variant=\"outline\">{rec.type}</Badge>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"w-4 h-4 text-yellow-500\" />\n                        <span className=\"text-sm text-gray-600\">{rec.confidence}%</span>\n                      </div>\n                    </div>\n\n                    <h3 className=\"font-semibold mb-2\">{rec.title}</h3>\n                    <p className=\"text-gray-600 text-sm mb-4\">{rec.description}</p>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-green-600 font-medium\">{rec.estimatedImprovement}</span>\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"outline\">\n                          ดูรายละเอียด\n                        </Button>\n                        <Button size=\"sm\">ใช้งาน</Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>การวิเคราะห์ประสิทธิภาพ</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-gray-500\">\n                <BarChart3 className=\"w-12 h-12 mx-auto mb-4\" />\n                <p>กราฟและการวิเคราะห์ประสิทธิภาพจะแสดงที่นี่</p>\n                <p className=\"text-sm\">ติดตามผลลัพธ์และ ROI ของแคมเปญโฆษณา</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/monitoring/RealTimeMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSystemStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Database,\n  Globe,\n  Server,\n  Users,\n  Zap,\n  RefreshCw,\n} from \"lucide-react\"\n\ninterface SystemStatus {\n  service: string\n  status: \"healthy\" | \"warning\" | \"critical\"\n  responseTime: number\n  uptime: number\n  lastCheck: string\n}\n\ninterface RealTimeMetrics {\n  activeUsers: number\n  requestsPerMinute: number\n  errorRate: number\n  averageResponseTime: number\n  databaseConnections: number\n  memoryUsage: number\n  cpuUsage: number\n}\n\nexport function RealTimeMonitor() {\n  const [systemStatus, setSystemStatus] = useState<SystemStatus[]>([\n    {\n      service: \"Web Application\",\n      status: \"healthy\",\n      responseTime: 245,\n      uptime: 99.9,\n      lastCheck: new Date().toISOString(),\n    },\n    {\n      service: \"Database\",\n      status: \"healthy\",\n      responseTime: 12,\n      uptime: 99.8,\n      lastCheck: new Date().toISOString(),\n    },\n    {\n      service: \"Payment Gateway\",\n      status: \"warning\",\n      responseTime: 890,\n      uptime: 98.5,\n      lastCheck: new Date().toISOString(),\n    },\n    {\n      service: \"Email Service\",\n      status: \"healthy\",\n      responseTime: 156,\n      uptime: 99.7,\n      lastCheck: new Date().toISOString(),\n    },\n  ])\n\n  const [metrics, setMetrics] = useState<RealTimeMetrics>({\n    activeUsers: 23,\n    requestsPerMinute: 145,\n    errorRate: 0.2,\n    averageResponseTime: 234,\n    databaseConnections: 8,\n    memoryUsage: 67,\n    cpuUsage: 23,\n  })\n\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Simulate real-time updates\n      setMetrics((prev) => ({\n        ...prev,\n        activeUsers: prev.activeUsers + Math.floor(Math.random() * 10 - 5),\n        requestsPerMinute: prev.requestsPerMinute + Math.floor(Math.random() * 20 - 10),\n        errorRate: Math.max(0, prev.errorRate + (Math.random() - 0.5) * 0.1),\n        averageResponseTime: prev.averageResponseTime + Math.floor(Math.random() * 50 - 25),\n        databaseConnections: Math.max(1, prev.databaseConnections + Math.floor(Math.random() * 4 - 2)),\n        memoryUsage: Math.max(0, Math.min(100, prev.memoryUsage + Math.floor(Math.random() * 10 - 5))),\n        cpuUsage: Math.max(0, Math.min(100, prev.cpuUsage + Math.floor(Math.random() * 10 - 5))),\n      }))\n    }, 5000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true)\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    setIsRefreshing(false)\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"healthy\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />\n      case \"warning\":\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n      case \"critical\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-600\" />\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"healthy\":\n        return \"bg-green-100 text-green-800\"\n      case \"warning\":\n        return \"bg-yellow-100 text-yellow-800\"\n      case \"critical\":\n        return \"bg-red-100 text-red-800\"\n      default:\n        return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Real-time System Monitor</h2>\n          <p className=\"text-muted-foreground\">Live system health and performance metrics</p>\n        </div>\n        <Button onClick={handleRefresh} disabled={isRefreshing} variant=\"outline\">\n          <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? \"animate-spin\" : \"\"}`} />\n          Refresh\n        </Button>\n      </div>\n\n      {/* System Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {systemStatus.map((service) => (\n          <Card key={service.service}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  {service.service === \"Web Application\" && <Globe className=\"h-4 w-4\" />}\n                  {service.service === \"Database\" && <Database className=\"h-4 w-4\" />}\n                  {service.service === \"Payment Gateway\" && <Zap className=\"h-4 w-4\" />}\n                  {service.service === \"Email Service\" && <Server className=\"h-4 w-4\" />}\n                  <span className=\"font-medium text-sm\">{service.service}</span>\n                </div>\n                {getStatusIcon(service.status)}\n              </div>\n              <div className=\"space-y-2\">\n                <Badge className={getStatusColor(service.status)} variant=\"secondary\">\n                  {service.status === \"healthy\" ? \"Healthy\" : service.status === \"warning\" ? \"Warning\" : \"Critical\"}\n                </Badge>\n                <div className=\"text-xs text-muted-foreground\">\n                  <div>Response: {service.responseTime}ms</div>\n                  <div>Uptime: {service.uptime}%</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Real-time Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Users className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"font-medium text-sm\">Active Users</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{metrics.activeUsers}</div>\n            <div className=\"text-xs text-muted-foreground\">Currently online</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Activity className=\"h-4 w-4 text-green-600\" />\n              <span className=\"font-medium text-sm\">Requests/min</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{metrics.requestsPerMinute}</div>\n            <div className=\"text-xs text-muted-foreground\">API requests per minute</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              <span className=\"font-medium text-sm\">Error Rate</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{metrics.errorRate.toFixed(2)}%</div>\n            <div className=\"text-xs text-muted-foreground\">Error percentage</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Clock className=\"h-4 w-4 text-purple-600\" />\n              <span className=\"font-medium text-sm\">Avg Response</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{metrics.averageResponseTime}ms</div>\n            <div className=\"text-xs text-muted-foreground\">Average response time</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Resource Usage */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Memory Usage</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Used</span>\n                <span>{metrics.memoryUsage}%</span>\n              </div>\n              <Progress value={metrics.memoryUsage} className=\"h-2\" />\n              <div className=\"text-xs text-muted-foreground\">\n                {metrics.memoryUsage > 80 ? \"High usage detected\" : \"Normal usage\"}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">CPU Usage</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Used</span>\n                <span>{metrics.cpuUsage}%</span>\n              </div>\n              <Progress value={metrics.cpuUsage} className=\"h-2\" />\n              <div className=\"text-xs text-muted-foreground\">\n                {metrics.cpuUsage > 70 ? \"High CPU usage\" : \"Normal usage\"}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Database Connections</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Active</span>\n                <span>{metrics.databaseConnections}/20</span>\n              </div>\n              <Progress value={(metrics.databaseConnections / 20) * 100} className=\"h-2\" />\n              <div className=\"text-xs text-muted-foreground\">\n                {metrics.databaseConnections > 15 ? \"High connection usage\" : \"Normal usage\"}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/notifications/NotificationCenter.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadNotifications' and 'loadPreferences'. Either include them or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadNotifications, loadPreferences, userId]","fix":{"range":[1133,1141],"text":"[loadNotifications, loadPreferences, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Bell, Check, AlertTriangle, Info, CheckCircle } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  realTimeNotificationService,\n  type PushNotification,\n  type NotificationPreferences,\n} from \"@/lib/real-time-notification-service\"\n\nexport function NotificationCenter({ userId }: { userId: string }) {\n  const [notifications, setNotifications] = useState<PushNotification[]>([])\n  const [preferences, setPreferences] = useState<NotificationPreferences | null>(null)\n  const [unreadCount, setUnreadCount] = useState(0)\n  const [isOpen, setIsOpen] = useState(false)\n\n  useEffect(() => {\n    loadNotifications()\n    loadPreferences()\n\n    // Refresh notifications every 30 seconds\n    const interval = setInterval(loadNotifications, 30000)\n    return () => clearInterval(interval)\n  }, [userId])\n\n  const loadNotifications = async () => {\n    try {\n      const response = await fetch(`/api/notifications/push?userId=${userId}&limit=20`)\n      const data = await response.json()\n      setNotifications(data.notifications || [])\n      setUnreadCount(data.notifications?.filter((n: PushNotification) => !n.read).length || 0)\n    } catch (error) {\n      console.error(\"Error loading notifications:\", error)\n    }\n  }\n\n  const loadPreferences = () => {\n    const prefs = realTimeNotificationService.getUserPreferences(userId)\n    setPreferences(prefs)\n  }\n\n  const markAsRead = async (notificationId: string) => {\n    await realTimeNotificationService.markAsRead(notificationId)\n    setNotifications((prev) => prev.map((n) => (n.id === notificationId ? { ...n, read: true } : n)))\n    setUnreadCount((prev) => Math.max(0, prev - 1))\n  }\n\n  const markAllAsRead = async () => {\n    const unreadNotifications = notifications.filter((n) => !n.read)\n    for (const notification of unreadNotifications) {\n      await realTimeNotificationService.markAsRead(notification.id)\n    }\n    setNotifications((prev) => prev.map((n) => ({ ...n, read: true })))\n    setUnreadCount(0)\n  }\n\n  const updatePreferences = async (updates: Partial<NotificationPreferences>) => {\n    if (!preferences) return\n\n    const newPreferences = { ...preferences, ...updates }\n    await realTimeNotificationService.updateUserPreferences(userId, updates)\n    setPreferences(newPreferences)\n  }\n\n  const getNotificationIcon = (category: string) => {\n    switch (category) {\n      case \"system\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n      case \"orders\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n      case \"payments\":\n        return <CheckCircle className=\"h-4 w-4 text-blue-500\" />\n      case \"inventory\":\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n      default:\n        return <Info className=\"h-4 w-4 text-gray-500\" />\n    }\n  }\n\n  const formatTime = (timestamp: string) => {\n    const date = new Date(timestamp)\n    const now = new Date()\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60))\n\n    if (diffInMinutes < 1) return \"เมื่อสักครู่\"\n    if (diffInMinutes < 60) return `${diffInMinutes} นาทีที่แล้ว`\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} ชั่วโมงที่แล้ว`\n    return date.toLocaleDateString(\"th-TH\")\n  }\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge\n              variant=\"destructive\"\n              className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n            >\n              {unreadCount > 99 ? \"99+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent className=\"w-96 p-0\" align=\"end\">\n        <Tabs defaultValue=\"notifications\" className=\"w-full\">\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"notifications\">การแจ้งเตือน</TabsTrigger>\n              <TabsTrigger value=\"settings\">ตั้งค่า</TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"notifications\" className=\"mt-0\">\n            <div className=\"max-h-96 overflow-y-auto\">\n              {notifications.length === 0 ? (\n                <div className=\"p-8 text-center text-gray-500\">\n                  <Bell className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>ไม่มีการแจ้งเตือน</p>\n                </div>\n              ) : (\n                <>\n                  <div className=\"p-3 border-b flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">การแจ้งเตือนทั้งหมด ({notifications.length})</span>\n                    {unreadCount > 0 && (\n                      <Button variant=\"ghost\" size=\"sm\" onClick={markAllAsRead}>\n                        <Check className=\"h-4 w-4 mr-1\" />\n                        อ่านทั้งหมด\n                      </Button>\n                    )}\n                  </div>\n\n                  <div className=\"divide-y\">\n                    {notifications.map((notification) => (\n                      <div\n                        key={notification.id}\n                        className={`p-3 hover:bg-gray-50 cursor-pointer ${\n                          !notification.read ? \"bg-blue-50 border-l-4 border-l-blue-500\" : \"\"\n                        }`}\n                        onClick={() => !notification.read && markAsRead(notification.id)}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          {getNotificationIcon(notification.data?.category || \"default\")}\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm font-medium text-gray-900 truncate\">{notification.title}</p>\n                            <p className=\"text-sm text-gray-600 mt-1\">{notification.body}</p>\n                            <p className=\"text-xs text-gray-400 mt-2\">{formatTime(notification.timestamp)}</p>\n                          </div>\n                          {!notification.read && <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\" />}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"mt-0\">\n            <div className=\"p-4 space-y-4\">\n              <div>\n                <h3 className=\"text-sm font-medium mb-3\">ช่องทางการแจ้งเตือน</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Push Notifications</span>\n                    <Switch\n                      checked={preferences?.push || false}\n                      onCheckedChange={(checked) => updatePreferences({ push: checked })}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">อีเมล</span>\n                    <Switch\n                      checked={preferences?.email || false}\n                      onCheckedChange={(checked) => updatePreferences({ email: checked })}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">SMS</span>\n                    <Switch\n                      checked={preferences?.sms || false}\n                      onCheckedChange={(checked) => updatePreferences({ sms: checked })}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-sm font-medium mb-3\">หมวดหมู่การแจ้งเตือน</h3>\n                <div className=\"space-y-3\">\n                  {preferences &&\n                    Object.entries(preferences.categories).map(([category, enabled]) => (\n                      <div key={category} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm capitalize\">\n                          {category === \"orders\" && \"คำสั่งซื้อ\"}\n                          {category === \"payments\" && \"การชำระเงิน\"}\n                          {category === \"inventory\" && \"คลังสินค้า\"}\n                          {category === \"system\" && \"ระบบ\"}\n                          {category === \"customer_service\" && \"บริการลูกค้า\"}\n                        </span>\n                        <Switch\n                          checked={enabled}\n                          onCheckedChange={(checked) =>\n                            updatePreferences({\n                              categories: { ...preferences.categories, [category]: checked },\n                            })\n                          }\n                        />\n                      </div>\n                    ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-sm font-medium mb-3\">ช่วงเวลาเงียบ</h3>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm\">เปิดใช้งาน</span>\n                  <Switch\n                    checked={preferences?.quiet_hours.enabled || false}\n                    onCheckedChange={(checked) =>\n                      updatePreferences({\n                        quiet_hours: { ...preferences?.quiet_hours, enabled: checked } as any,\n                      })\n                    }\n                  />\n                </div>\n                {preferences?.quiet_hours.enabled && (\n                  <div className=\"text-xs text-gray-600\">\n                    {preferences.quiet_hours.start} - {preferences.quiet_hours.end}\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </PopoverContent>\n    </Popover>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/payment/BankTransferInfo.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'getBankInfo'. Either include it or remove the dependency array.","line":23,"column":6,"nodeType":"ArrayExpression","endLine":23,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [getBankInfo, orderId]","fix":{"range":[784,793],"text":"[getBankInfo, orderId]"}}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":136,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู &quot;โอนเงิน\" หรือ \"Transfer\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู &ldquo;โอนเงิน\" หรือ \"Transfer\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู &#34;โอนเงิน\" หรือ \"Transfer\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู &rdquo;โอนเงิน\" หรือ \"Transfer\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":136,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน&quot; หรือ \"Transfer\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน&ldquo; หรือ \"Transfer\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน&#34; หรือ \"Transfer\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน&rdquo; หรือ \"Transfer\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":136,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ &quot;Transfer\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ &ldquo;Transfer\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ &#34;Transfer\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ &rdquo;Transfer\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":136,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ \"Transfer&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ \"Transfer&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ \"Transfer&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5574,5641],"text":"\n                เลือกเมนู \"โอนเงิน\" หรือ \"Transfer&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Copy, Check, Building2, CreditCard, Hash } from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { useBankTransfer } from \"@/hooks/use-payment\"\nimport { formatCurrency } from \"@/lib/money\"\n\ninterface BankTransferInfoProps {\n  amount: number\n  orderId: string\n  onPaymentComplete?: () => void\n}\n\nexport default function BankTransferInfo({ amount, orderId, onPaymentComplete }: BankTransferInfoProps) {\n  const { bankInfo, loading, getBankInfo } = useBankTransfer()\n  const [copiedField, setCopiedField] = useState<string | null>(null)\n\n  useEffect(() => {\n    getBankInfo(orderId)\n  }, [orderId])\n\n  const handleCopy = async (text: string, field: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopiedField(field)\n      toast.success(`คัดลอก${field}แล้ว`)\n      setTimeout(() => setCopiedField(null), 2000)\n    } catch (error) {\n      toast.error(\"ไม่สามารถคัดลอกได้\")\n    }\n  }\n\n  if (loading || !bankInfo) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-4 bg-gray-200 rounded w-3/4 mx-auto\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-1/2 mx-auto\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Building2 className=\"w-5 h-5 mr-2\" />\n          โอนเงินผ่านธนาคาร\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-6\">\n          {/* Amount */}\n          <div className=\"bg-primary/10 rounded-lg p-4 text-center\">\n            <p className=\"text-sm text-gray-600 mb-1\">ยอดที่ต้องชำระ</p>\n            <p className=\"text-2xl font-bold text-primary\">{formatCurrency(amount)}</p>\n          </div>\n\n          {/* Bank Information */}\n          <div className=\"space-y-4\">\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-600\">ธนาคาร</label>\n              </div>\n              <p className=\"font-semibold text-gray-900\">{bankInfo.bank_name}</p>\n              <p className=\"text-sm text-gray-600\">{bankInfo.branch}</p>\n            </div>\n\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-600 flex items-center\">\n                  <CreditCard className=\"w-4 h-4 mr-1\" />\n                  เลขที่บัญชี\n                </label>\n                <Button size=\"sm\" variant=\"ghost\" onClick={() => handleCopy(bankInfo.account_number, \"เลขที่บัญชี\")}>\n                  {copiedField === \"เลขที่บัญชี\" ? (\n                    <Check className=\"w-4 h-4 text-green-600\" />\n                  ) : (\n                    <Copy className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"font-mono text-lg font-bold text-gray-900\">{bankInfo.account_number}</p>\n            </div>\n\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-600\">ชื่อบัญชี</label>\n              </div>\n              <p className=\"font-semibold text-gray-900\">{bankInfo.account_holder}</p>\n            </div>\n\n            <div className=\"bg-yellow-50 rounded-lg p-4 border border-yellow-200\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <label className=\"text-sm font-medium text-yellow-800 flex items-center\">\n                  <Hash className=\"w-4 h-4 mr-1\" />\n                  หมายเลขอ้างอิง (สำคัญ)\n                </label>\n                <Button size=\"sm\" variant=\"ghost\" onClick={() => handleCopy(bankInfo.reference_number, \"หมายเลขอ้างอิง\")}>\n                  {copiedField === \"หมายเลขอ้างอิง\" ? (\n                    <Check className=\"w-4 h-4 text-green-600\" />\n                  ) : (\n                    <Copy className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"font-mono text-lg font-bold text-yellow-900\">{bankInfo.reference_number}</p>\n              <p className=\"text-xs text-yellow-700 mt-1\">\n                กรุณาระบุหมายเลขอ้างอิงนี้เมื่อโอนเงิน เพื่อให้เราสามารถตรวจสอบการชำระเงินได้\n              </p>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className=\"bg-blue-50 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-blue-900 mb-3\">วิธีการโอนเงิน:</h4>\n            <ol className=\"text-sm text-blue-800 space-y-2\">\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  1\n                </span>\n                เปิดแอป Mobile Banking หรือไปที่ตู้ ATM\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  2\n                </span>\n                เลือกเมนู \"โอนเงิน\" หรือ \"Transfer\"\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  3\n                </span>\n                กรอกเลขที่บัญชีปลายทาง: {bankInfo.account_number}\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  4\n                </span>\n                กรอกจำนวนเงิน: {formatCurrency(amount)}\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  5\n                </span>\n                <strong>กรอกหมายเลขอ้างอิง: {bankInfo.reference_number}</strong>\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  6\n                </span>\n                ตรวจสอบข้อมูลและกดยืนยันการโอน\n              </li>\n            </ol>\n          </div>\n\n          {/* Actions */}\n          {onPaymentComplete && (\n            <Button onClick={onPaymentComplete} className=\"w-full\">\n              โอนเงินแล้ว\n            </Button>\n          )}\n\n          {/* Footer */}\n          <div className=\"text-xs text-gray-500 text-center pt-4 border-t\">\n            <p>การโอนเงินจะใช้เวลา 1-2 ชั่วโมงในการตรวจสอบ</p>\n            <p>หากมีปัญหา กรุณาติดต่อ 02-123-4567</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/payment/PromptPayQR.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'clearQR' and 'generateQR'. Either include them or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [amount, clearQR, generateQR, orderId]","fix":{"range":[891,908],"text":"[amount, clearQR, generateQR, orderId]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":120,"column":15,"nodeType":"JSXOpeningElement","endLine":125,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":160,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู &quot;สแกน QR\" หรือ \"PromptPay\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู &ldquo;สแกน QR\" หรือ \"PromptPay\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู &#34;สแกน QR\" หรือ \"PromptPay\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู &rdquo;สแกน QR\" หรือ \"PromptPay\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":160,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR&quot; หรือ \"PromptPay\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR&ldquo; หรือ \"PromptPay\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR&#34; หรือ \"PromptPay\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR&rdquo; หรือ \"PromptPay\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":160,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ &quot;PromptPay\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ &ldquo;PromptPay\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ &#34;PromptPay\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ &rdquo;PromptPay\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":160,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ \"PromptPay&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ \"PromptPay&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ \"PromptPay&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5488,5556],"text":"\n                เลือกเมนู \"สแกน QR\" หรือ \"PromptPay&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Copy, Check, RefreshCw, Clock, CreditCard } from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { usePromptPayQR } from \"@/hooks/use-payment\"\nimport { formatCurrency } from \"@/lib/money\"\n\ninterface PromptPayQRProps {\n  amount: number\n  orderId: string\n  onPaymentComplete?: () => void\n}\n\nexport default function PromptPayQR({ amount, orderId, onPaymentComplete }: PromptPayQRProps) {\n  const { qrCode, loading, error, generateQR, clearQR } = usePromptPayQR()\n  const [timeLeft, setTimeLeft] = useState<number>(0)\n  const [copied, setCopied] = useState(false)\n\n  useEffect(() => {\n    generateQR(amount, orderId)\n    return () => clearQR()\n  }, [amount, orderId])\n\n  useEffect(() => {\n    if (qrCode) {\n      const expiresAt = new Date(qrCode.expires_at).getTime()\n      const updateTimer = () => {\n        const now = Date.now()\n        const remaining = Math.max(0, expiresAt - now)\n        setTimeLeft(remaining)\n\n        if (remaining === 0) {\n          toast.error(\"QR Code หมดอายุแล้ว กรุณาสร้างใหม่\")\n        }\n      }\n\n      updateTimer()\n      const interval = setInterval(updateTimer, 1000)\n      return () => clearInterval(interval)\n    }\n  }, [qrCode])\n\n  const handleCopyReference = async () => {\n    if (!qrCode) return\n\n    try {\n      await navigator.clipboard.writeText(qrCode.reference)\n      setCopied(true)\n      toast.success(\"คัดลอกหมายเลขอ้างอิงแล้ว\")\n      setTimeout(() => setCopied(false), 2000)\n    } catch (error) {\n      toast.error(\"ไม่สามารถคัดลอกได้\")\n    }\n  }\n\n  const handleRefreshQR = () => {\n    generateQR(amount, orderId)\n  }\n\n  const formatTime = (ms: number) => {\n    const minutes = Math.floor(ms / 60000)\n    const seconds = Math.floor((ms % 60000) / 1000)\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`\n  }\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">กำลังสร้าง QR Code...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error || !qrCode) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <p className=\"text-red-600 mb-4\">{error || \"ไม่สามารถสร้าง QR Code ได้\"}</p>\n            <Button onClick={handleRefreshQR} variant=\"outline\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              ลองใหม่\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <CreditCard className=\"w-5 h-5 mr-2\" />\n            ชำระเงินผ่าน PromptPay\n          </div>\n          {timeLeft > 0 && (\n            <Badge variant=\"outline\" className=\"flex items-center\">\n              <Clock className=\"w-3 h-3 mr-1\" />\n              {formatTime(timeLeft)}\n            </Badge>\n          )}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"text-center space-y-6\">\n          {/* QR Code */}\n          <div className=\"flex justify-center\">\n            <div className=\"p-4 bg-white rounded-lg border-2 border-gray-200 shadow-sm\">\n              <img\n                src={qrCode.qr_code || \"/placeholder.svg\"}\n                alt=\"PromptPay QR Code\"\n                className=\"w-48 h-48 mx-auto\"\n                style={{ imageRendering: \"pixelated\" }}\n              />\n            </div>\n          </div>\n\n          {/* Amount */}\n          <div className=\"bg-primary/10 rounded-lg p-4\">\n            <p className=\"text-sm text-gray-600 mb-1\">ยอดที่ต้องชำระ</p>\n            <p className=\"text-2xl font-bold text-primary\">{formatCurrency(amount)}</p>\n          </div>\n\n          {/* Reference Number */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <p className=\"text-sm text-gray-600 mb-2\">หมายเลขอ้างอิง</p>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <code className=\"text-lg font-mono font-bold text-gray-900\">{qrCode.reference}</code>\n              <Button size=\"sm\" variant=\"ghost\" onClick={handleCopyReference}>\n                {copied ? <Check className=\"w-4 h-4 text-green-600\" /> : <Copy className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className=\"text-left space-y-3 bg-blue-50 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-blue-900\">วิธีการชำระเงิน:</h4>\n            <ol className=\"text-sm text-blue-800 space-y-2\">\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  1\n                </span>\n                เปิดแอปธนาคารหรือแอป Mobile Banking\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  2\n                </span>\n                เลือกเมนู \"สแกน QR\" หรือ \"PromptPay\"\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  3\n                </span>\n                สแกน QR Code ด้านบน\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  4\n                </span>\n                ตรวจสอบยอดเงินและหมายเลขอ้างอิง\n              </li>\n              <li className=\"flex items-start\">\n                <span className=\"bg-blue-200 text-blue-900 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mr-2 mt-0.5\">\n                  5\n                </span>\n                กดยืนยันการโอนเงิน\n              </li>\n            </ol>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex space-x-3\">\n            <Button onClick={handleRefreshQR} variant=\"outline\" className=\"flex-1 bg-transparent\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              สร้าง QR ใหม่\n            </Button>\n            {onPaymentComplete && (\n              <Button onClick={onPaymentComplete} className=\"flex-1\">\n                ชำระเงินแล้ว\n              </Button>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"text-xs text-gray-500 pt-4 border-t\">\n            <p>QR Code นี้จะหมดอายุใน 30 นาที</p>\n            <p>หากมีปัญหาการชำระเงิน กรุณาติดต่อ 02-123-4567</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/reporting/ReportDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'execution' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":74,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  Plus,\n  Search,\n  Download,\n  Play,\n  Clock,\n  FileText,\n  BarChart3,\n  Users,\n  Package,\n  DollarSign,\n  TrendingUp,\n  Calendar,\n  Settings,\n  Eye,\n} from \"lucide-react\"\nimport { advancedReportingService, type ReportTemplate, type ReportExecution } from \"@/lib/advanced-reporting-service\"\nimport CustomReportBuilder from \"./CustomReportBuilder\"\n\nexport default function ReportDashboard() {\n  const [activeTab, setActiveTab] = useState(\"templates\")\n  const [templates, setTemplates] = useState<ReportTemplate[]>([])\n  const [executions, setExecutions] = useState<ReportExecution[]>([])\n  const [analytics, setAnalytics] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [selectedCategory, setSelectedCategory] = useState(\"all\")\n  const [showReportBuilder, setShowReportBuilder] = useState(false)\n  const [editingTemplate, setEditingTemplate] = useState<string | null>(null)\n\n  useEffect(() => {\n    loadDashboardData()\n  }, [])\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true)\n      const [templatesData, executionsData, analyticsData] = await Promise.all([\n        advancedReportingService.getTemplates(),\n        advancedReportingService.getExecutions(),\n        advancedReportingService.getReportingAnalytics(),\n      ])\n\n      setTemplates(templatesData)\n      setExecutions(executionsData)\n      setAnalytics(analyticsData)\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const executeReport = async (templateId: string) => {\n    try {\n      // For demo, use default parameters\n      const template = templates.find((t) => t.id === templateId)\n      if (!template) return\n\n      const parameters: Record<string, any> = {}\n      template.parameters.forEach((param) => {\n        parameters[param.name] = param.defaultValue || getDefaultValueForType(param.type)\n      })\n\n      const execution = await advancedReportingService.executeReport(templateId, parameters)\n\n      // Refresh executions\n      const updatedExecutions = await advancedReportingService.getExecutions()\n      setExecutions(updatedExecutions)\n\n      alert(\"รายงานถูกสร้างเรียบร้อยแล้ว\")\n    } catch (error) {\n      console.error(\"Error executing report:\", error)\n      alert(\"เกิดข้อผิดพลาดในการสร้างรายงาน\")\n    }\n  }\n\n  const getDefaultValueForType = (type: string) => {\n    switch (type) {\n      case \"date\":\n        return new Date().toISOString().split(\"T\")[0]\n      case \"dateRange\":\n        return {\n          start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0],\n          end: new Date().toISOString().split(\"T\")[0],\n        }\n      case \"number\":\n        return 10\n      case \"boolean\":\n        return true\n      default:\n        return \"all\"\n    }\n  }\n\n  const exportReport = async (executionId: string, format: \"pdf\" | \"excel\" | \"csv\") => {\n    try {\n      const result = await advancedReportingService.exportReport(executionId, {\n        format,\n        includeCharts: true,\n        includeMetadata: true,\n      })\n\n      if (result.success && result.downloadUrl) {\n        // In a real app, this would trigger a download\n        alert(`รายงานถูกส่งออกเป็น ${format.toUpperCase()} เรียบร้อยแล้ว`)\n      }\n    } catch (error) {\n      console.error(\"Error exporting report:\", error)\n      alert(\"เกิดข้อผิดพลาดในการส่งออกรายงาน\")\n    }\n  }\n\n  const filteredTemplates = templates.filter((template) => {\n    const matchesSearch =\n      template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      template.description.toLowerCase().includes(searchTerm.toLowerCase())\n    const matchesCategory = selectedCategory === \"all\" || template.category === selectedCategory\n    return matchesSearch && matchesCategory\n  })\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"sales\":\n        return <DollarSign className=\"w-5 h-5\" />\n      case \"inventory\":\n        return <Package className=\"w-5 h-5\" />\n      case \"customers\":\n        return <Users className=\"w-5 h-5\" />\n      case \"financial\":\n        return <TrendingUp className=\"w-5 h-5\" />\n      case \"marketing\":\n        return <BarChart3 className=\"w-5 h-5\" />\n      default:\n        return <FileText className=\"w-5 h-5\" />\n    }\n  }\n\n  const getCategoryLabel = (category: string) => {\n    const labels: Record<string, string> = {\n      sales: \"ยอดขาย\",\n      inventory: \"สต็อก\",\n      customers: \"ลูกค้า\",\n      financial: \"การเงิน\",\n      marketing: \"การตลาด\",\n      operations: \"การดำเนินงาน\",\n    }\n    return labels[category] || category\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800\"\n      case \"running\":\n        return \"bg-blue-100 text-blue-800\"\n      case \"failed\":\n        return \"bg-red-100 text-red-800\"\n      default:\n        return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getStatusLabel = (status: string) => {\n    const labels: Record<string, string> = {\n      completed: \"เสร็จสิ้น\",\n      running: \"กำลังดำเนินการ\",\n      failed: \"ล้มเหลว\",\n      pending: \"รอดำเนินการ\",\n    }\n    return labels[status] || status\n  }\n\n  if (showReportBuilder) {\n    return (\n      <CustomReportBuilder\n        templateId={editingTemplate || undefined}\n        onSave={(template) => {\n          setTemplates((prev) => [...prev, template])\n          setShowReportBuilder(false)\n          setEditingTemplate(null)\n        }}\n        onCancel={() => {\n          setShowReportBuilder(false)\n          setEditingTemplate(null)\n        }}\n      />\n    )\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Advanced Reporting System</h1>\n          <p className=\"text-gray-600 mt-1\">ระบบรายงานขั้นสูงและการส่งออกข้อมูล</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button\n            onClick={() => setShowReportBuilder(true)}\n            className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white border-0 hover:from-blue-600 hover:to-purple-600\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            สร้างรายงานใหม่\n          </Button>\n        </div>\n      </div>\n\n      {/* Analytics Overview */}\n      {analytics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">รายงานทั้งหมด</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analytics.totalReports}</p>\n                </div>\n                <FileText className=\"w-8 h-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">การรันรายงาน</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analytics.totalExecutions}</p>\n                </div>\n                <Play className=\"w-8 h-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">เวลาเฉลี่ย</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analytics.avgExecutionTime.toFixed(0)}ms</p>\n                </div>\n                <Clock className=\"w-8 h-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">รายงานยอดนิยม</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analytics.popularTemplates.length}</p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"templates\">เทมเพลตรายงาน</TabsTrigger>\n          <TabsTrigger value=\"executions\">ประวัติการรัน</TabsTrigger>\n          <TabsTrigger value=\"scheduled\">รายงานตามกำหนด</TabsTrigger>\n          <TabsTrigger value=\"analytics\">การวิเคราะห์</TabsTrigger>\n        </TabsList>\n\n        {/* Templates Tab */}\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          {/* Filters */}\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"ค้นหารายงาน...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">ทุกหมวดหมู่</SelectItem>\n                <SelectItem value=\"sales\">ยอดขาย</SelectItem>\n                <SelectItem value=\"inventory\">สต็อก</SelectItem>\n                <SelectItem value=\"customers\">ลูกค้า</SelectItem>\n                <SelectItem value=\"financial\">การเงิน</SelectItem>\n                <SelectItem value=\"marketing\">การตลาด</SelectItem>\n                <SelectItem value=\"operations\">การดำเนินงาน</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Templates Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredTemplates.map((template) => (\n              <Card key={template.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      {getCategoryIcon(template.category)}\n                      <div>\n                        <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                        <Badge className=\"mt-1\">{getCategoryLabel(template.category)}</Badge>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600 text-sm mb-4\">{template.description}</p>\n\n                  <div className=\"text-xs text-gray-500 mb-4\">\n                    <div>พารามิเตอร์: {template.parameters.length} รายการ</div>\n                    <div>ประเภท: {template.type === \"standard\" ? \"มาตรฐาน\" : \"กำหนดเอง\"}</div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" onClick={() => executeReport(template.id)} className=\"flex-1\">\n                      <Play className=\"w-4 h-4 mr-1\" />\n                      รัน\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setEditingTemplate(template.id)\n                        setShowReportBuilder(true)\n                      }}\n                    >\n                      <Settings className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Executions Tab */}\n        <TabsContent value=\"executions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>ประวัติการรันรายงาน</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {executions.slice(0, 10).map((execution) => {\n                  const template = templates.find((t) => t.id === execution.templateId)\n                  return (\n                    <div key={execution.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <div>\n                          <div className=\"font-medium\">{template?.name || \"Unknown Template\"}</div>\n                          <div className=\"text-sm text-gray-600\">\n                            {new Date(execution.createdAt).toLocaleString(\"th-TH\")}\n                          </div>\n                        </div>\n                        <Badge className={getStatusColor(execution.status)}>{getStatusLabel(execution.status)}</Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {execution.status === \"completed\" && (\n                          <>\n                            <div className=\"text-sm text-gray-600 mr-4\">\n                              {execution.metadata?.totalRows} แถว | {execution.metadata?.executionTime}ms\n                            </div>\n                            <Button size=\"sm\" variant=\"outline\" onClick={() => exportReport(execution.id, \"excel\")}>\n                              <Download className=\"w-4 h-4 mr-1\" />\n                              Excel\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" onClick={() => exportReport(execution.id, \"pdf\")}>\n                              <Download className=\"w-4 h-4 mr-1\" />\n                              PDF\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Scheduled Tab */}\n        <TabsContent value=\"scheduled\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                รายงานตามกำหนดเวลา\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <Calendar className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">ยังไม่มีรายงานตามกำหนด</h3>\n                <p className=\"text-gray-600 mb-4\">ตั้งค่าให้ส่งรายงานไปยังอีเมลตามกำหนดเวลา</p>\n                <Button variant=\"outline\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  เพิ่มกำหนดการใหม่\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>รายงานยอดนิยม</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {analytics?.popularTemplates.map((item: any, index: number) => (\n                    <div key={item.templateId} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-bold text-blue-600\">#{index + 1}</span>\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{item.name}</div>\n                          <div className=\"text-sm text-gray-600\">{item.executionCount} ครั้ง</div>\n                        </div>\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>กิจกรรมล่าสุด</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {analytics?.recentActivity.map((activity: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <div className=\"font-medium\">{activity.templateName}</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {new Date(activity.executedAt).toLocaleString(\"th-TH\")}\n                        </div>\n                      </div>\n                      <Badge className={getStatusColor(activity.status)}>{getStatusLabel(activity.status)}</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/reviews-system.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReviews'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadReviews, productId]","fix":{"range":[1181,1192],"text":"[loadReviews, productId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Star, ThumbsUp } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { useAuth } from \"@/app/contexts/AuthContext\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { toast } from \"sonner\"\n\ninterface Review {\n  id: string\n  rating: number\n  title: string\n  comment: string\n  user_id: string\n  verified_purchase: boolean\n  helpful_count: number\n  created_at: string\n  profiles: {\n    full_name: string\n  }\n}\n\ninterface ReviewsSystemProps {\n  productId: string\n}\n\nexport function ReviewsSystem({ productId }: ReviewsSystemProps) {\n  const [reviews, setReviews] = useState<Review[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [showReviewForm, setShowReviewForm] = useState(false)\n  const [newReview, setNewReview] = useState({\n    rating: 5,\n    title: \"\",\n    comment: \"\",\n  })\n  const { user } = useAuth()\n  const supabase = createClient()\n\n  useEffect(() => {\n    loadReviews()\n  }, [productId])\n\n  const loadReviews = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"customer_reviews\")\n        .select(`\n          *,\n          profiles (\n            full_name\n          )\n        `)\n        .eq(\"product_id\", productId)\n        .order(\"created_at\", { ascending: false })\n\n      if (error) throw error\n\n      setReviews(data || [])\n    } catch (error) {\n      console.error(\"Error loading reviews:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const submitReview = async () => {\n    if (!user) {\n      toast.error(\"กรุณาเข้าสู่ระบบเพื่อเขียนรีวิว\")\n      return\n    }\n\n    if (!newReview.title.trim() || !newReview.comment.trim()) {\n      toast.error(\"กรุณากรอกหัวข้อและความคิดเห็น\")\n      return\n    }\n\n    try {\n      const { error } = await supabase.from(\"customer_reviews\").insert({\n        product_id: productId,\n        user_id: user.id,\n        rating: newReview.rating,\n        title: newReview.title,\n        comment: newReview.comment,\n      })\n\n      if (error) throw error\n\n      toast.success(\"เขียนรีวิวสำเร็จ\")\n      setNewReview({ rating: 5, title: \"\", comment: \"\" })\n      setShowReviewForm(false)\n      loadReviews()\n    } catch (error) {\n      console.error(\"Error submitting review:\", error)\n      toast.error(\"เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง\")\n    }\n  }\n\n  const averageRating =\n    reviews.length > 0 ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length : 0\n\n  if (isLoading) {\n    return <div className=\"animate-pulse bg-gray-200 h-64 rounded-lg\"></div>\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Review Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Star className=\"h-5 w-5 fill-yellow-400 text-yellow-400\" />\n            รีวิวสินค้า ({reviews.length} รีวิว)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4 mb-4\">\n            <div className=\"text-3xl font-bold\">{averageRating.toFixed(1)}</div>\n            <div className=\"flex\">\n              {[1, 2, 3, 4, 5].map((star) => (\n                <Star\n                  key={star}\n                  className={`h-5 w-5 ${star <= averageRating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"}`}\n                />\n              ))}\n            </div>\n          </div>\n\n          {user && !showReviewForm && <Button onClick={() => setShowReviewForm(true)}>เขียนรีวิว</Button>}\n        </CardContent>\n      </Card>\n\n      {/* Review Form */}\n      {showReviewForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle>เขียนรีวิวสินค้า</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">คะแนน</label>\n              <div className=\"flex gap-1\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <button key={star} onClick={() => setNewReview({ ...newReview, rating: star })}>\n                    <Star\n                      className={`h-6 w-6 ${\n                        star <= newReview.rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n                      }`}\n                    />\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">หัวข้อรีวิว</label>\n              <Input\n                value={newReview.title}\n                onChange={(e) => setNewReview({ ...newReview, title: e.target.value })}\n                placeholder=\"สรุปความคิดเห็นของคุณ\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">ความคิดเห็น</label>\n              <Textarea\n                value={newReview.comment}\n                onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}\n                placeholder=\"แบ่งปันประสบการณ์การใช้งานสินค้านี้\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button onClick={submitReview}>ส่งรีวิว</Button>\n              <Button variant=\"outline\" onClick={() => setShowReviewForm(false)}>\n                ยกเลิก\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reviews List */}\n      <div className=\"space-y-4\">\n        {reviews.map((review) => (\n          <Card key={review.id}>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start justify-between mb-2\">\n                <div>\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <div className=\"flex\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <Star\n                          key={star}\n                          className={`h-4 w-4 ${\n                            star <= review.rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    {review.verified_purchase && (\n                      <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded\">ซื้อแล้ว</span>\n                    )}\n                  </div>\n                  <h4 className=\"font-medium\">{review.title}</h4>\n                  <p className=\"text-sm text-gray-600 mb-2\">{review.comment}</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                <span>\n                  โดย {review.profiles?.full_name || \"ผู้ใช้งาน\"} •{\" \"}\n                  {new Date(review.created_at).toLocaleDateString(\"th-TH\")}\n                </span>\n                <button className=\"flex items-center gap-1 hover:text-gray-700\">\n                  <ThumbsUp className=\"h-3 w-3\" />\n                  {review.helpful_count}\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/voice/VoiceCommerceInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mediaRecorderRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'audioChunksRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stream' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5317,5371],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5464,5518],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5619,5666],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5705,5743],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":311,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10484,10540],"text":"\n                &quot;หาผ้าคลุมโซฟาสีน้ำเงิน\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10484,10540],"text":"\n                &ldquo;หาผ้าคลุมโซฟาสีน้ำเงิน\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10484,10540],"text":"\n                &#34;หาผ้าคลุมโซฟาสีน้ำเงิน\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10484,10540],"text":"\n                &rdquo;หาผ้าคลุมโซฟาสีน้ำเงิน\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":311,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10484,10540],"text":"\n                \"หาผ้าคลุมโซฟาสีน้ำเงิน&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10484,10540],"text":"\n                \"หาผ้าคลุมโซฟาสีน้ำเงิน&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10484,10540],"text":"\n                \"หาผ้าคลุมโซฟาสีน้ำเงิน&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10484,10540],"text":"\n                \"หาผ้าคลุมโซฟาสีน้ำเงิน&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":314,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10632,10682],"text":"\n                &quot;ใส่ตะกร้า 2 ชิ้น\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10632,10682],"text":"\n                &ldquo;ใส่ตะกร้า 2 ชิ้น\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10632,10682],"text":"\n                &#34;ใส่ตะกร้า 2 ชิ้น\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10632,10682],"text":"\n                &rdquo;ใส่ตะกร้า 2 ชิ้น\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":314,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10632,10682],"text":"\n                \"ใส่ตะกร้า 2 ชิ้น&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10632,10682],"text":"\n                \"ใส่ตะกร้า 2 ชิ้น&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10632,10682],"text":"\n                \"ใส่ตะกร้า 2 ชิ้น&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10632,10682],"text":"\n                \"ใส่ตะกร้า 2 ชิ้น&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":317,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10774,10822],"text":"\n                &quot;ไปหน้าชำระเงิน\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10774,10822],"text":"\n                &ldquo;ไปหน้าชำระเงิน\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10774,10822],"text":"\n                &#34;ไปหน้าชำระเงิน\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10774,10822],"text":"\n                &rdquo;ไปหน้าชำระเงิน\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":317,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10774,10822],"text":"\n                \"ไปหน้าชำระเงิน&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10774,10822],"text":"\n                \"ไปหน้าชำระเงิน&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10774,10822],"text":"\n                \"ไปหน้าชำระเงิน&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10774,10822],"text":"\n                \"ไปหน้าชำระเงิน&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":320,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10914,10960],"text":"\n                &quot;ราคาเท่าไหร่\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10914,10960],"text":"\n                &ldquo;ราคาเท่าไหร่\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10914,10960],"text":"\n                &#34;ราคาเท่าไหร่\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10914,10960],"text":"\n                &rdquo;ราคาเท่าไหร่\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":320,"column":30,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10914,10960],"text":"\n                \"ราคาเท่าไหร่&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10914,10960],"text":"\n                \"ราคาเท่าไหร่&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10914,10960],"text":"\n                \"ราคาเท่าไหร่&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10914,10960],"text":"\n                \"ราคาเท่าไหร่&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":348,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12132,12133],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12132,12133],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12132,12133],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12132,12133],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":348,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12160,12161],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12160,12161],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12160,12161],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12160,12161],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":430,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":430,"endColumn":60},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":436,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[15990,15991],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[15990,15991],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[15990,15991],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[15990,15991],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":436,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[16011,16012],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[16011,16012],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[16011,16012],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[16011,16012],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport {\n  Mic,\n  MicOff,\n  Volume2,\n  MessageSquare,\n  ShoppingCart,\n  Search,\n  Navigation,\n  HelpCircle,\n  Zap,\n  Play,\n  Pause,\n  AlertTriangle,\n} from \"lucide-react\"\nimport { voiceCommerce, type VoiceCommand, type VoiceResponse } from \"@/lib/voice-commerce-engine\"\n\nexport default function VoiceCommerceInterface() {\n  const [isListening, setIsListening] = useState(false)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [isSpeaking, setIsSpeaking] = useState(false)\n  const [sessionId, setSessionId] = useState<string | null>(null)\n  const [currentCommand, setCurrentCommand] = useState<VoiceCommand | null>(null)\n  const [lastResponse, setLastResponse] = useState<VoiceResponse | null>(null)\n  const [commandHistory, setCommandHistory] = useState<VoiceCommand[]>([])\n  const [isSupported, setIsSupported] = useState(true)\n  const [transcript, setTranscript] = useState(\"\")\n  const [confidence, setConfidence] = useState(0)\n\n  const recognitionRef = useRef<any>(null)\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null)\n  const audioChunksRef = useRef<Blob[]>([])\n\n  useEffect(() => {\n    initializeVoiceCommerce()\n    checkBrowserSupport()\n  }, [])\n\n  const checkBrowserSupport = () => {\n    const hasWebSpeech = \"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window\n    const hasMediaRecorder = \"MediaRecorder\" in window\n    const hasSpeechSynthesis = \"speechSynthesis\" in window\n\n    setIsSupported(hasWebSpeech && hasMediaRecorder && hasSpeechSynthesis)\n  }\n\n  const initializeVoiceCommerce = async () => {\n    try {\n      const newSessionId = await voiceCommerce.startVoiceSession(\"user_123\")\n      setSessionId(newSessionId)\n    } catch (error) {\n      console.error(\"Error initializing voice commerce:\", error)\n    }\n  }\n\n  const startListening = async () => {\n    if (!isSupported || !sessionId) return\n\n    try {\n      setIsListening(true)\n      setTranscript(\"\")\n      setConfidence(0)\n\n      // Request microphone permission\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\n\n      // Initialize speech recognition\n      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition\n      recognitionRef.current = new SpeechRecognition()\n\n      recognitionRef.current.continuous = true\n      recognitionRef.current.interimResults = true\n      recognitionRef.current.lang = \"th-TH\"\n\n      recognitionRef.current.onresult = (event: any) => {\n        let interimTranscript = \"\"\n        let finalTranscript = \"\"\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript\n          const confidence = event.results[i][0].confidence\n\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript\n            setConfidence(confidence * 100)\n          } else {\n            interimTranscript += transcript\n          }\n        }\n\n        setTranscript(finalTranscript || interimTranscript)\n\n        if (finalTranscript) {\n          processVoiceCommand(finalTranscript)\n        }\n      }\n\n      recognitionRef.current.onerror = (event: any) => {\n        console.error(\"Speech recognition error:\", event.error)\n        setIsListening(false)\n      }\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false)\n      }\n\n      recognitionRef.current.start()\n    } catch (error) {\n      console.error(\"Error starting voice recognition:\", error)\n      setIsListening(false)\n    }\n  }\n\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop()\n    }\n    setIsListening(false)\n  }\n\n  const processVoiceCommand = async (transcript: string) => {\n    if (!sessionId) return\n\n    try {\n      setIsProcessing(true)\n\n      const response = await voiceCommerce.processVoiceCommand(sessionId, undefined, transcript)\n\n      setLastResponse(response)\n\n      // Execute actions\n      for (const action of response.actions) {\n        await executeAction(action)\n      }\n\n      // Speak response\n      if (response.text) {\n        await speakResponse(response.text)\n      }\n\n      // Update command history\n      const session = voiceCommerce.getSession(sessionId)\n      if (session && session.commands.length > 0) {\n        const latestCommand = session.commands[session.commands.length - 1]\n        setCurrentCommand(latestCommand)\n        setCommandHistory((prev) => [...prev, latestCommand].slice(-10))\n      }\n    } catch (error) {\n      console.error(\"Error processing voice command:\", error)\n    } finally {\n      setIsProcessing(false)\n    }\n  }\n\n  const executeAction = async (action: VoiceResponse[\"actions\"][0]) => {\n    switch (action.type) {\n      case \"navigate\":\n        // Navigate to specified path\n        if (action.payload.path) {\n          window.location.href = action.payload.path\n        }\n        break\n\n      case \"add_product\":\n        // Add product to cart (simulate)\n        console.log(\"Adding product to cart:\", action.payload)\n        break\n\n      case \"show_results\":\n        // Show search results (simulate)\n        console.log(\"Showing search results:\", action.payload)\n        break\n\n      case \"display_info\":\n        // Display product information (simulate)\n        console.log(\"Displaying info:\", action.payload)\n        break\n\n      default:\n        console.log(\"Unknown action:\", action)\n    }\n  }\n\n  const speakResponse = async (text: string) => {\n    try {\n      setIsSpeaking(true)\n      await voiceCommerce.textToSpeech(text)\n    } catch (error) {\n      console.error(\"Error speaking response:\", error)\n    } finally {\n      setIsSpeaking(false)\n    }\n  }\n\n  const getIntentIcon = (intent: VoiceCommand[\"intent\"]) => {\n    const icons = {\n      search: <Search className=\"w-4 h-4\" />,\n      add_to_cart: <ShoppingCart className=\"w-4 h-4\" />,\n      checkout: <ShoppingCart className=\"w-4 h-4\" />,\n      navigate: <Navigation className=\"w-4 h-4\" />,\n      inquiry: <HelpCircle className=\"w-4 h-4\" />,\n      unknown: <MessageSquare className=\"w-4 h-4\" />,\n    }\n    return icons[intent]\n  }\n\n  const getIntentColor = (intent: VoiceCommand[\"intent\"]) => {\n    const colors = {\n      search: \"bg-blue-100 text-blue-800 border-blue-200\",\n      add_to_cart: \"bg-green-100 text-green-800 border-green-200\",\n      checkout: \"bg-purple-100 text-purple-800 border-purple-200\",\n      navigate: \"bg-orange-100 text-orange-800 border-orange-200\",\n      inquiry: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n      unknown: \"bg-gray-100 text-gray-800 border-gray-200\",\n    }\n    return colors[intent]\n  }\n\n  if (!isSupported) {\n    return (\n      <Alert className=\"border-red-200 bg-red-50\">\n        <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n        <AlertDescription className=\"text-red-800\">\n          <strong>ไม่รองรับ Voice Commerce</strong> เบราว์เซอร์ของคุณไม่รองรับฟีเจอร์เสียง กรุณาใช้ Chrome, Edge หรือ Safari\n          เวอร์ชันล่าสุด\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold text-primary flex items-center justify-center gap-3\">\n          <Mic className=\"w-8 h-8\" />\n          Voice Commerce\n        </h1>\n        <p className=\"text-gray-600 mt-1\">สั่งซื้อสินค้าด้วยเสียงอย่างง่ายดาย</p>\n      </div>\n\n      {/* Voice Control Panel */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            {/* Main Voice Button */}\n            <div className=\"relative\">\n              <Button\n                size=\"lg\"\n                className={`w-20 h-20 rounded-full ${\n                  isListening ? \"bg-red-500 hover:bg-red-600 animate-pulse\" : \"bg-blue-500 hover:bg-blue-600\"\n                } text-white`}\n                onClick={isListening ? stopListening : startListening}\n                disabled={isProcessing}\n              >\n                {isListening ? <MicOff className=\"w-8 h-8\" /> : <Mic className=\"w-8 h-8\" />}\n              </Button>\n              {isListening && (\n                <div className=\"absolute -inset-2 border-4 border-red-300 rounded-full animate-ping\"></div>\n              )}\n            </div>\n\n            {/* Status */}\n            <div className=\"text-center\">\n              {isListening && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium text-blue-600\">กำลังฟัง...</p>\n                  {transcript && (\n                    <div className=\"p-3 bg-white rounded-lg border max-w-md\">\n                      <p className=\"text-gray-800\">{transcript}</p>\n                      {confidence > 0 && (\n                        <div className=\"mt-2\">\n                          <Progress value={confidence} className=\"h-1\" />\n                          <p className=\"text-xs text-gray-500 mt-1\">ความมั่นใจ: {confidence.toFixed(0)}%</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {isProcessing && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium text-orange-600\">กำลังประมวลผล...</p>\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-orange-500 mx-auto\"></div>\n                </div>\n              )}\n\n              {isSpeaking && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium text-green-600\">กำลังตอบกลับ...</p>\n                  <Volume2 className=\"w-6 h-6 text-green-500 mx-auto animate-pulse\" />\n                </div>\n              )}\n\n              {!isListening && !isProcessing && !isSpeaking && (\n                <p className=\"text-gray-600\">กดปุ่มไมค์เพื่อเริ่มสั่งซื้อด้วยเสียง</p>\n              )}\n            </div>\n\n            {/* Quick Commands */}\n            <div className=\"flex flex-wrap gap-2 justify-center\">\n              <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-gray-50\">\n                \"หาผ้าคลุมโซฟาสีน้ำเงิน\"\n              </Badge>\n              <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-gray-50\">\n                \"ใส่ตะกร้า 2 ชิ้น\"\n              </Badge>\n              <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-gray-50\">\n                \"ไปหน้าชำระเงิน\"\n              </Badge>\n              <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-gray-50\">\n                \"ราคาเท่าไหร่\"\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Command & Response */}\n      {(currentCommand || lastResponse) && (\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Current Command */}\n          {currentCommand && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  คำสั่งล่าสุด\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge className={getIntentColor(currentCommand.intent)}>\n                    {getIntentIcon(currentCommand.intent)}\n                    <span className=\"ml-1 capitalize\">{currentCommand.intent.replace(\"_\", \" \")}</span>\n                  </Badge>\n                  <span className=\"text-sm text-gray-500\">{Math.round(currentCommand.confidence * 100)}% มั่นใจ</span>\n                </div>\n                <div className=\"p-3 bg-gray-50 rounded-lg\">\n                  <p className=\"text-gray-800\">\"{currentCommand.transcript}\"</p>\n                </div>\n                {Object.keys(currentCommand.entities).length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">ข้อมูลที่ตรวจพบ:</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {Object.entries(currentCommand.entities).map(([key, value]) => (\n                        <Badge key={key} variant=\"outline\" className=\"text-xs\">\n                          {key}: {typeof value === \"object\" ? JSON.stringify(value) : value}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* AI Response */}\n          {lastResponse && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5\" />\n                  การตอบสนอง AI\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"text-blue-800\">{lastResponse.text}</p>\n                </div>\n                {lastResponse.actions.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">การดำเนินการ:</h4>\n                    <div className=\"space-y-1\">\n                      {lastResponse.actions.map((action, index) => (\n                        <div key={index} className=\"text-sm text-gray-600 flex items-center gap-2\">\n                          <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                          {action.type.replace(\"_\", \" \")}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {lastResponse.follow_up_questions && lastResponse.follow_up_questions.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">คำถามติดตาม:</h4>\n                    <div className=\"space-y-1\">\n                      {lastResponse.follow_up_questions.map((question, index) => (\n                        <p key={index} className=\"text-sm text-gray-600\">\n                          • {question}\n                        </p>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-500\">ความมั่นใจ: {Math.round(lastResponse.confidence * 100)}%</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => speakResponse(lastResponse.text)}\n                    disabled={isSpeaking}\n                  >\n                    {isSpeaking ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                    <span className=\"ml-1\">ฟังอีกครั้ง</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* Command History */}\n      {commandHistory.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>ประวัติคำสั่ง</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {commandHistory.slice(-5).map((command, index) => (\n                <div key={command.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className={getIntentColor(command.intent)} variant=\"outline\">\n                      {getIntentIcon(command.intent)}\n                    </Badge>\n                    <span className=\"text-sm\">\"{command.transcript}\"</span>\n                  </div>\n                  <span className=\"text-xs text-gray-500\">\n                    {new Date(command.timestamp).toLocaleTimeString(\"th-TH\")}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/workflow/BusinessProcessTemplates.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterTemplates'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":68,"suggestions":[{"desc":"Update the dependencies array to be: [templates, searchTerm, selectedIndustry, selectedProcessType, filterTemplates]","fix":{"range":[1928,1990],"text":"[templates, searchTerm, selectedIndustry, selectedProcessType, filterTemplates]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  Users,\n  Package,\n  MessageSquare,\n  FileText,\n  CheckCircle,\n  Clock,\n  Star,\n  Download,\n  Play,\n  Search,\n  Filter,\n} from \"lucide-react\"\nimport { enhancedWorkflowEngine, type BusinessProcessTemplate } from \"@/lib/enhanced-workflow-engine\"\n\nconst PROCESS_ICONS: Record<string, any> = {\n  approval: CheckCircle,\n  notification: MessageSquare,\n  data_processing: FileText,\n  integration: Package,\n  customer_journey: Users,\n}\n\nconst INDUSTRY_OPTIONS = [\n  { value: \"all\", label: \"All Industries\" },\n  { value: \"retail\", label: \"Retail & E-commerce\" },\n  { value: \"manufacturing\", label: \"Manufacturing\" },\n  { value: \"healthcare\", label: \"Healthcare\" },\n  { value: \"finance\", label: \"Finance & Banking\" },\n  { value: \"technology\", label: \"Technology\" },\n  { value: \"education\", label: \"Education\" },\n]\n\nexport default function BusinessProcessTemplates() {\n  const [templates, setTemplates] = useState<BusinessProcessTemplate[]>([])\n  const [filteredTemplates, setFilteredTemplates] = useState<BusinessProcessTemplate[]>([])\n  const [selectedTemplate, setSelectedTemplate] = useState<BusinessProcessTemplate | null>(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [selectedIndustry, setSelectedIndustry] = useState(\"all\")\n  const [selectedProcessType, setSelectedProcessType] = useState(\"all\")\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadTemplates()\n  }, [])\n\n  useEffect(() => {\n    filterTemplates()\n  }, [templates, searchTerm, selectedIndustry, selectedProcessType])\n\n  const loadTemplates = async () => {\n    try {\n      setLoading(true)\n      const templatesData = await enhancedWorkflowEngine.getBusinessProcessTemplates()\n      setTemplates(templatesData)\n    } catch (error) {\n      console.error(\"Error loading templates:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const filterTemplates = () => {\n    let filtered = templates\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (template) =>\n          template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          template.description.toLowerCase().includes(searchTerm.toLowerCase()),\n      )\n    }\n\n    if (selectedIndustry !== \"all\") {\n      filtered = filtered.filter((template) => template.industry.includes(selectedIndustry))\n    }\n\n    if (selectedProcessType !== \"all\") {\n      filtered = filtered.filter((template) => template.processType === selectedProcessType)\n    }\n\n    setFilteredTemplates(filtered)\n  }\n\n  const deployProcess = async (processId: string) => {\n    try {\n      const workflow = await enhancedWorkflowEngine.deployBusinessProcess(processId, {})\n      alert(`Business process \"${workflow.name}\" deployed successfully!`)\n    } catch (error) {\n      console.error(\"Error deploying process:\", error)\n      alert(\"Failed to deploy business process\")\n    }\n  }\n\n  const getProcessTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      approval: \"bg-blue-100 text-blue-800\",\n      notification: \"bg-green-100 text-green-800\",\n      data_processing: \"bg-purple-100 text-purple-800\",\n      integration: \"bg-orange-100 text-orange-800\",\n      customer_journey: \"bg-pink-100 text-pink-800\",\n    }\n    return colors[type] || \"bg-gray-100 text-gray-800\"\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Business Process Templates</h1>\n          <p className=\"text-gray-600 mt-1\">Ready-to-use business process automation templates</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Templates\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search templates...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n        <Select value={selectedIndustry} onValueChange={setSelectedIndustry}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            {INDUSTRY_OPTIONS.map((option) => (\n              <SelectItem key={option.value} value={option.value}>\n                {option.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Select value={selectedProcessType} onValueChange={setSelectedProcessType}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Process Type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"approval\">Approval</SelectItem>\n            <SelectItem value=\"notification\">Notification</SelectItem>\n            <SelectItem value=\"data_processing\">Data Processing</SelectItem>\n            <SelectItem value=\"integration\">Integration</SelectItem>\n            <SelectItem value=\"customer_journey\">Customer Journey</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Templates Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredTemplates.map((template) => {\n          const ProcessIcon = PROCESS_ICONS[template.processType] || FileText\n\n          return (\n            <Card key={template.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <ProcessIcon className=\"w-8 h-8 text-blue-600\" />\n                    <div>\n                      <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                      <Badge className={getProcessTypeColor(template.processType)}>\n                        {template.processType.replace(\"_\", \" \")}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                    <span className=\"text-sm text-gray-600\">4.8</span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 text-sm mb-4\">{template.description}</p>\n\n                <div className=\"space-y-3 mb-4\">\n                  <div>\n                    <h4 className=\"font-medium text-sm text-gray-700 mb-2\">Key Benefits:</h4>\n                    <ul className=\"space-y-1\">\n                      {template.benefits.slice(0, 2).map((benefit, index) => (\n                        <li key={index} className=\"text-xs text-gray-600 flex items-center gap-2\">\n                          <CheckCircle className=\"w-3 h-3 text-green-600\" />\n                          {benefit}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-sm text-gray-700 mb-2\">Industries:</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {template.industry.slice(0, 3).map((industry) => (\n                        <Badge key={industry} variant=\"outline\" className=\"text-xs\">\n                          {industry === \"all\" ? \"Universal\" : industry}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between text-sm text-gray-600 mb-4\">\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span>{template.workflow.estimatedSetupTime} min setup</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Package className=\"w-4 h-4\" />\n                    <span>{template.workflow.nodes.length} steps</span>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" onClick={() => setSelectedTemplate(template)} className=\"flex-1\">\n                    <Play className=\"w-4 h-4 mr-1\" />\n                    Preview\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => deployProcess(template.id)}>\n                    Deploy\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n\n      {filteredTemplates.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Filter className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No templates found</h3>\n          <p className=\"text-gray-600\">Try adjusting your search criteria</p>\n        </div>\n      )}\n\n      {/* Template Detail Modal */}\n      {selectedTemplate && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-auto\">\n            <div className=\"p-6 border-b\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  {(() => {\n                    const ProcessIcon = PROCESS_ICONS[selectedTemplate.processType] || FileText\n                    return <ProcessIcon className=\"w-8 h-8 text-blue-600\" />\n                  })()}\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">{selectedTemplate.name}</h2>\n                    <p className=\"text-gray-600\">{selectedTemplate.description}</p>\n                  </div>\n                </div>\n                <Button variant=\"outline\" onClick={() => setSelectedTemplate(null)}>\n                  Close\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"p-6\">\n              <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"benefits\">Benefits</TabsTrigger>\n                  <TabsTrigger value=\"requirements\">Requirements</TabsTrigger>\n                  <TabsTrigger value=\"setup\">Setup Guide</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <h3 className=\"font-semibold mb-3\">Process Details</h3>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Process Type:</span>\n                          <Badge className={getProcessTypeColor(selectedTemplate.processType)}>\n                            {selectedTemplate.processType.replace(\"_\", \" \")}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Setup Time:</span>\n                          <span>{selectedTemplate.workflow.estimatedSetupTime} minutes</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Complexity:</span>\n                          <Badge variant=\"outline\">{selectedTemplate.workflow.difficulty}</Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Steps:</span>\n                          <span>{selectedTemplate.workflow.nodes.length} nodes</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold mb-3\">Industries</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedTemplate.industry.map((industry) => (\n                          <Badge key={industry} variant=\"outline\">\n                            {industry === \"all\" ? \"Universal\" : industry}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"benefits\" className=\"space-y-4\">\n                  <h3 className=\"font-semibold\">Key Benefits</h3>\n                  <ul className=\"space-y-3\">\n                    {selectedTemplate.benefits.map((benefit, index) => (\n                      <li key={index} className=\"flex items-start gap-3\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                        <span>{benefit}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </TabsContent>\n\n                <TabsContent value=\"requirements\" className=\"space-y-4\">\n                  <h3 className=\"font-semibold\">Requirements</h3>\n                  <ul className=\"space-y-3\">\n                    {selectedTemplate.requirements.map((requirement, index) => (\n                      <li key={index} className=\"flex items-start gap-3\">\n                        <Package className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                        <span>{requirement}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </TabsContent>\n\n                <TabsContent value=\"setup\" className=\"space-y-4\">\n                  <h3 className=\"font-semibold\">Setup Instructions</h3>\n                  <ol className=\"space-y-3\">\n                    {selectedTemplate.setupInstructions.map((instruction, index) => (\n                      <li key={index} className=\"flex items-start gap-3\">\n                        <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium mt-0.5\">\n                          {index + 1}\n                        </div>\n                        <span>{instruction}</span>\n                      </li>\n                    ))}\n                  </ol>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex gap-4 mt-6 pt-6 border-t\">\n                <Button onClick={() => deployProcess(selectedTemplate.id)} className=\"flex-1\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Deploy This Process\n                </Button>\n                <Button variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Template\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/workflow/VisualWorkflowBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnecting' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":106,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsConnecting' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":106,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'connectionStart' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":107,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setConnectionStart' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":107,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5410,5451],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5615,5657],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useCallback, useRef } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport {\n  Plus,\n  Save,\n  Play,\n  Settings,\n  Trash2,\n  Copy,\n  Zap,\n  GitBranch,\n  Activity,\n  Users,\n  Timer,\n  Mail,\n  MessageSquare,\n  Database,\n  Webhook,\n  Package,\n} from \"lucide-react\"\nimport type { WorkflowTemplate, WorkflowNode } from \"@/lib/enhanced-workflow-engine\"\n\ninterface NodeType {\n  type: string\n  name: string\n  icon: any\n  color: string\n  description: string\n  category: \"triggers\" | \"actions\" | \"logic\" | \"integrations\"\n}\n\nconst NODE_TYPES: NodeType[] = [\n  // Triggers\n  { type: \"trigger\", name: \"Trigger\", icon: Zap, color: \"purple\", description: \"Start workflow\", category: \"triggers\" },\n  {\n    type: \"webhook\",\n    name: \"Webhook\",\n    icon: Webhook,\n    color: \"indigo\",\n    description: \"HTTP webhook\",\n    category: \"triggers\",\n  },\n\n  // Logic\n  {\n    type: \"condition\",\n    name: \"Condition\",\n    icon: GitBranch,\n    color: \"blue\",\n    description: \"If/then logic\",\n    category: \"logic\",\n  },\n  { type: \"delay\", name: \"Delay\", icon: Timer, color: \"gray\", description: \"Wait period\", category: \"logic\" },\n  {\n    type: \"approval\",\n    name: \"Approval\",\n    icon: Users,\n    color: \"orange\",\n    description: \"Human approval\",\n    category: \"logic\",\n  },\n\n  // Actions\n  {\n    type: \"action\",\n    name: \"Action\",\n    icon: Activity,\n    color: \"green\",\n    description: \"Execute action\",\n    category: \"actions\",\n  },\n  { type: \"email\", name: \"Email\", icon: Mail, color: \"red\", description: \"Send email\", category: \"actions\" },\n  { type: \"sms\", name: \"SMS\", icon: MessageSquare, color: \"green\", description: \"Send SMS\", category: \"actions\" },\n\n  // Integrations\n  {\n    type: \"database\",\n    name: \"Database\",\n    icon: Database,\n    color: \"blue\",\n    description: \"Database query\",\n    category: \"integrations\",\n  },\n  {\n    type: \"integration\",\n    name: \"Integration\",\n    icon: Package,\n    color: \"purple\",\n    description: \"External API\",\n    category: \"integrations\",\n  },\n]\n\nexport default function VisualWorkflowBuilder() {\n  const [workflow, setWorkflow] = useState<WorkflowTemplate | null>(null)\n  const [selectedNode, setSelectedNode] = useState<WorkflowNode | null>(null)\n  const [draggedNodeType, setDraggedNodeType] = useState<string | null>(null)\n  const [isConnecting, setIsConnecting] = useState(false)\n  const [connectionStart, setConnectionStart] = useState<{ nodeId: string; portId: string } | null>(null)\n  const canvasRef = useRef<HTMLDivElement>(null)\n\n  const createNewWorkflow = () => {\n    const newWorkflow: WorkflowTemplate = {\n      id: `workflow_${Date.now()}`,\n      name: \"New Workflow\",\n      description: \"A new workflow\",\n      category: \"operations\",\n      icon: \"Activity\",\n      difficulty: \"beginner\",\n      estimatedSetupTime: 15,\n      isTemplate: false,\n      tags: [],\n      variables: [],\n      nodes: [],\n      connections: [],\n    }\n    setWorkflow(newWorkflow)\n  }\n\n  const addNode = useCallback(\n    (nodeType: string, position: { x: number; y: number }) => {\n      if (!workflow) return\n\n      const nodeTypeConfig = NODE_TYPES.find((nt) => nt.type === nodeType)\n      if (!nodeTypeConfig) return\n\n      const newNode: WorkflowNode = {\n        id: `node_${Date.now()}`,\n        type: nodeType as any,\n        name: nodeTypeConfig.name,\n        description: nodeTypeConfig.description,\n        position,\n        config: {},\n        inputs:\n          nodeType === \"trigger\" ? [] : [{ id: \"in_1\", name: \"Input\", type: \"input\", dataType: \"any\", required: true }],\n        outputs: [{ id: \"out_1\", name: \"Output\", type: \"output\", dataType: \"any\", required: true }],\n      }\n\n      setWorkflow((prev) =>\n        prev\n          ? {\n              ...prev,\n              nodes: [...prev.nodes, newNode],\n            }\n          : null,\n      )\n    },\n    [workflow],\n  )\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault()\n      if (!draggedNodeType || !canvasRef.current) return\n\n      const rect = canvasRef.current.getBoundingClientRect()\n      const position = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      }\n\n      addNode(draggedNodeType, position)\n      setDraggedNodeType(null)\n    },\n    [draggedNodeType, addNode],\n  )\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault()\n  }, [])\n\n  const getNodeIcon = (type: string) => {\n    const nodeType = NODE_TYPES.find((nt) => nt.type === type)\n    return nodeType?.icon || Activity\n  }\n\n  const getNodeColor = (type: string) => {\n    const nodeType = NODE_TYPES.find((nt) => nt.type === type)\n    return nodeType?.color || \"gray\"\n  }\n\n  const deleteNode = (nodeId: string) => {\n    if (!workflow) return\n\n    setWorkflow((prev) =>\n      prev\n        ? {\n            ...prev,\n            nodes: prev.nodes.filter((n) => n.id !== nodeId),\n            connections: prev.connections.filter((c) => c.sourceNodeId !== nodeId && c.targetNodeId !== nodeId),\n          }\n        : null,\n    )\n  }\n\n  const saveWorkflow = async () => {\n    if (!workflow) return\n\n    // In real implementation, save to backend\n    console.log(\"Saving workflow:\", workflow)\n    alert(\"Workflow saved successfully!\")\n  }\n\n  const testWorkflow = async () => {\n    if (!workflow) return\n\n    // In real implementation, execute workflow\n    console.log(\"Testing workflow:\", workflow)\n    alert(\"Workflow test started!\")\n  }\n\n  return (\n    <div className=\"h-screen flex\">\n      {/* Sidebar - Node Palette */}\n      <div className=\"w-80 border-r bg-gray-50\">\n        <div className=\"p-4 border-b\">\n          <h3 className=\"font-semibold text-lg\">Workflow Builder</h3>\n          <p className=\"text-sm text-gray-600\">Drag nodes to canvas</p>\n        </div>\n\n        <Tabs defaultValue=\"nodes\" className=\"h-full\">\n          <TabsList className=\"grid w-full grid-cols-2 m-4\">\n            <TabsTrigger value=\"nodes\">Nodes</TabsTrigger>\n            <TabsTrigger value=\"properties\">Properties</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"nodes\" className=\"px-4\">\n            <ScrollArea className=\"h-[calc(100vh-200px)]\">\n              {[\"triggers\", \"logic\", \"actions\", \"integrations\"].map((category) => (\n                <div key={category} className=\"mb-6\">\n                  <h4 className=\"font-medium text-sm text-gray-700 mb-3 capitalize\">{category}</h4>\n                  <div className=\"space-y-2\">\n                    {NODE_TYPES.filter((nt) => nt.category === category).map((nodeType) => {\n                      const Icon = nodeType.icon\n                      return (\n                        <div\n                          key={nodeType.type}\n                          draggable\n                          onDragStart={() => setDraggedNodeType(nodeType.type)}\n                          className=\"flex items-center gap-3 p-3 border rounded-lg cursor-move hover:bg-white hover:shadow-sm transition-all\"\n                        >\n                          <Icon className={`w-5 h-5 text-${nodeType.color}-600`} />\n                          <div>\n                            <div className=\"font-medium text-sm\">{nodeType.name}</div>\n                            <div className=\"text-xs text-gray-600\">{nodeType.description}</div>\n                          </div>\n                        </div>\n                      )\n                    })}\n                  </div>\n                </div>\n              ))}\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"properties\" className=\"px-4\">\n            {selectedNode ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Node Name</label>\n                  <Input\n                    value={selectedNode.name}\n                    onChange={(e) => {\n                      const updatedNode = { ...selectedNode, name: e.target.value }\n                      setSelectedNode(updatedNode)\n                      // Update in workflow\n                      if (workflow) {\n                        setWorkflow((prev) =>\n                          prev\n                            ? {\n                                ...prev,\n                                nodes: prev.nodes.map((n) => (n.id === selectedNode.id ? updatedNode : n)),\n                              }\n                            : null,\n                        )\n                      }\n                    }}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Description</label>\n                  <Input\n                    value={selectedNode.description}\n                    onChange={(e) => {\n                      const updatedNode = { ...selectedNode, description: e.target.value }\n                      setSelectedNode(updatedNode)\n                      // Update in workflow\n                      if (workflow) {\n                        setWorkflow((prev) =>\n                          prev\n                            ? {\n                                ...prev,\n                                nodes: prev.nodes.map((n) => (n.id === selectedNode.id ? updatedNode : n)),\n                              }\n                            : null,\n                        )\n                      }\n                    }}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Type</label>\n                  <Badge variant=\"outline\">{selectedNode.type}</Badge>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center text-gray-500 mt-8\">\n                <Settings className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                <p>Select a node to edit properties</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Main Canvas */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Toolbar */}\n        <div className=\"border-b p-4 flex items-center justify-between bg-white\">\n          <div className=\"flex items-center gap-4\">\n            <Input\n              placeholder=\"Workflow Name\"\n              value={workflow?.name || \"\"}\n              onChange={(e) => setWorkflow((prev) => (prev ? { ...prev, name: e.target.value } : null))}\n              className=\"w-64\"\n            />\n            <Badge variant=\"outline\">{workflow?.category}</Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button onClick={createNewWorkflow} variant=\"outline\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New\n            </Button>\n            <Button onClick={saveWorkflow} variant=\"outline\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save\n            </Button>\n            <Button onClick={testWorkflow}>\n              <Play className=\"w-4 h-4 mr-2\" />\n              Test\n            </Button>\n          </div>\n        </div>\n\n        {/* Canvas */}\n        <div\n          ref={canvasRef}\n          className=\"flex-1 bg-gray-100 relative overflow-auto\"\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n        >\n          {!workflow ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <Activity className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Create Your First Workflow</h3>\n                <p className=\"text-gray-600 mb-4\">Start by creating a new workflow or selecting a template</p>\n                <Button onClick={createNewWorkflow}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create New Workflow\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"relative w-full h-full\">\n              {/* Grid Background */}\n              <div\n                className=\"absolute inset-0 opacity-20\"\n                style={{\n                  backgroundImage: `\n                    linear-gradient(to right, #e5e7eb 1px, transparent 1px),\n                    linear-gradient(to bottom, #e5e7eb 1px, transparent 1px)\n                  `,\n                  backgroundSize: \"20px 20px\",\n                }}\n              />\n\n              {/* Workflow Nodes */}\n              {workflow.nodes.map((node) => {\n                const Icon = getNodeIcon(node.type)\n                const color = getNodeColor(node.type)\n\n                return (\n                  <div\n                    key={node.id}\n                    className={`absolute bg-white border-2 rounded-lg shadow-sm cursor-pointer transition-all hover:shadow-md ${\n                      selectedNode?.id === node.id ? \"border-blue-500\" : \"border-gray-200\"\n                    }`}\n                    style={{\n                      left: node.position.x,\n                      top: node.position.y,\n                      width: 200,\n                      minHeight: 80,\n                    }}\n                    onClick={() => setSelectedNode(node)}\n                  >\n                    <div className={`p-3 border-b bg-${color}-50`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Icon className={`w-4 h-4 text-${color}-600`} />\n                          <span className=\"font-medium text-sm\">{node.name}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"h-6 w-6 p-0\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              // Copy node\n                            }}\n                          >\n                            <Copy className=\"w-3 h-3\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"h-6 w-6 p-0 text-red-600 hover:text-red-700\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              deleteNode(node.id)\n                            }}\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"p-3\">\n                      <p className=\"text-xs text-gray-600\">{node.description}</p>\n\n                      {/* Input/Output Ports */}\n                      <div className=\"flex justify-between mt-2\">\n                        <div className=\"flex flex-col gap-1\">\n                          {node.inputs.map((input) => (\n                            <div\n                              key={input.id}\n                              className=\"w-3 h-3 bg-blue-500 rounded-full cursor-pointer hover:bg-blue-600\"\n                              title={input.name}\n                            />\n                          ))}\n                        </div>\n                        <div className=\"flex flex-col gap-1\">\n                          {node.outputs.map((output) => (\n                            <div\n                              key={output.id}\n                              className=\"w-3 h-3 bg-green-500 rounded-full cursor-pointer hover:bg-green-600\"\n                              title={output.name}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n\n              {/* Connections */}\n              <svg className=\"absolute inset-0 pointer-events-none\">\n                {workflow.connections.map((connection) => {\n                  const sourceNode = workflow.nodes.find((n) => n.id === connection.sourceNodeId)\n                  const targetNode = workflow.nodes.find((n) => n.id === connection.targetNodeId)\n\n                  if (!sourceNode || !targetNode) return null\n\n                  const startX = sourceNode.position.x + 200\n                  const startY = sourceNode.position.y + 40\n                  const endX = targetNode.position.x\n                  const endY = targetNode.position.y + 40\n\n                  return (\n                    <line\n                      key={connection.id}\n                      x1={startX}\n                      y1={startY}\n                      x2={endX}\n                      y2={endY}\n                      stroke=\"#6b7280\"\n                      strokeWidth=\"2\"\n                      markerEnd=\"url(#arrowhead)\"\n                    />\n                  )\n                })}\n\n                {/* Arrow marker definition */}\n                <defs>\n                  <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\n                    <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#6b7280\" />\n                  </marker>\n                </defs>\n              </svg>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/runner/work/dongusa-5dok/dongusa-5dok/components/workflow/WorkflowAutomationDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'COLORS' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedWorkflow' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n// NOTE: Boundary fix only. Do NOT restructure or remove existing UI.\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\"\nimport {\n  Play,\n  Pause,\n  Square,\n  Settings,\n  Plus,\n  Eye,\n  Edit,\n  Trash2,\n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Activity,\n  Zap,\n  GitBranch,\n  Timer,\n  Users,\n  Mail,\n  MessageSquare,\n  Database,\n  Webhook,\n} from \"lucide-react\"\nimport { workflowAutomation, type Workflow, type WorkflowExecution } from \"@/lib/workflow-client\"\n\nconst COLORS = [\"#ec4899\", \"#f43f5e\", \"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"]\n\nexport default function WorkflowAutomationDashboard() {\n  const [workflows, setWorkflows] = useState<Workflow[]>([])\n  const [executions, setExecutions] = useState<WorkflowExecution[]>([])\n  const [selectedWorkflow, setSelectedWorkflow] = useState<Workflow | null>(null)\n  const [analytics, setAnalytics] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState(\"overview\")\n\n  useEffect(() => {\n    loadWorkflowData()\n  }, [])\n\n  const loadWorkflowData = async () => {\n    try {\n      setLoading(true)\n      const [workflowsData, executionsData] = await Promise.all([\n        workflowAutomation.getWorkflows(),\n        workflowAutomation.getExecutions(),\n      ])\n      setWorkflows(workflowsData)\n      setExecutions(executionsData)\n\n      if (workflowsData.length > 0) {\n        const analyticsData = await workflowAutomation.getWorkflowAnalytics(workflowsData[0].id)\n        setAnalytics(analyticsData)\n        setSelectedWorkflow(workflowsData[0])\n      }\n    } catch (error) {\n      console.error(\"Error loading workflow data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Play className=\"w-4 h-4 text-green-600\" />\n      case \"paused\":\n        return <Pause className=\"w-4 h-4 text-yellow-600\" />\n      case \"draft\":\n        return <Edit className=\"w-4 h-4 text-gray-600\" />\n      case \"archived\":\n        return <Square className=\"w-4 h-4 text-gray-400\" />\n      default:\n        return <Settings className=\"w-4 h-4 text-gray-600\" />\n    }\n  }\n\n  const getExecutionStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />\n      case \"failed\":\n        return <XCircle className=\"w-4 h-4 text-red-600\" />\n      case \"running\":\n        return <Activity className=\"w-4 h-4 text-blue-600\" />\n      case \"waiting_approval\":\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />\n      case \"cancelled\":\n        return <Square className=\"w-4 h-4 text-gray-600\" />\n      default:\n        return <AlertTriangle className=\"w-4 h-4 text-gray-600\" />\n    }\n  }\n\n  const getNodeTypeIcon = (type: string) => {\n    switch (type) {\n      case \"trigger\":\n        return <Zap className=\"w-4 h-4 text-purple-600\" />\n      case \"condition\":\n        return <GitBranch className=\"w-4 h-4 text-blue-600\" />\n      case \"action\":\n        return <Activity className=\"w-4 h-4 text-green-600\" />\n      case \"approval\":\n        return <Users className=\"w-4 h-4 text-orange-600\" />\n      case \"delay\":\n        return <Timer className=\"w-4 h-4 text-gray-600\" />\n      case \"email\":\n        return <Mail className=\"w-4 h-4 text-red-600\" />\n      case \"sms\":\n        return <MessageSquare className=\"w-4 h-4 text-green-600\" />\n      case \"webhook\":\n        return <Webhook className=\"w-4 h-4 text-indigo-600\" />\n      case \"database\":\n        return <Database className=\"w-4 h-4 text-blue-600\" />\n      default:\n        return <Settings className=\"w-4 h-4 text-gray-600\" />\n    }\n  }\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      sales: \"bg-green-100 text-green-800\",\n      marketing: \"bg-purple-100 text-purple-800\",\n      inventory: \"bg-blue-100 text-blue-800\",\n      customer_service: \"bg-orange-100 text-orange-800\",\n      finance: \"bg-red-100 text-red-800\",\n      operations: \"bg-gray-100 text-gray-800\",\n    }\n    return colors[category] || \"bg-gray-100 text-gray-800\"\n  }\n\n  const formatDuration = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`\n    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`\n    if (ms < 3600000) return `${(ms / 60000).toFixed(1)}m`\n    return `${(ms / 3600000).toFixed(1)}h`\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Workflow Automation Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">ระบบจัดการ workflow และ automation ครบวงจร</p>\n        </div>\n        <div className=\"flex items-center gap-4 mt-4 md:mt-0\">\n          <Button onClick={loadWorkflowData} variant=\"outline\">\n            <Activity className=\"w-4 h-4 mr-2\" />\n            รีเฟรช\n          </Button>\n          <Button>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            สร้าง Workflow\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Workflows ทั้งหมด</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{workflows.length}</p>\n                <div className=\"flex items-center mt-1\">\n                  <Play className=\"w-4 h-4 text-green-600 mr-1\" />\n                  <span className=\"text-sm font-medium text-green-600\">\n                    {workflows.filter((w) => w.status === \"active\").length} ใช้งาน\n                  </span>\n                </div>\n              </div>\n              <GitBranch className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">การรันทั้งหมด</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{executions.length}</p>\n                <div className=\"flex items-center mt-1\">\n                  <CheckCircle className=\"w-4 h-4 text-green-600 mr-1\" />\n                  <span className=\"text-sm font-medium text-green-600\">\n                    {executions.filter((e) => e.status === \"completed\").length} สำเร็จ\n                  </span>\n                </div>\n              </div>\n              <Activity className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">อัตราความสำเร็จ</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {executions.length > 0\n                    ? ((executions.filter((e) => e.status === \"completed\").length / executions.length) * 100).toFixed(1)\n                    : 0}\n                  %\n                </p>\n                <div className=\"flex items-center mt-1\">\n                  <XCircle className=\"w-4 h-4 text-red-600 mr-1\" />\n                  <span className=\"text-sm font-medium text-red-600\">\n                    {executions.filter((e) => e.status === \"failed\").length} ล้มเหลว\n                  </span>\n                </div>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">เวลาเฉลี่ย</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {executions.length > 0\n                    ? formatDuration(executions.reduce((sum, e) => sum + (e.duration || 0), 0) / executions.length)\n                    : \"0s\"}\n                </p>\n                <div className=\"flex items-center mt-1\">\n                  <Timer className=\"w-4 h-4 text-blue-600 mr-1\" />\n                  <span className=\"text-sm font-medium text-blue-600\">ต่อการรัน</span>\n                </div>\n              </div>\n              <Timer className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">ภาพรวม</TabsTrigger>\n          <TabsTrigger value=\"workflows\">Workflows</TabsTrigger>\n          <TabsTrigger value=\"executions\">การรัน</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"builder\">Builder</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Workflow Categories */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <GitBranch className=\"w-5 h-5\" />\n                Workflows ตามหมวดหมู่\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {[\"sales\", \"marketing\", \"inventory\", \"customer_service\", \"finance\", \"operations\"].map((category) => {\n                  const categoryWorkflows = workflows.filter((w) => w.category === category)\n                  const activeCount = categoryWorkflows.filter((w) => w.status === \"active\").length\n\n                  return (\n                    <Card key={category} className=\"border\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-semibold capitalize\">{category.replace(\"_\", \" \")}</h4>\n                          <Badge className={getCategoryColor(category)}>{categoryWorkflows.length}</Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-3\">\n                          {activeCount} ใช้งาน, {categoryWorkflows.length - activeCount} ไม่ใช้งาน\n                        </p>\n                        <Progress value={(activeCount / Math.max(categoryWorkflows.length, 1)) * 100} className=\"h-2\" />\n                      </CardContent>\n                    </Card>\n                  )\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Executions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                การรันล่าสุด\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {executions.slice(0, 10).map((execution) => {\n                  const workflow = workflows.find((w) => w.id === execution.workflow_id)\n                  return (\n                    <div key={execution.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        {getExecutionStatusIcon(execution.status)}\n                        <div>\n                          <p className=\"font-medium\">{workflow?.name || \"Unknown Workflow\"}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {new Date(execution.started_at).toLocaleString(\"th-TH\")}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge\n                          variant={\n                            execution.status === \"completed\"\n                              ? \"default\"\n                              : execution.status === \"failed\"\n                                ? \"destructive\"\n                                : \"secondary\"\n                          }\n                        >\n                          {execution.status}\n                        </Badge>\n                        {execution.duration && (\n                          <p className=\"text-sm text-gray-600 mt-1\">{formatDuration(execution.duration)}</p>\n                        )}\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"workflows\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            {workflows.map((workflow) => (\n              <Card key={workflow.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      {getStatusIcon(workflow.status)}\n                      <div>\n                        <CardTitle className=\"text-lg\">{workflow.name}</CardTitle>\n                        <p className=\"text-sm text-gray-600\">{workflow.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={getCategoryColor(workflow.category)}>{workflow.category}</Badge>\n                      <Badge variant=\"outline\">v{workflow.version}</Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-4 gap-4 mb-4\">\n                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                      <div className=\"text-lg font-bold text-blue-600\">{workflow.nodes.length}</div>\n                      <div className=\"text-sm text-blue-700\">Nodes</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                      <div className=\"text-lg font-bold text-green-600\">\n                        {workflow.execution_stats.total_executions}\n                      </div>\n                      <div className=\"text-sm text-green-700\">การรันทั้งหมด</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                      <div className=\"text-lg font-bold text-purple-600\">\n                        {workflow.execution_stats.total_executions > 0\n                          ? (\n                              (workflow.execution_stats.successful_executions /\n                                workflow.execution_stats.total_executions) *\n                              100\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </div>\n                      <div className=\"text-sm text-purple-700\">อัตราสำเร็จ</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n                      <div className=\"text-lg font-bold text-orange-600\">\n                        {formatDuration(workflow.execution_stats.average_duration)}\n                      </div>\n                      <div className=\"text-sm text-orange-700\">เวลาเฉลี่ย</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <Button size=\"sm\" onClick={() => setSelectedWorkflow(workflow)}>\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      ดูรายละเอียด\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      แก้ไข\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      รันทดสอบ\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:text-red-700 bg-transparent\">\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      ลบ\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"executions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>ประวัติการรัน Workflow</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {executions.map((execution) => {\n                  const workflow = workflows.find((w) => w.id === execution.workflow_id)\n                  return (\n                    <div key={execution.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center gap-3\">\n                          {getExecutionStatusIcon(execution.status)}\n                          <div>\n                            <h4 className=\"font-semibold\">{workflow?.name || \"Unknown Workflow\"}</h4>\n                            <p className=\"text-sm text-gray-600\">ID: {execution.id}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge\n                            variant={\n                              execution.status === \"completed\"\n                                ? \"default\"\n                                : execution.status === \"failed\"\n                                  ? \"destructive\"\n                                  : \"secondary\"\n                            }\n                          >\n                            {execution.status}\n                          </Badge>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            {new Date(execution.started_at).toLocaleString(\"th-TH\")}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"grid md:grid-cols-3 gap-4 mb-4\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">เริ่มต้น:</p>\n                          <p className=\"font-medium\">{new Date(execution.started_at).toLocaleString(\"th-TH\")}</p>\n                        </div>\n                        {execution.completed_at && (\n                          <div>\n                            <p className=\"text-sm text-gray-600\">เสร็จสิ้น:</p>\n                            <p className=\"font-medium\">{new Date(execution.completed_at).toLocaleString(\"th-TH\")}</p>\n                          </div>\n                        )}\n                        {execution.duration && (\n                          <div>\n                            <p className=\"text-sm text-gray-600\">ระยะเวลา:</p>\n                            <p className=\"font-medium\">{formatDuration(execution.duration)}</p>\n                          </div>\n                        )}\n                      </div>\n\n                      {execution.error_message && (\n                        <Alert className=\"mb-4\">\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          <AlertDescription>{execution.error_message}</AlertDescription>\n                        </Alert>\n                      )}\n\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          ดู Log\n                        </Button>\n                        {execution.status === \"running\" && (\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 bg-transparent\">\n                            <Square className=\"w-4 h-4 mr-2\" />\n                            ยกเลิก\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          {analytics && (\n            <>\n              <Card>\n                <CardHeader>\n                  <CardTitle>แนวโน้มการรัน Workflow</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={analytics.execution_trend}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"total\" stroke=\"#ec4899\" name=\"ทั้งหมด\" />\n                      <Line type=\"monotone\" dataKey=\"successful\" stroke=\"#10b981\" name=\"สำเร็จ\" />\n                      <Line type=\"monotone\" dataKey=\"failed\" stroke=\"#ef4444\" name=\"ล้มเหลว\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>ประสิทธิภาพ Nodes</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {analytics.node_performance.map((node: any) => (\n                      <div key={node.node_id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            {getNodeTypeIcon(node.node_type)}\n                            <h4 className=\"font-semibold\">{node.node_name}</h4>\n                            <Badge variant=\"outline\">{node.node_type}</Badge>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-lg font-bold text-green-600\">{node.success_rate.toFixed(1)}%</div>\n                            <div className=\"text-sm text-gray-600\">อัตราสำเร็จ</div>\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <p className=\"text-gray-600\">การรัน:</p>\n                            <p className=\"font-medium\">{node.executions}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">สำเร็จ:</p>\n                            <p className=\"font-medium text-green-600\">{node.successful}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">ล้มเหลว:</p>\n                            <p className=\"font-medium text-red-600\">{node.failed}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">เวลาเฉลี่ย:</p>\n                            <p className=\"font-medium\">{formatDuration(node.average_duration)}</p>\n                          </div>\n                        </div>\n                        <Progress value={node.success_rate} className=\"h-2 mt-3\" />\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"builder\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Plus className=\"w-5 h-5\" />\n                Workflow Builder\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <GitBranch className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Visual Workflow Builder</h3>\n                <p className=\"text-gray-600 mb-6\">สร้างและแก้ไข workflow ด้วย drag-and-drop interface</p>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  เริ่มสร้าง Workflow ใหม่\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]