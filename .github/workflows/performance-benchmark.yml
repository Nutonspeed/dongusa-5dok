name: Performance Benchmark

on:
  # Run on pushes to main branch
  push:
    branches: [main]
  
  # Run on pull requests
  pull_request:
    branches: [main]
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run weekly on Sundays at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'

jobs:
  benchmark:
    name: Performance Benchmark Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g tsx
          
      - name: Setup environment
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=http://example.com" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=dummy" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          
      - name: Create reports directory
        run: mkdir -p docs/performance/reports
        
      - name: Run benchmark tests
        id: benchmark
        run: |
          echo "🚀 Starting Performance Benchmark Tests..."
          tsx scripts/run-benchmark-tests.ts
          echo "✅ Benchmark tests completed"
          
      - name: Run Lighthouse performance audit
        id: lighthouse
        run: |
          echo "🔍 Running Lighthouse performance audit..."
          
          # Install Lighthouse
          npm install -g @lhci/cli@0.12.x
          
          # Create a simple test server setup for Lighthouse
          echo "Setting up test environment for Lighthouse..."
          
          # Create a minimal test page for benchmarking
          mkdir -p test-site
          cat > test-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Performance Test Page</title>
          </head>
          <body>
            <h1>Performance Benchmark Test</h1>
            <p>This is a test page for performance benchmarking.</p>
          </body>
          </html>
          EOF
          
          # Start a simple HTTP server
          cd test-site
          python3 -m http.server 8080 &
          SERVER_PID=$!
          sleep 2
          
          # Run Lighthouse audit
          lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8080 || true
          
          # Stop the server
          kill $SERVER_PID || true
          
          echo "✅ Lighthouse audit completed"
          
      - name: Generate performance summary
        run: |
          echo "📊 Generating performance summary..."
          
          # Create a summary report
          cat > docs/performance/reports/summary.md << 'EOF'
          # Performance Benchmark Summary
          
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow Run**: ${{ github.run_number }}
          **Commit**: ${{ github.sha }}
          
          ## Tests Executed
          
          - ✅ Benchmark Tests
          - ✅ Lighthouse Performance Audit
          
          ## Reports Generated
          
          - Benchmark JSON Report
          - Benchmark Markdown Report
          - Lighthouse Performance Report
          
          ## Next Steps
          
          Review the detailed reports in the artifacts section.
          EOF
          
          echo "✅ Performance summary generated"
          
      - name: Upload benchmark reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-benchmark-reports-${{ github.run_number }}
          path: |
            docs/performance/reports/
            .lighthouseci/
          retention-days: 30
          
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-artifacts-${{ github.run_number }}
          path: |
            test-site/
          retention-days: 7
          
      - name: Performance summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read benchmark results if available
            let benchmarkSummary = '📊 Performance benchmark completed';
            
            try {
              const reportFiles = fs.readdirSync('docs/performance/reports/');
              const jsonReports = reportFiles.filter(f => f.endsWith('.json'));
              
              if (jsonReports.length > 0) {
                const reportPath = `docs/performance/reports/${jsonReports[0]}`;
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                benchmarkSummary = `## 📊 Performance Benchmark Results
                
            **Overall Score**: ${report.summary.overallScore}/100
            **Tests Run**: ${report.summary.testsRun}
            **Critical Issues**: ${report.summary.criticalIssues.length}
            
            View detailed reports in the workflow artifacts.`;
              }
            } catch (error) {
              console.log('Could not read benchmark results:', error.message);
            }
            
            // Post comment to PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: benchmarkSummary
            });