export interface MessengerConfig {
  pageId: string
  accessToken?: string
  webhookVerifyToken?: string
  apiVersion: string
}

export interface FabricSelection {
  fabricId: string
  fabricName: string
  collectionName: string
  imageUrl: string
  price: string
  customerMessage?: string
}

export interface BillShare {
  billId: string
  customerName: string
  totalAmount: number
  billUrl: string
  customMessage?: string
}

export class MessengerIntegrationService {
  private config: MessengerConfig

  constructor(config: MessengerConfig) {
    this.config = config
  }

  // ‡∏™‡πà‡∏á‡∏•‡∏≤‡∏¢‡∏ú‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Messenger
  async sendFabricSelection(selection: FabricSelection, recipientId?: string): Promise<string> {
    const message = this.formatFabricMessage(selection)

    if (recipientId && this.config.accessToken) {
      // ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô Facebook API (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ access token)
      return await this.sendDirectMessage(recipientId, message, selection.imageUrl)
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Messenger ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      return this.createMessengerUrl(message)
    }
  }

  // ‡∏™‡πà‡∏á‡∏ö‡∏¥‡∏•‡∏ú‡πà‡∏≤‡∏ô Messenger
  async sendBillToMessenger(bill: BillShare, recipientId?: string): Promise<string> {
    const message = this.formatBillMessage(bill)

    if (recipientId && this.config.accessToken) {
      return await this.sendDirectMessage(recipientId, message)
    } else {
      return this.createMessengerUrl(message)
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≤‡∏¢‡∏ú‡πâ‡∏≤
  private formatFabricMessage(selection: FabricSelection): string {
    return `üé® ‡∏•‡∏≤‡∏¢‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${selection.fabricName}

üìÅ ‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô: ${selection.collectionName}
üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${selection.price}

${selection.customerMessage || "‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏ú‡πâ‡∏≤‡∏Ñ‡∏•‡∏∏‡∏°‡πÇ‡∏ã‡∏ü‡∏≤‡∏•‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞"}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏ã‡∏ü‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞`
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏¥‡∏•
  private formatBillMessage(bill: BillShare): string {
    return `üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡∏ö‡∏¥‡∏•

üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${bill.customerName}
üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${bill.totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó

üîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•: ${bill.billUrl}

${bill.customMessage || "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞"}`
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Messenger
  public createMessengerUrl(message: string): string {
    const encodedMessage = encodeURIComponent(message)
    return `https://m.me/${this.config.pageId}?text=${encodedMessage}`
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ú‡πà‡∏≤‡∏ô Facebook API (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  private async sendDirectMessage(recipientId: string, message: string, imageUrl?: string): Promise<string> {
    if (!this.config.accessToken) {
      throw new Error("Access token required for direct messaging")
    }

    const payload: any = {
      recipient: { id: recipientId },
      message: { text: message },
    }

    if (imageUrl) {
      payload.message = {
        attachment: {
          type: "image",
          payload: { url: imageUrl },
        },
      }
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
      setTimeout(() => {
        this.sendDirectMessage(recipientId, message)
      }, 1000)
    }

    try {
      const response = await fetch(`https://graph.facebook.com/v${this.config.apiVersion}/me/messages`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.config.accessToken}`,
        },
        body: JSON.stringify(payload),
      })

      if (!response.ok) {
        throw new Error(`Facebook API error: ${response.statusText}`)
      }

      return "Message sent successfully"
    } catch (error) {
      console.error("Error sending message:", error)
      // Fallback to URL method
      return this.createMessengerUrl(message)
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö webhook signature (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  verifyWebhookSignature(signature: string, body: string): boolean {
    if (!this.config.webhookVerifyToken) return false

    const crypto = require("crypto")
    const expectedSignature = crypto.createHmac("sha256", this.config.webhookVerifyToken).update(body).digest("hex")

    return signature === `sha256=${expectedSignature}`
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export const messengerService = new MessengerIntegrationService({
  pageId: process.env.FACEBOOK_PAGE_ID || "your-facebook-page-id",
  accessToken: process.env.FACEBOOK_ACCESS_TOKEN,
  webhookVerifyToken: process.env.FACEBOOK_WEBHOOK_VERIFY_TOKEN,
  apiVersion: "18.0",
})
